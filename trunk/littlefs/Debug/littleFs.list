
littleFs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b580  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  0800b750  0800b750  0001b750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c320  0800c320  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c320  0800c320  0001c320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c328  0800c328  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c328  0800c328  0001c328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c32c  0800c32c  0001c32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000070  0800c3a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  0800c3a0  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012920  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002179  00000000  00000000  000329c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00034b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00035a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f73  00000000  00000000  00036ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a4d  00000000  00000000  00059b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cea13  00000000  00000000  0006b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139f7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc8  00000000  00000000  00139fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0013eb94  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0013ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b738 	.word	0x0800b738

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800b738 	.word	0x0800b738

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f81a 	bl	8000318 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__popcountsi2>:
 80002f0:	0843      	lsrs	r3, r0, #1
 80002f2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002fe:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000302:	4418      	add	r0, r3
 8000304:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000308:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 800030c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000310:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000314:	0e00      	lsrs	r0, r0, #24
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4293      	cmp	r3, r2
 80005fc:	bf38      	it	cc
 80005fe:	4613      	movcc	r3, r2
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4293      	cmp	r3, r2
 800061c:	bf28      	it	cs
 800061e:	4613      	movcs	r3, r2
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	fbb3 f2f2 	udiv	r2, r3, r2
 800063e:	6839      	ldr	r1, [r7, #0]
 8000640:	fb01 f202 	mul.w	r2, r1, r2
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	1ad3      	subs	r3, r2, r3
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
 800065e:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	4413      	add	r3, r2
 8000666:	3b01      	subs	r3, #1
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ffde 	bl	800062c <lfs_aligndown>
 8000670:	4603      	mov	r3, r0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3b01      	subs	r3, #1
 8000686:	fab3 f383 	clz	r3, r3
 800068a:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	fa93 f3a3 	rbit	r3, r3
 80006a8:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fe15 	bl	80002f0 <__popcountsi2>
 80006c6:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	1ad3      	subs	r3, r2, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 80006f4:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ffee 	bl	80006ec <lfs_fromle32>
 8000710:	4603      	mov	r3, r0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8000726:	4618      	mov	r0, r3
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ffed 	bl	800071a <lfs_frombe32>
 8000740:	4603      	mov	r3, r0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f009 feda 	bl	800a50c <malloc>
 8000758:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f009 fed6 	bl	800a51c <free>
#else
    (void)p;
#endif
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	601a      	str	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	68d8      	ldr	r0, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80007a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007aa:	461a      	mov	r2, r3
 80007ac:	21ff      	movs	r1, #255	; 0xff
 80007ae:	f009 fedb 	bl	800a568 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	601a      	str	r2, [r3, #0]
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80007d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007d4:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80007da:	6a1b      	ldr	r3, [r3, #32]
 80007dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007de:	429a      	cmp	r2, r3
 80007e0:	d208      	bcs.n	80007f4 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 80007e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007e6:	441a      	add	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80007ec:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 80007ee:	429a      	cmp	r2, r3
 80007f0:	f240 811b 	bls.w	8000a2a <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 80007f4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80007f8:	e11c      	b.n	8000a34 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80007fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007fc:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d03f      	beq.n	8000884 <lfs_bd_read+0xc0>
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800080a:	429a      	cmp	r2, r3
 800080c:	d13a      	bne.n	8000884 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	685a      	ldr	r2, [r3, #4]
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800081a:	429a      	cmp	r2, r3
 800081c:	d232      	bcs.n	8000884 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000824:	429a      	cmp	r2, r3
 8000826:	d324      	bcc.n	8000872 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	6859      	ldr	r1, [r3, #4]
 8000830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000832:	1acb      	subs	r3, r1, r3
 8000834:	4413      	add	r3, r2
 8000836:	4619      	mov	r1, r3
 8000838:	69b8      	ldr	r0, [r7, #24]
 800083a:	f7ff fee7 	bl	800060c <lfs_min>
 800083e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800084a:	1acb      	subs	r3, r1, r3
 800084c:	4413      	add	r3, r2
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	4619      	mov	r1, r3
 8000852:	69f8      	ldr	r0, [r7, #28]
 8000854:	f009 fe7a 	bl	800a54c <memcpy>

                data += diff;
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	4413      	add	r3, r2
 800085e:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	4413      	add	r3, r2
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000870:	e0db      	b.n	8000a2a <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	685a      	ldr	r2, [r3, #4]
 8000876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	4619      	mov	r1, r3
 800087c:	69b8      	ldr	r0, [r7, #24]
 800087e:	f7ff fec5 	bl	800060c <lfs_min>
 8000882:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800088a:	429a      	cmp	r2, r3
 800088c:	d13a      	bne.n	8000904 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800089a:	429a      	cmp	r2, r3
 800089c:	d232      	bcs.n	8000904 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d324      	bcc.n	80008f2 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6859      	ldr	r1, [r3, #4]
 80008b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b2:	1acb      	subs	r3, r1, r3
 80008b4:	4413      	add	r3, r2
 80008b6:	4619      	mov	r1, r3
 80008b8:	69b8      	ldr	r0, [r7, #24]
 80008ba:	f7ff fea7 	bl	800060c <lfs_min>
 80008be:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	68da      	ldr	r2, [r3, #12]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80008ca:	1acb      	subs	r3, r1, r3
 80008cc:	4413      	add	r3, r2
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4619      	mov	r1, r3
 80008d2:	69f8      	ldr	r0, [r7, #28]
 80008d4:	f009 fe3a 	bl	800a54c <memcpy>

                data += diff;
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	4413      	add	r3, r2
 80008de:	61fb      	str	r3, [r7, #28]
                off += diff;
 80008e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	4413      	add	r3, r2
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80008e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80008f0:	e09b      	b.n	8000a2a <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685a      	ldr	r2, [r3, #4]
 80008f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	69b8      	ldr	r0, [r7, #24]
 80008fe:	f7ff fe85 	bl	800060c <lfs_min>
 8000902:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	429a      	cmp	r2, r3
 800090a:	d336      	bcc.n	800097a <lfs_bd_read+0x1b6>
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000914:	fbb3 f1f2 	udiv	r1, r3, r2
 8000918:	fb01 f202 	mul.w	r2, r1, r2
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	2b00      	cmp	r3, #0
 8000920:	d12b      	bne.n	800097a <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000926:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800092a:	429a      	cmp	r2, r3
 800092c:	d325      	bcc.n	800097a <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4619      	mov	r1, r3
 8000936:	69b8      	ldr	r0, [r7, #24]
 8000938:	f7ff fe78 	bl	800062c <lfs_aligndown>
 800093c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000942:	685c      	ldr	r4, [r3, #4]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000952:	47a0      	blx	r4
 8000954:	6178      	str	r0, [r7, #20]
            if (err) {
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <lfs_bd_read+0x19c>
                return err;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	e069      	b.n	8000a34 <lfs_bd_read+0x270>
            }

            data += diff;
 8000960:	69fa      	ldr	r2, [r7, #28]
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	4413      	add	r3, r2
 8000966:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	4413      	add	r3, r2
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8000970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8000978:	e057      	b.n	8000a2a <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800097e:	6a1b      	ldr	r3, [r3, #32]
 8000980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000982:	429a      	cmp	r2, r3
 8000984:	d305      	bcc.n	8000992 <lfs_bd_read+0x1ce>
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <lfs_bd_read+0x278>)
 8000988:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <lfs_bd_read+0x27c>)
 800098a:	216b      	movs	r1, #107	; 0x6b
 800098c:	482d      	ldr	r0, [pc, #180]	; (8000a44 <lfs_bd_read+0x280>)
 800098e:	f009 fd63 	bl	800a458 <__assert_func>
        rcache->block = block;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000996:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4619      	mov	r1, r3
 80009a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80009a2:	f7ff fe43 	bl	800062c <lfs_aligndown>
 80009a6:	4602      	mov	r2, r0
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 80009ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4619      	mov	r1, r3
 80009ba:	4610      	mov	r0, r2
 80009bc:	f7ff fe4b 	bl	8000656 <lfs_alignup>
 80009c0:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80009c6:	69db      	ldr	r3, [r3, #28]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4610      	mov	r0, r2
 80009cc:	f7ff fe1e 	bl	800060c <lfs_min>
 80009d0:	4602      	mov	r2, r0
                - rcache->off,
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 80009d6:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 80009dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009de:	4619      	mov	r1, r3
 80009e0:	4610      	mov	r0, r2
 80009e2:	f7ff fe13 	bl	800060c <lfs_min>
 80009e6:	4602      	mov	r2, r0
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80009f0:	685c      	ldr	r4, [r3, #4]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6819      	ldr	r1, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	462b      	mov	r3, r5
 8000a0a:	47a0      	blx	r4
 8000a0c:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	dd05      	ble.n	8000a20 <lfs_bd_read+0x25c>
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <lfs_bd_read+0x284>)
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <lfs_bd_read+0x27c>)
 8000a18:	2176      	movs	r1, #118	; 0x76
 8000a1a:	480a      	ldr	r0, [pc, #40]	; (8000a44 <lfs_bd_read+0x280>)
 8000a1c:	f009 fd1c 	bl	800a458 <__assert_func>
        if (err) {
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <lfs_bd_read+0x266>
            return err;
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	e004      	b.n	8000a34 <lfs_bd_read+0x270>
    while (size > 0) {
 8000a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f47f aee4 	bne.w	80007fa <lfs_bd_read+0x36>
        }
    }

    return 0;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3c:	0800b750 	.word	0x0800b750
 8000a40:	0800c0c4 	.word	0x0800c0c4
 8000a44:	0800b770 	.word	0x0800b770
 8000a48:	0800b78c 	.word	0x0800b78c

08000a4c <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af04      	add	r7, sp, #16
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8000a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a5c:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
 8000a66:	e039      	b.n	8000adc <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2108      	movs	r1, #8
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fdcb 	bl	800060c <lfs_min>
 8000a76:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	1ad1      	subs	r1, r2, r3
 8000a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	4413      	add	r3, r2
 8000a84:	69fa      	ldr	r2, [r7, #28]
 8000a86:	9203      	str	r2, [sp, #12]
 8000a88:	f107 0210 	add.w	r2, r7, #16
 8000a8c:	9202      	str	r2, [sp, #8]
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	460b      	mov	r3, r1
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff fe92 	bl	80007c4 <lfs_bd_read>
 8000aa0:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <lfs_bd_cmp+0x60>
            return res;
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	e01c      	b.n	8000ae6 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8000aac:	6a3a      	ldr	r2, [r7, #32]
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	18d1      	adds	r1, r2, r3
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f009 fd37 	bl	800a52c <memcmp>
 8000abe:	61b8      	str	r0, [r7, #24]
        if (res) {
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	da01      	bge.n	8000ad0 <lfs_bd_cmp+0x84>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e00a      	b.n	8000ae6 <lfs_bd_cmp+0x9a>
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	e008      	b.n	8000ae6 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	4413      	add	r3, r2
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
 8000adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d3c1      	bcc.n	8000a68 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000af0:	b5b0      	push	{r4, r5, r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af04      	add	r7, sp, #16
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b06:	d061      	beq.n	8000bcc <lfs_bd_flush+0xdc>
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f113 0f02 	cmn.w	r3, #2
 8000b10:	d05c      	beq.n	8000bcc <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d305      	bcc.n	8000b2c <lfs_bd_flush+0x3c>
 8000b20:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <lfs_bd_flush+0xe8>)
 8000b22:	4a2e      	ldr	r2, [pc, #184]	; (8000bdc <lfs_bd_flush+0xec>)
 8000b24:	219e      	movs	r1, #158	; 0x9e
 8000b26:	482e      	ldr	r0, [pc, #184]	; (8000be0 <lfs_bd_flush+0xf0>)
 8000b28:	f009 fc96 	bl	800a458 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4619      	mov	r1, r3
 8000b38:	4610      	mov	r0, r2
 8000b3a:	f7ff fd8c 	bl	8000656 <lfs_alignup>
 8000b3e:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b44:	689c      	ldr	r4, [r3, #8]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	6819      	ldr	r1, [r3, #0]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	47a0      	blx	r4
 8000b5e:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd05      	ble.n	8000b72 <lfs_bd_flush+0x82>
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <lfs_bd_flush+0xf4>)
 8000b68:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <lfs_bd_flush+0xec>)
 8000b6a:	21a2      	movs	r1, #162	; 0xa2
 8000b6c:	481c      	ldr	r0, [pc, #112]	; (8000be0 <lfs_bd_flush+0xf0>)
 8000b6e:	f009 fc73 	bl	800a458 <__assert_func>
        if (err) {
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <lfs_bd_flush+0x8c>
            return err;
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	e028      	b.n	8000bce <lfs_bd_flush+0xde>
        }

        if (validate) {
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d020      	beq.n	8000bc4 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f7ff fdf7 	bl	8000778 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8000b92:	68b9      	ldr	r1, [r7, #8]
 8000b94:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8000b96:	69f8      	ldr	r0, [r7, #28]
 8000b98:	9003      	str	r0, [sp, #12]
 8000b9a:	9102      	str	r1, [sp, #8]
 8000b9c:	9201      	str	r2, [sp, #4]
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff ff50 	bl	8000a4c <lfs_bd_cmp>
 8000bac:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da01      	bge.n	8000bb8 <lfs_bd_flush+0xc8>
                return res;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	e00a      	b.n	8000bce <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8000bbe:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000bc2:	e004      	b.n	8000bce <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f7ff fde5 	bl	8000796 <lfs_cache_zero>
    }

    return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	0800b798 	.word	0x0800b798
 8000bdc:	0800c0d0 	.word	0x0800c0d0
 8000be0:	0800b770 	.word	0x0800b770
 8000be4:	0800b78c 	.word	0x0800b78c

08000be8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fdbd 	bl	8000778 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000bfe:	78fb      	ldrb	r3, [r7, #3]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	68b9      	ldr	r1, [r7, #8]
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f7ff ff73 	bl	8000af0 <lfs_bd_flush>
 8000c0a:	6178      	str	r0, [r7, #20]
    if (err) {
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <lfs_bd_sync+0x2e>
        return err;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	e011      	b.n	8000c3a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000c20:	4610      	mov	r0, r2
 8000c22:	4798      	blx	r3
 8000c24:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	dd05      	ble.n	8000c38 <lfs_bd_sync+0x50>
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <lfs_bd_sync+0x5c>)
 8000c2e:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <lfs_bd_sync+0x60>)
 8000c30:	21c8      	movs	r1, #200	; 0xc8
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <lfs_bd_sync+0x64>)
 8000c34:	f009 fc10 	bl	800a458 <__assert_func>
    return err;
 8000c38:	697b      	ldr	r3, [r7, #20]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	0800b78c 	.word	0x0800b78c
 8000c48:	0800c0e0 	.word	0x0800c0e0
 8000c4c:	0800b770 	.word	0x0800b770

08000c50 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8000c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c60:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8000c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c64:	f113 0f02 	cmn.w	r3, #2
 8000c68:	d00b      	beq.n	8000c82 <lfs_bd_prog+0x32>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c6e:	6a1b      	ldr	r3, [r3, #32]
 8000c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d305      	bcc.n	8000c82 <lfs_bd_prog+0x32>
 8000c76:	4b47      	ldr	r3, [pc, #284]	; (8000d94 <lfs_bd_prog+0x144>)
 8000c78:	4a47      	ldr	r2, [pc, #284]	; (8000d98 <lfs_bd_prog+0x148>)
 8000c7a:	21d3      	movs	r1, #211	; 0xd3
 8000c7c:	4847      	ldr	r0, [pc, #284]	; (8000d9c <lfs_bd_prog+0x14c>)
 8000c7e:	f009 fbeb 	bl	800a458 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8000c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c86:	441a      	add	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d977      	bls.n	8000d82 <lfs_bd_prog+0x132>
 8000c92:	4b43      	ldr	r3, [pc, #268]	; (8000da0 <lfs_bd_prog+0x150>)
 8000c94:	4a40      	ldr	r2, [pc, #256]	; (8000d98 <lfs_bd_prog+0x148>)
 8000c96:	21d4      	movs	r1, #212	; 0xd4
 8000c98:	4840      	ldr	r0, [pc, #256]	; (8000d9c <lfs_bd_prog+0x14c>)
 8000c9a:	f009 fbdd 	bl	800a458 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d151      	bne.n	8000d4c <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8000cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d34c      	bcc.n	8000d4c <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbc:	4413      	add	r3, r2
                off >= pcache->off &&
 8000cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d243      	bcs.n	8000d4c <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	6859      	ldr	r1, [r3, #4]
 8000cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd0:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000cd8:	f7ff fc98 	bl	800060c <lfs_min>
 8000cdc:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ce8:	1acb      	subs	r3, r1, r3
 8000cea:	4413      	add	r3, r2
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	69f9      	ldr	r1, [r7, #28]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f009 fc2b 	bl	800a54c <memcpy>

            data += diff;
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	4413      	add	r3, r2
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8000d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	6898      	ldr	r0, [r3, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff fc66 	bl	80005ec <lfs_max>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d126      	bne.n	8000d82 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f7ff fed8 	bl	8000af0 <lfs_bd_flush>
 8000d40:	6178      	str	r0, [r7, #20]
                if (err) {
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01c      	beq.n	8000d82 <lfs_bd_prog+0x132>
                    return err;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	e01e      	b.n	8000d8a <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <lfs_bd_prog+0x112>
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <lfs_bd_prog+0x154>)
 8000d58:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <lfs_bd_prog+0x148>)
 8000d5a:	21f1      	movs	r1, #241	; 0xf1
 8000d5c:	480f      	ldr	r0, [pc, #60]	; (8000d9c <lfs_bd_prog+0x14c>)
 8000d5e:	f009 fb7b 	bl	800a458 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d66:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d72:	f7ff fc5b 	bl	800062c <lfs_aligndown>
 8000d76:	4602      	mov	r2, r0
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8000d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d18a      	bne.n	8000c9e <lfs_bd_prog+0x4e>
    }

    return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	0800b7c0 	.word	0x0800b7c0
 8000d98:	0800c0ec 	.word	0x0800c0ec
 8000d9c:	0800b770 	.word	0x0800b770
 8000da0:	0800b7fc 	.word	0x0800b7fc
 8000da4:	0800b820 	.word	0x0800b820

08000da8 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d305      	bcc.n	8000dca <lfs_bd_erase+0x22>
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <lfs_bd_erase+0x54>)
 8000dc0:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <lfs_bd_erase+0x58>)
 8000dc2:	21ff      	movs	r1, #255	; 0xff
 8000dc4:	480f      	ldr	r0, [pc, #60]	; (8000e04 <lfs_bd_erase+0x5c>)
 8000dc6:	f009 fb47 	bl	800a458 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000dd4:	6839      	ldr	r1, [r7, #0]
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	4798      	blx	r3
 8000dda:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	dd06      	ble.n	8000df0 <lfs_bd_erase+0x48>
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <lfs_bd_erase+0x60>)
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <lfs_bd_erase+0x58>)
 8000de6:	f240 1101 	movw	r1, #257	; 0x101
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <lfs_bd_erase+0x5c>)
 8000dec:	f009 fb34 	bl	800a458 <__assert_func>
    return err;
 8000df0:	68fb      	ldr	r3, [r7, #12]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	0800b750 	.word	0x0800b750
 8000e00:	0800c0f8 	.word	0x0800c0f8
 8000e04:	0800b770 	.word	0x0800b770
 8000e08:	0800b78c 	.word	0x0800b78c

08000e0c <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3304      	adds	r3, #4
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	601a      	str	r2, [r3, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e46:	d005      	beq.n	8000e54 <lfs_pair_isnull+0x1e>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e52:	d101      	bne.n	8000e58 <lfs_pair_isnull+0x22>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <lfs_pair_isnull+0x24>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d017      	beq.n	8000eb2 <lfs_pair_cmp+0x46>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3304      	adds	r3, #4
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d00f      	beq.n	8000eb2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d008      	beq.n	8000eb2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d001      	beq.n	8000eb2 <lfs_pair_cmp+0x46>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <lfs_pair_cmp+0x48>
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d107      	bne.n	8000ee6 <lfs_pair_sync+0x26>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	3304      	adds	r3, #4
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d00d      	beq.n	8000f02 <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	3304      	adds	r3, #4
 8000eee:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d108      	bne.n	8000f06 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d101      	bne.n	8000f06 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <lfs_pair_sync+0x48>
 8000f06:	2300      	movs	r3, #0
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8000f1a:	b590      	push	{r4, r7, lr}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fbe0 	bl	80006ec <lfs_fromle32>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3304      	adds	r3, #4
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	1d1c      	adds	r4, r3, #4
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f7ff fbd5 	bl	80006ec <lfs_fromle32>
 8000f42:	4603      	mov	r3, r0
 8000f44:	6023      	str	r3, [r4, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd90      	pop	{r4, r7, pc}

08000f4e <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8000f4e:	b590      	push	{r4, r7, lr}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fbd1 	bl	8000702 <lfs_tole32>
 8000f60:	4602      	mov	r2, r0
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	1d1c      	adds	r4, r3, #4
 8000f70:	4610      	mov	r0, r2
 8000f72:	f7ff fbc6 	bl	8000702 <lfs_tole32>
 8000f76:	4603      	mov	r3, r0
 8000f78:	6023      	str	r3, [r4, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}

08000f82 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	0fdb      	lsrs	r3, r3, #31
 8000f90:	b2db      	uxtb	r3, r3
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	059b      	lsls	r3, r3, #22
 8000faa:	159b      	asrs	r3, r3, #22
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2301      	moveq	r3, #1
 8000fb4:	2300      	movne	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	0d1b      	lsrs	r3, r3, #20
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000fd6:	b29b      	uxth	r3, r3
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	0d1b      	lsrs	r3, r3, #20
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff6:	b29b      	uxth	r3, r3
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	0d1b      	lsrs	r3, r3, #20
 8001010:	b2db      	uxtb	r3, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffec 	bl	8001004 <lfs_tag_chunk>
 800102c:	4603      	mov	r3, r0
 800102e:	b25b      	sxtb	r3, r3
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	0a9b      	lsrs	r3, r3, #10
 8001044:	b29b      	uxth	r3, r3
 8001046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff8f 	bl	8000f9e <lfs_tag_isdelete>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4413      	add	r3, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ffe5 	bl	8001058 <lfs_tag_size>
 800108e:	4603      	mov	r3, r0
 8001090:	3304      	adds	r3, #4
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800109a:	b480      	push	{r7}
 800109c:	b085      	sub	sp, #20
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e012      	b.n	80010d0 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	4403      	add	r3, r0
 80010c6:	404a      	eors	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	dde9      	ble.n	80010aa <lfs_gstate_xor+0x10>
    }
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e00b      	b.n	800110a <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <lfs_gstate_iszero+0x20>
            return false;
 8001100:	2300      	movs	r3, #0
 8001102:	e006      	b.n	8001112 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3301      	adds	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b02      	cmp	r3, #2
 800110e:	ddf0      	ble.n	80010f2 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8001110:	2301      	movs	r3, #1
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff94 	bl	8001058 <lfs_tag_size>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf14      	ite	ne
 8001136:	2301      	movne	r3, #1
 8001138:	2300      	moveq	r3, #0
 800113a:	b2db      	uxtb	r3, r3
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff81 	bl	8001058 <lfs_tag_size>
 8001156:	4603      	mov	r3, r0
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff28 	bl	8000fc4 <lfs_tag_type1>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	bf14      	ite	ne
 800117a:	2301      	movne	r3, #1
 800117c:	2300      	moveq	r3, #0
 800117e:	b2db      	uxtb	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff14 	bl	8000fc4 <lfs_tag_type1>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00a      	beq.n	80011b8 <lfs_gstate_hasmovehere+0x30>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3304      	adds	r3, #4
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fe5f 	bl	8000e6c <lfs_pair_cmp>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <lfs_gstate_hasmovehere+0x30>
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <lfs_gstate_hasmovehere+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fa89 	bl	80006ec <lfs_fromle32>
 80011da:	4602      	mov	r2, r0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fa81 	bl	80006ec <lfs_fromle32>
 80011ea:	4602      	mov	r2, r0
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fa79 	bl	80006ec <lfs_fromle32>
 80011fa:	4602      	mov	r2, r0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	609a      	str	r2, [r3, #8]
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fa74 	bl	8000702 <lfs_tole32>
 800121a:	4602      	mov	r2, r0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fa6c 	bl	8000702 <lfs_tole32>
 800122a:	4602      	mov	r2, r0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fa64 	bl	8000702 <lfs_tole32>
 800123a:	4602      	mov	r2, r0
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fa49 	bl	80006ec <lfs_fromle32>
 800125a:	4602      	mov	r2, r0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fa41 	bl	80006ec <lfs_fromle32>
 800126a:	4602      	mov	r2, r0
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	605a      	str	r2, [r3, #4]
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fa3c 	bl	8000702 <lfs_tole32>
 800128a:	4602      	mov	r2, r0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa34 	bl	8000702 <lfs_tole32>
 800129a:	4602      	mov	r2, r0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	605a      	str	r2, [r3, #4]
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fa19 	bl	80006ec <lfs_fromle32>
 80012ba:	4602      	mov	r2, r0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fa11 	bl	80006ec <lfs_fromle32>
 80012ca:	4602      	mov	r2, r0
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fa09 	bl	80006ec <lfs_fromle32>
 80012da:	4602      	mov	r2, r0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fa01 	bl	80006ec <lfs_fromle32>
 80012ea:	4602      	mov	r2, r0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f9f9 	bl	80006ec <lfs_fromle32>
 80012fa:	4602      	mov	r2, r0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f9f1 	bl	80006ec <lfs_fromle32>
 800130a:	4602      	mov	r2, r0
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	615a      	str	r2, [r3, #20]
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f9ec 	bl	8000702 <lfs_tole32>
 800132a:	4602      	mov	r2, r0
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f9e4 	bl	8000702 <lfs_tole32>
 800133a:	4602      	mov	r2, r0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f9dc 	bl	8000702 <lfs_tole32>
 800134a:	4602      	mov	r2, r0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f9d4 	bl	8000702 <lfs_tole32>
 800135a:	4602      	mov	r2, r0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f9cc 	bl	8000702 <lfs_tole32>
 800136a:	4602      	mov	r2, r0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f9c4 	bl	8000702 <lfs_tole32>
 800137a:	4602      	mov	r2, r0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	615a      	str	r2, [r3, #20]
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e009      	b.n	80013ac <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d101      	bne.n	80013a6 <lfs_mlist_isopen+0x1e>
            return true;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e007      	b.n	80013b6 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f1      	bne.n	8001398 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3328      	adds	r3, #40	; 0x28
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	e00d      	b.n	80013f0 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d105      	bne.n	80013ea <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	601a      	str	r2, [r3, #0]
            break;
 80013e8:	e007      	b.n	80013fa <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1ed      	bne.n	80013d4 <lfs_mlist_remove+0x12>
        }
    }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800142a:	b480      	push	{r7}
 800142c:	b085      	sub	sp, #20
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4413      	add	r3, r2
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800144c:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 800144e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001452:	fb01 f202 	mul.w	r2, r1, r2
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	429a      	cmp	r2, r3
 8001462:	d212      	bcs.n	800148a <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	009a      	lsls	r2, r3, #2
 800146e:	440a      	add	r2, r1
 8001470:	6811      	ldr	r1, [r2, #0]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f002 021f 	and.w	r2, r2, #31
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4403      	add	r3, r0
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014a4:	6a1a      	ldr	r2, [r3, #32]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffe4 	bl	8001498 <lfs_alloc_ack>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 80014e2:	e04f      	b.n	8001584 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e8:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	095b      	lsrs	r3, r3, #5
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d132      	bne.n	8001584 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	4413      	add	r3, r2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800152a:	6a12      	ldr	r2, [r2, #32]
 800152c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001530:	fb01 f202 	mul.w	r2, r1, r2
 8001534:	1a9a      	subs	r2, r3, r2
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800153a:	e009      	b.n	8001550 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	1e5a      	subs	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001558:	429a      	cmp	r2, r3
 800155a:	d011      	beq.n	8001580 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	2101      	movs	r1, #1
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1dd      	bne.n	800153c <lfs_alloc+0x64>
                }

                return 0;
 8001580:	2300      	movs	r3, #0
 8001582:	e050      	b.n	8001626 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	429a      	cmp	r2, r3
 800158e:	d1a9      	bne.n	80014e4 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a0:	4413      	add	r3, r2
 80015a2:	4a23      	ldr	r2, [pc, #140]	; (8001630 <lfs_alloc+0x158>)
 80015a4:	9200      	str	r2, [sp, #0]
 80015a6:	f240 2247 	movw	r2, #583	; 0x247
 80015aa:	4922      	ldr	r1, [pc, #136]	; (8001634 <lfs_alloc+0x15c>)
 80015ac:	4822      	ldr	r0, [pc, #136]	; (8001638 <lfs_alloc+0x160>)
 80015ae:	f009 fbb1 	bl	800ad14 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 80015b2:	f06f 031b 	mvn.w	r3, #27
 80015b6:	e036      	b.n	8001626 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80015c6:	6a12      	ldr	r2, [r2, #32]
 80015c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80015cc:	fb01 f202 	mul.w	r2, r1, r2
 80015d0:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	00da      	lsls	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	4619      	mov	r1, r3
 80015e4:	4610      	mov	r0, r2
 80015e6:	f7ff f811 	bl	800060c <lfs_min>
 80015ea:	4602      	mov	r2, r0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	461a      	mov	r2, r3
 8001602:	2100      	movs	r1, #0
 8001604:	f008 ffb0 	bl	800a568 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8001608:	2301      	movs	r3, #1
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	490b      	ldr	r1, [pc, #44]	; (800163c <lfs_alloc+0x164>)
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f004 fd4e 	bl	80060b0 <lfs_fs_rawtraverse>
 8001614:	60f8      	str	r0, [r7, #12]
        if (err) {
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f43f af62 	beq.w	80014e2 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ff49 	bl	80014b6 <lfs_alloc_drop>
            return err;
 8001624:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	0800b86c 	.word	0x0800b86c
 8001634:	0800b770 	.word	0x0800b770
 8001638:	0800b844 	.word	0x0800b844
 800163c:	0800142b 	.word	0x0800142b

08001640 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b08f      	sub	sp, #60	; 0x3c
 8001644:	af04      	add	r7, sp, #16
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	333c      	adds	r3, #60	; 0x3c
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fd8e 	bl	8001188 <lfs_gstate_hasmovehere>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80b9 	beq.w	80017e6 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fcdf 	bl	8001038 <lfs_tag_id>
 800167a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80b2 	beq.w	80017e6 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fcd6 	bl	8001038 <lfs_tag_id>
 800168c:	4603      	mov	r3, r0
 800168e:	461c      	mov	r4, r3
 8001690:	6838      	ldr	r0, [r7, #0]
 8001692:	f7ff fcd1 	bl	8001038 <lfs_tag_id>
 8001696:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8001698:	429c      	cmp	r4, r3
 800169a:	f200 80a4 	bhi.w	80017e6 <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80016a4:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80016a6:	e09e      	b.n	80017e6 <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fce1 	bl	8001072 <lfs_tag_dsize>
 80016b0:	4602      	mov	r2, r0
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80016bc:	68f9      	ldr	r1, [r7, #12]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2204      	movs	r2, #4
 80016c4:	9203      	str	r2, [sp, #12]
 80016c6:	f107 0210 	add.w	r2, r7, #16
 80016ca:	9202      	str	r2, [sp, #8]
 80016cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ce:	9201      	str	r2, [sp, #4]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2304      	movs	r3, #4
 80016d4:	460a      	mov	r2, r1
 80016d6:	2100      	movs	r1, #0
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f7ff f873 	bl	80007c4 <lfs_bd_read>
 80016de:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <lfs_dir_getslice+0xaa>
            return err;
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	e089      	b.n	80017fe <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff f814 	bl	800071a <lfs_frombe32>
 80016f2:	4602      	mov	r2, r0
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4053      	eors	r3, r2
 80016f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016fc:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fc9a 	bl	8001038 <lfs_tag_id>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d02b      	beq.n	8001762 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800170a:	69f8      	ldr	r0, [r7, #28]
 800170c:	f7ff fc5a 	bl	8000fc4 <lfs_tag_type1>
 8001710:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001716:	d124      	bne.n	8001762 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001718:	69f8      	ldr	r0, [r7, #28]
 800171a:	f7ff fc8d 	bl	8001038 <lfs_tag_id>
 800171e:	4603      	mov	r3, r0
 8001720:	461c      	mov	r4, r3
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fc85 	bl	8001038 <lfs_tag_id>
 800172e:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001730:	429c      	cmp	r4, r3
 8001732:	d816      	bhi.n	8001762 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	1ad2      	subs	r2, r2, r3
 800173a:	4b33      	ldr	r3, [pc, #204]	; (8001808 <lfs_dir_getslice+0x1c8>)
 800173c:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800173e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	429a      	cmp	r2, r3
 800174a:	d102      	bne.n	8001752 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 800174c:	f06f 0301 	mvn.w	r3, #1
 8001750:	e055      	b.n	80017fe <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001752:	69f8      	ldr	r0, [r7, #28]
 8001754:	f7ff fc63 	bl	800101e <lfs_tag_splice>
 8001758:	4603      	mov	r3, r0
 800175a:	029a      	lsls	r2, r3, #10
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	4413      	add	r3, r2
 8001760:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	1ad2      	subs	r2, r2, r3
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	405a      	eors	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d138      	bne.n	80017e6 <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8001774:	69f8      	ldr	r0, [r7, #28]
 8001776:	f7ff fc12 	bl	8000f9e <lfs_tag_isdelete>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8001780:	f06f 0301 	mvn.w	r3, #1
 8001784:	e03b      	b.n	80017fe <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001786:	69f8      	ldr	r0, [r7, #28]
 8001788:	f7ff fc66 	bl	8001058 <lfs_tag_size>
 800178c:	4603      	mov	r3, r0
 800178e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe ff3b 	bl	800060c <lfs_min>
 8001796:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800179e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017a2:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80017a4:	3204      	adds	r2, #4
 80017a6:	6979      	ldr	r1, [r7, #20]
 80017a8:	9103      	str	r1, [sp, #12]
 80017aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017ac:	9102      	str	r1, [sp, #8]
 80017ae:	9201      	str	r2, [sp, #4]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	4602      	mov	r2, r0
 80017b6:	2100      	movs	r1, #0
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7ff f803 	bl	80007c4 <lfs_bd_read>
 80017be:	61b8      	str	r0, [r7, #24]
            if (err) {
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <lfs_dir_getslice+0x18a>
                return err;
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	e019      	b.n	80017fe <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80017ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	18d0      	adds	r0, r2, r3
 80017d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	2100      	movs	r1, #0
 80017da:	f008 fec5 	bl	800a568 <memset>

            return tag + gdiff;
 80017de:	6a3a      	ldr	r2, [r7, #32]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	e00b      	b.n	80017fe <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fc42 	bl	8001072 <lfs_tag_dsize>
 80017ee:	4603      	mov	r3, r0
 80017f0:	3304      	adds	r3, #4
 80017f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f4:	429a      	cmp	r2, r3
 80017f6:	f4bf af57 	bcs.w	80016a8 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 80017fa:	f06f 0301 	mvn.w	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	372c      	adds	r7, #44	; 0x2c
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}
 8001806:	bf00      	nop
 8001808:	000ffc00 	.word	0x000ffc00

0800180c <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af04      	add	r7, sp, #16
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800181a:	6838      	ldr	r0, [r7, #0]
 800181c:	f7ff fc1c 	bl	8001058 <lfs_tag_size>
 8001820:	4603      	mov	r3, r0
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	2300      	movs	r3, #0
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f7ff ff04 	bl	8001640 <lfs_dir_getslice>
 8001838:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001842:	b580      	push	{r7, lr}
 8001844:	b08c      	sub	sp, #48	; 0x30
 8001846:	af04      	add	r7, sp, #16
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001852:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001858:	441a      	add	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	f240 80c0 	bls.w	80019e6 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001866:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800186a:	e0c1      	b.n	80019f0 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800186c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186e:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d03f      	beq.n	80018f6 <lfs_dir_getread+0xb4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f113 0f02 	cmn.w	r3, #2
 800187e:	d13a      	bne.n	80018f6 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800188a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800188c:	429a      	cmp	r2, r3
 800188e:	d232      	bcs.n	80018f6 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001896:	429a      	cmp	r2, r3
 8001898:	d324      	bcc.n	80018e4 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a4:	1acb      	subs	r3, r1, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	69b8      	ldr	r0, [r7, #24]
 80018ac:	f7fe feae 	bl	800060c <lfs_min>
 80018b0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018bc:	1acb      	subs	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4619      	mov	r1, r3
 80018c4:	69f8      	ldr	r0, [r7, #28]
 80018c6:	f008 fe41 	bl	800a54c <memcpy>

                data += diff;
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	4413      	add	r3, r2
 80018d0:	61fb      	str	r3, [r7, #28]
                off += diff;
 80018d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	4413      	add	r3, r2
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80018da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80018e2:	e080      	b.n	80019e6 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	4619      	mov	r1, r3
 80018ee:	69b8      	ldr	r0, [r7, #24]
 80018f0:	f7fe fe8c 	bl	800060c <lfs_min>
 80018f4:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f113 0f02 	cmn.w	r3, #2
 80018fe:	d13a      	bne.n	8001976 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800190a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800190c:	429a      	cmp	r2, r3
 800190e:	d232      	bcs.n	8001976 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001916:	429a      	cmp	r2, r3
 8001918:	d324      	bcc.n	8001964 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6859      	ldr	r1, [r3, #4]
 8001922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001924:	1acb      	subs	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	4619      	mov	r1, r3
 800192a:	69b8      	ldr	r0, [r7, #24]
 800192c:	f7fe fe6e 	bl	800060c <lfs_min>
 8001930:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800193c:	1acb      	subs	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4619      	mov	r1, r3
 8001944:	69f8      	ldr	r0, [r7, #28]
 8001946:	f008 fe01 	bl	800a54c <memcpy>

                data += diff;
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	4413      	add	r3, r2
 8001950:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	4413      	add	r3, r2
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800195a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001962:	e040      	b.n	80019e6 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4619      	mov	r1, r3
 800196e:	69b8      	ldr	r0, [r7, #24]
 8001970:	f7fe fe4c 	bl	800060c <lfs_min>
 8001974:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f06f 0201 	mvn.w	r2, #1
 800197c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	4619      	mov	r1, r3
 8001986:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001988:	f7fe fe50 	bl	800062c <lfs_aligndown>
 800198c:	4602      	mov	r2, r0
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001996:	441a      	add	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	4619      	mov	r1, r3
 80019a0:	4610      	mov	r0, r2
 80019a2:	f7fe fe58 	bl	8000656 <lfs_alignup>
 80019a6:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4610      	mov	r0, r2
 80019b2:	f7fe fe2b 	bl	800060c <lfs_min>
 80019b6:	4602      	mov	r2, r0
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6889      	ldr	r1, [r1, #8]
 80019c8:	9102      	str	r1, [sp, #8]
 80019ca:	9201      	str	r2, [sp, #4]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff fe33 	bl	8001640 <lfs_dir_getslice>
 80019da:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da01      	bge.n	80019e6 <lfs_dir_getread+0x1a4>
            return err;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	e004      	b.n	80019f0 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 80019e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f af3f 	bne.w	800186c <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <lfs_dir_traverse_filter+0x1e>
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <lfs_dir_traverse_filter+0xac>)
 8001a14:	e000      	b.n	8001a18 <lfs_dir_traverse_filter+0x20>
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001a18:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	405a      	eors	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d014      	beq.n	8001a54 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fab5 	bl	8000f9e <lfs_tag_isdelete>
 8001a34:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10c      	bne.n	8001a54 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <lfs_dir_traverse_filter+0xac>)
 8001a3e:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <lfs_dir_traverse_filter+0xb4>)
 8001a46:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001a48:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8001a4c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d104      	bne.n	8001a5e <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
        return true;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e01e      	b.n	8001a9c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001a5e:	68b8      	ldr	r0, [r7, #8]
 8001a60:	f7ff fab0 	bl	8000fc4 <lfs_tag_type1>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6a:	d116      	bne.n	8001a9a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001a6c:	68b8      	ldr	r0, [r7, #8]
 8001a6e:	f7ff fae3 	bl	8001038 <lfs_tag_id>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461c      	mov	r4, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fadc 	bl	8001038 <lfs_tag_id>
 8001a80:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001a82:	429c      	cmp	r4, r3
 8001a84:	d809      	bhi.n	8001a9a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001a86:	68b8      	ldr	r0, [r7, #8]
 8001a88:	f7ff fac9 	bl	800101e <lfs_tag_splice>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	029a      	lsls	r2, r3, #10
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	441a      	add	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	7ffffc00 	.word	0x7ffffc00
 8001aa8:	700ffc00 	.word	0x700ffc00
 8001aac:	000ffc00 	.word	0x000ffc00

08001ab0 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b0c1      	sub	sp, #260	; 0x104
 8001ab4:	af04      	add	r7, sp, #16
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	f7ff fad4 	bl	8001072 <lfs_tag_dsize>
 8001aca:	4602      	mov	r2, r0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	441a      	add	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d237      	bcs.n	8001b48 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8001ad8:	6838      	ldr	r0, [r7, #0]
 8001ada:	f7ff faca 	bl	8001072 <lfs_tag_dsize>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001ae6:	68f9      	ldr	r1, [r7, #12]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2204      	movs	r2, #4
 8001aee:	9203      	str	r2, [sp, #12]
 8001af0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001af4:	9202      	str	r2, [sp, #8]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	9201      	str	r2, [sp, #4]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2304      	movs	r3, #4
 8001afe:	460a      	mov	r2, r1
 8001b00:	2100      	movs	r1, #0
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f7fe fe5e 	bl	80007c4 <lfs_bd_read>
 8001b08:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8001b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <lfs_dir_traverse+0x6a>
                    return err;
 8001b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b18:	e3a6      	b.n	8002268 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fdfc 	bl	800071a <lfs_frombe32>
 8001b22:	4602      	mov	r2, r0
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4053      	eors	r3, r2
 8001b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b2c:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3304      	adds	r3, #4
 8001b38:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8001b3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8001b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	e01b      	b.n	8001b80 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8001b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	dd13      	ble.n	8001b78 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8001b50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8001b58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8001b62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b66:	3308      	adds	r3, #8
 8001b68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8001b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b70:	3b01      	subs	r3, #1
 8001b72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b76:	e003      	b.n	8001b80 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8001b7e:	e2a2      	b.n	80020c6 <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8001b80:	4b7e      	ldr	r3, [pc, #504]	; (8001d7c <lfs_dir_traverse+0x2cc>)
 8001b82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8001b86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b8c:	405a      	eors	r2, r3
 8001b8e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001b92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b96:	400b      	ands	r3, r1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 8285 	bne.w	80020aa <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8001ba0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001ba4:	f7ff fa48 	bl	8001038 <lfs_tag_id>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80f0 	beq.w	8001d90 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8001bb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d906      	bls.n	8001bc6 <lfs_dir_traverse+0x116>
 8001bb8:	4b71      	ldr	r3, [pc, #452]	; (8001d80 <lfs_dir_traverse+0x2d0>)
 8001bba:	4a72      	ldr	r2, [pc, #456]	; (8001d84 <lfs_dir_traverse+0x2d4>)
 8001bbc:	f240 314e 	movw	r1, #846	; 0x34e
 8001bc0:	4871      	ldr	r0, [pc, #452]	; (8001d88 <lfs_dir_traverse+0x2d8>)
 8001bc2:	f008 fc49 	bl	800a458 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8001bc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bc8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001bcc:	4613      	mov	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	33f0      	adds	r3, #240	; 0xf0
 8001bd6:	443b      	add	r3, r7
 8001bd8:	3b98      	subs	r3, #152	; 0x98
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001be2:	4613      	mov	r3, r2
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	33f0      	adds	r3, #240	; 0xf0
 8001bec:	443b      	add	r3, r7
 8001bee:	3b94      	subs	r3, #148	; 0x94
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	33f0      	adds	r3, #240	; 0xf0
 8001c02:	443b      	add	r3, r7
 8001c04:	3b90      	subs	r3, #144	; 0x90
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c0e:	4613      	mov	r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	33f0      	adds	r3, #240	; 0xf0
 8001c18:	443b      	add	r3, r7
 8001c1a:	3b8c      	subs	r3, #140	; 0x8c
 8001c1c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c26:	4613      	mov	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	33f0      	adds	r3, #240	; 0xf0
 8001c30:	443b      	add	r3, r7
 8001c32:	3b88      	subs	r3, #136	; 0x88
 8001c34:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c3e:	4613      	mov	r3, r2
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	33f0      	adds	r3, #240	; 0xf0
 8001c48:	443b      	add	r3, r7
 8001c4a:	3b84      	subs	r3, #132	; 0x84
 8001c4c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	33f0      	adds	r3, #240	; 0xf0
 8001c60:	443b      	add	r3, r7
 8001c62:	3b80      	subs	r3, #128	; 0x80
 8001c64:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c6e:	4613      	mov	r3, r2
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	33f0      	adds	r3, #240	; 0xf0
 8001c78:	443b      	add	r3, r7
 8001c7a:	3b7c      	subs	r3, #124	; 0x7c
 8001c7c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8001c80:	801a      	strh	r2, [r3, #0]
 8001c82:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c86:	4613      	mov	r3, r2
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	33f0      	adds	r3, #240	; 0xf0
 8001c90:	443b      	add	r3, r7
 8001c92:	3b7a      	subs	r3, #122	; 0x7a
 8001c94:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	33f0      	adds	r3, #240	; 0xf0
 8001ca8:	443b      	add	r3, r7
 8001caa:	3b78      	subs	r3, #120	; 0x78
 8001cac:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8001cb0:	801a      	strh	r2, [r3, #0]
 8001cb2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	33f0      	adds	r3, #240	; 0xf0
 8001cc0:	443b      	add	r3, r7
 8001cc2:	3b74      	subs	r3, #116	; 0x74
 8001cc4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001cce:	4613      	mov	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	33f0      	adds	r3, #240	; 0xf0
 8001cd8:	443b      	add	r3, r7
 8001cda:	3b70      	subs	r3, #112	; 0x70
 8001cdc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	33f0      	adds	r3, #240	; 0xf0
 8001cf0:	443b      	add	r3, r7
 8001cf2:	3b6c      	subs	r3, #108	; 0x6c
 8001cf4:	6019      	str	r1, [r3, #0]
 8001cf6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	33f0      	adds	r3, #240	; 0xf0
 8001d04:	443b      	add	r3, r7
 8001d06:	3b68      	subs	r3, #104	; 0x68
 8001d08:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d12:	4613      	mov	r3, r2
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	33f0      	adds	r3, #240	; 0xf0
 8001d1c:	443b      	add	r3, r7
 8001d1e:	3b68      	subs	r3, #104	; 0x68
 8001d20:	3304      	adds	r3, #4
 8001d22:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001d26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d2a:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8001d2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d32:	3301      	adds	r3, #1
 8001d34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                dir = dir;
                off = off;
                ptag = ptag;
                attrs = attrs;
                attrcount = attrcount;
                tmask = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <lfs_dir_traverse+0x2dc>)
 8001d58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8001d5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	3328      	adds	r3, #40	; 0x28
 8001d70:	440b      	add	r3, r1
 8001d72:	3304      	adds	r3, #4
 8001d74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d78:	e6a4      	b.n	8001ac4 <lfs_dir_traverse+0x14>
 8001d7a:	bf00      	nop
 8001d7c:	7ff00000 	.word	0x7ff00000
 8001d80:	0800b870 	.word	0x0800b870
 8001d84:	0800c108 	.word	0x0800c108
 8001d88:	0800b770 	.word	0x0800b770
 8001d8c:	080019f9 	.word	0x080019f9
                continue;
            }
        }

popped:
 8001d90:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8001d92:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001d96:	f7ff f94f 	bl	8001038 <lfs_tag_id>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d015      	beq.n	8001dcc <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f948 	bl	8001038 <lfs_tag_id>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8001dac:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8001db0:	4293      	cmp	r3, r2
 8001db2:	f200 817c 	bhi.w	80020ae <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f93d 	bl	8001038 <lfs_tag_id>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	f240 8171 	bls.w	80020ae <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f908 	bl	8000fe4 <lfs_tag_type3>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f43f ae74 	beq.w	8001ac4 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f900 	bl	8000fe4 <lfs_tag_type3>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	f240 1301 	movw	r3, #257	; 0x101
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f040 80e0 	bne.w	8001fb2 <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8001df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001df6:	4ab1      	ldr	r2, [pc, #708]	; (80020bc <lfs_dir_traverse+0x60c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	f000 815a 	beq.w	80020b2 <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8001dfe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e02:	4613      	mov	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	33f0      	adds	r3, #240	; 0xf0
 8001e0c:	443b      	add	r3, r7
 8001e0e:	3b98      	subs	r3, #152	; 0x98
 8001e10:	4618      	mov	r0, r3
 8001e12:	233c      	movs	r3, #60	; 0x3c
 8001e14:	461a      	mov	r2, r3
 8001e16:	2100      	movs	r1, #0
 8001e18:	f008 fba6 	bl	800a568 <memset>
 8001e1c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e20:	4613      	mov	r3, r2
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	33f0      	adds	r3, #240	; 0xf0
 8001e2a:	443b      	add	r3, r7
 8001e2c:	3b98      	subs	r3, #152	; 0x98
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e36:	4613      	mov	r3, r2
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	33f0      	adds	r3, #240	; 0xf0
 8001e40:	443b      	add	r3, r7
 8001e42:	3b94      	subs	r3, #148	; 0x94
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	33f0      	adds	r3, #240	; 0xf0
 8001e56:	443b      	add	r3, r7
 8001e58:	3b90      	subs	r3, #144	; 0x90
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e62:	4613      	mov	r3, r2
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	33f0      	adds	r3, #240	; 0xf0
 8001e6c:	443b      	add	r3, r7
 8001e6e:	3b8c      	subs	r3, #140	; 0x8c
 8001e70:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	33f0      	adds	r3, #240	; 0xf0
 8001e84:	443b      	add	r3, r7
 8001e86:	3b88      	subs	r3, #136	; 0x88
 8001e88:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e92:	4613      	mov	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	33f0      	adds	r3, #240	; 0xf0
 8001e9c:	443b      	add	r3, r7
 8001e9e:	3b84      	subs	r3, #132	; 0x84
 8001ea0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001eaa:	4613      	mov	r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	33f0      	adds	r3, #240	; 0xf0
 8001eb4:	443b      	add	r3, r7
 8001eb6:	3b80      	subs	r3, #128	; 0x80
 8001eb8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	33f0      	adds	r3, #240	; 0xf0
 8001ecc:	443b      	add	r3, r7
 8001ece:	3b7c      	subs	r3, #124	; 0x7c
 8001ed0:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001eda:	4613      	mov	r3, r2
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	33f0      	adds	r3, #240	; 0xf0
 8001ee4:	443b      	add	r3, r7
 8001ee6:	3b7a      	subs	r3, #122	; 0x7a
 8001ee8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001eec:	801a      	strh	r2, [r3, #0]
 8001eee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	33f0      	adds	r3, #240	; 0xf0
 8001efc:	443b      	add	r3, r7
 8001efe:	3b78      	subs	r3, #120	; 0x78
 8001f00:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8001f04:	801a      	strh	r2, [r3, #0]
 8001f06:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	33f0      	adds	r3, #240	; 0xf0
 8001f14:	443b      	add	r3, r7
 8001f16:	3b74      	subs	r3, #116	; 0x74
 8001f18:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f22:	4613      	mov	r3, r2
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	33f0      	adds	r3, #240	; 0xf0
 8001f2c:	443b      	add	r3, r7
 8001f2e:	3b70      	subs	r3, #112	; 0x70
 8001f30:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001f34:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8001f36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8001f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f888 	bl	8001058 <lfs_tag_size>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f871 	bl	8001038 <lfs_tag_id>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8001f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f60:	60bb      	str	r3, [r7, #8]
            off = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8001f78:	4b51      	ldr	r3, [pc, #324]	; (80020c0 <lfs_dir_traverse+0x610>)
 8001f7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8001f7e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8001f86:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001f8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8001f8e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001f92:	3301      	adds	r3, #1
 8001f94:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8001f98:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8001f9c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8001fa8:	4413      	add	r3, r2
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8001fb0:	e588      	b.n	8001ac4 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8001fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f815 	bl	8000fe4 <lfs_tag_type3>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001fc0:	d159      	bne.n	8002076 <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fc8:	e04b      	b.n	8002062 <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8001fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8001fd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fe4:	4413      	add	r3, r2
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001fec:	051c      	lsls	r4, r3, #20
 8001fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f821 	bl	8001038 <lfs_tag_id>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8001ffe:	4413      	add	r3, r2
 8002000:	029b      	lsls	r3, r3, #10
 8002002:	ea44 0103 	orr.w	r1, r4, r3
 8002006:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	461a      	mov	r2, r3
 8002014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002018:	4413      	add	r3, r2
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800201e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	461a      	mov	r2, r3
 800202c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002030:	4413      	add	r3, r2
 8002032:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002034:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002038:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800203c:	4798      	blx	r3
 800203e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8002042:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002046:	2b00      	cmp	r3, #0
 8002048:	da02      	bge.n	8002050 <lfs_dir_traverse+0x5a0>
                    return res;
 800204a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800204e:	e10b      	b.n	8002268 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8002050:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d12e      	bne.n	80020b6 <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800205c:	3301      	adds	r3, #1
 800205e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fff7 	bl	8001058 <lfs_tag_size>
 800206a:	4602      	mov	r2, r0
 800206c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002070:	4293      	cmp	r3, r2
 8002072:	d3aa      	bcc.n	8001fca <lfs_dir_traverse+0x51a>
 8002074:	e526      	b.n	8001ac4 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8002076:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800207a:	029a      	lsls	r2, r3, #10
 800207c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207e:	18d1      	adds	r1, r2, r3
 8002080:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002084:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002088:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800208c:	4798      	blx	r3
 800208e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8002092:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002096:	2b00      	cmp	r3, #0
 8002098:	da02      	bge.n	80020a0 <lfs_dir_traverse+0x5f0>
                return res;
 800209a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800209e:	e0e3      	b.n	8002268 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 80020a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10d      	bne.n	80020c4 <lfs_dir_traverse+0x614>
 80020a8:	e50c      	b.n	8001ac4 <lfs_dir_traverse+0x14>
                continue;
 80020aa:	bf00      	nop
 80020ac:	e50a      	b.n	8001ac4 <lfs_dir_traverse+0x14>
            continue;
 80020ae:	bf00      	nop
 80020b0:	e508      	b.n	8001ac4 <lfs_dir_traverse+0x14>
                continue;
 80020b2:	bf00      	nop
 80020b4:	e506      	b.n	8001ac4 <lfs_dir_traverse+0x14>
                    break;
 80020b6:	bf00      	nop
        {
 80020b8:	e504      	b.n	8001ac4 <lfs_dir_traverse+0x14>
 80020ba:	bf00      	nop
 80020bc:	080019f9 	.word	0x080019f9
 80020c0:	600ffc00 	.word	0x600ffc00
                break;
 80020c4:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80020c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80ca 	beq.w	8002264 <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80020d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80020d4:	1e5a      	subs	r2, r3, #1
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	33f0      	adds	r3, #240	; 0xf0
 80020e0:	443b      	add	r3, r7
 80020e2:	3b98      	subs	r3, #152	; 0x98
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80020e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80020ec:	1e5a      	subs	r2, r3, #1
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	33f0      	adds	r3, #240	; 0xf0
 80020f8:	443b      	add	r3, r7
 80020fa:	3b94      	subs	r3, #148	; 0x94
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8002100:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002104:	1e5a      	subs	r2, r3, #1
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	33f0      	adds	r3, #240	; 0xf0
 8002110:	443b      	add	r3, r7
 8002112:	3b90      	subs	r3, #144	; 0x90
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8002118:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	33f0      	adds	r3, #240	; 0xf0
 8002128:	443b      	add	r3, r7
 800212a:	3b8c      	subs	r3, #140	; 0x8c
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8002132:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	4613      	mov	r3, r2
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	33f0      	adds	r3, #240	; 0xf0
 8002142:	443b      	add	r3, r7
 8002144:	3b88      	subs	r3, #136	; 0x88
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 800214c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002150:	1e5a      	subs	r2, r3, #1
 8002152:	4613      	mov	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	33f0      	adds	r3, #240	; 0xf0
 800215c:	443b      	add	r3, r7
 800215e:	3b84      	subs	r3, #132	; 0x84
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8002166:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800216a:	1e5a      	subs	r2, r3, #1
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	33f0      	adds	r3, #240	; 0xf0
 8002176:	443b      	add	r3, r7
 8002178:	3b80      	subs	r3, #128	; 0x80
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8002180:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002184:	1e5a      	subs	r2, r3, #1
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	33f0      	adds	r3, #240	; 0xf0
 8002190:	443b      	add	r3, r7
 8002192:	3b7c      	subs	r3, #124	; 0x7c
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800219a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800219e:	1e5a      	subs	r2, r3, #1
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	33f0      	adds	r3, #240	; 0xf0
 80021aa:	443b      	add	r3, r7
 80021ac:	3b7a      	subs	r3, #122	; 0x7a
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 80021b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80021b8:	1e5a      	subs	r2, r3, #1
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	33f0      	adds	r3, #240	; 0xf0
 80021c4:	443b      	add	r3, r7
 80021c6:	3b78      	subs	r3, #120	; 0x78
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 80021ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80021d2:	1e5a      	subs	r2, r3, #1
 80021d4:	4613      	mov	r3, r2
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	33f0      	adds	r3, #240	; 0xf0
 80021de:	443b      	add	r3, r7
 80021e0:	3b74      	subs	r3, #116	; 0x74
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 80021e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	33f0      	adds	r3, #240	; 0xf0
 80021f8:	443b      	add	r3, r7
 80021fa:	3b70      	subs	r3, #112	; 0x70
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 8002202:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002206:	1e5a      	subs	r2, r3, #1
 8002208:	4613      	mov	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	33f0      	adds	r3, #240	; 0xf0
 8002212:	443b      	add	r3, r7
 8002214:	3b6c      	subs	r3, #108	; 0x6c
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 800221a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800221e:	1e5a      	subs	r2, r3, #1
 8002220:	4613      	mov	r3, r2
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	33f0      	adds	r3, #240	; 0xf0
 800222a:	443b      	add	r3, r7
 800222c:	3b68      	subs	r3, #104	; 0x68
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8002234:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002238:	1e5a      	subs	r2, r3, #1
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	33f0      	adds	r3, #240	; 0xf0
 8002244:	443b      	add	r3, r7
 8002246:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 800224a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800224e:	3204      	adds	r2, #4
 8002250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002254:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8002258:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800225c:	3b01      	subs	r3, #1
 800225e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8002262:	e596      	b.n	8001d92 <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 8002264:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8002268:	4618      	mov	r0, r3
 800226a:	37f4      	adds	r7, #244	; 0xf4
 800226c:	46bd      	mov	sp, r7
 800226e:	bd90      	pop	{r4, r7, pc}

08002270 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b09f      	sub	sp, #124	; 0x7c
 8002274:	af04      	add	r7, sp, #16
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	429a      	cmp	r2, r3
 8002290:	d207      	bcs.n	80022a2 <lfs_dir_fetchmatch+0x32>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 80022a2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80022a6:	e340      	b.n	800292a <lfs_dir_fetchmatch+0x6ba>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80022a8:	2300      	movs	r3, #0
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
 80022ac:	2300      	movs	r3, #0
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022b8:	e052      	b.n	8002360 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 80022ba:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80022bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 80022c4:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80022c6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80022ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 80022d0:	2104      	movs	r1, #4
 80022d2:	9103      	str	r1, [sp, #12]
 80022d4:	9202      	str	r2, [sp, #8]
 80022d6:	2200      	movs	r2, #0
 80022d8:	9201      	str	r2, [sp, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2304      	movs	r3, #4
 80022de:	4602      	mov	r2, r0
 80022e0:	2100      	movs	r1, #0
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7fe fa6e 	bl	80007c4 <lfs_bd_read>
 80022e8:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 80022ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	3368      	adds	r3, #104	; 0x68
 80022f0:	443b      	add	r3, r7
 80022f2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f9f8 	bl	80006ec <lfs_fromle32>
 80022fc:	4602      	mov	r2, r0
 80022fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	3368      	adds	r3, #104	; 0x68
 8002304:	443b      	add	r3, r7
 8002306:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <lfs_dir_fetchmatch+0xac>
 8002310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002312:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002316:	d001      	beq.n	800231c <lfs_dir_fetchmatch+0xac>
            return err;
 8002318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231a:	e306      	b.n	800292a <lfs_dir_fetchmatch+0x6ba>
        }

        if (err != LFS_ERR_CORRUPT &&
 800231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002322:	d01a      	beq.n	800235a <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	3368      	adds	r3, #104	; 0x68
 800232a:	443b      	add	r3, r7
 800232c:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002332:	3301      	adds	r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	bfb8      	it	lt
 800233c:	425b      	neglt	r3, r3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3368      	adds	r3, #104	; 0x68
 8002342:	443b      	add	r3, r7
 8002344:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f7fe f9c0 	bl	80006d0 <lfs_scmp>
 8002350:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8002352:	2b00      	cmp	r3, #0
 8002354:	dd01      	ble.n	800235a <lfs_dir_fetchmatch+0xea>
            r = i;
 8002356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002358:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800235a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235c:	3301      	adds	r3, #1
 800235e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002362:	2b01      	cmp	r3, #1
 8002364:	dda9      	ble.n	80022ba <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002368:	2b00      	cmp	r3, #0
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	bfb8      	it	lt
 8002370:	425b      	neglt	r3, r3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800237e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002380:	3301      	adds	r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	bfb8      	it	lt
 800238a:	425b      	neglt	r3, r3
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800239a:	2b00      	cmp	r3, #0
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	bfb8      	it	lt
 80023a2:	425b      	neglt	r3, r3
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	3368      	adds	r3, #104	; 0x68
 80023a8:	443b      	add	r3, r7
 80023aa:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 80023b8:	2300      	movs	r3, #0
 80023ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80023bc:	e2a1      	b.n	8002902 <lfs_dir_fetchmatch+0x692>
        lfs_off_t off = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80023ce:	4a96      	ldr	r2, [pc, #600]	; (8002628 <lfs_dir_fetchmatch+0x3b8>)
 80023d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023d8:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 80023e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023e4:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f989 	bl	8000702 <lfs_tole32>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3308      	adds	r3, #8
 80023fa:	2204      	movs	r2, #4
 80023fc:	4619      	mov	r1, r3
 80023fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002402:	f004 fc37 	bl	8006c74 <lfs_crc>
 8002406:	4603      	mov	r3, r0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f96c 	bl	80006ec <lfs_fromle32>
 8002414:	4602      	mov	r2, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800241a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800241c:	f7fe fe29 	bl	8001072 <lfs_tag_dsize>
 8002420:	4602      	mov	r2, r0
 8002422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002424:	4413      	add	r3, r2
 8002426:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8002428:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800242e:	69d8      	ldr	r0, [r3, #28]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2204      	movs	r2, #4
 8002436:	9203      	str	r2, [sp, #12]
 8002438:	f107 0220 	add.w	r2, r7, #32
 800243c:	9202      	str	r2, [sp, #8]
 800243e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002440:	9201      	str	r2, [sp, #4]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4603      	mov	r3, r0
 8002446:	460a      	mov	r2, r1
 8002448:	2100      	movs	r1, #0
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f7fe f9ba 	bl	80007c4 <lfs_bd_read>
 8002450:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8002452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 8002458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800245a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800245e:	d103      	bne.n	8002468 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	759a      	strb	r2, [r3, #22]
                    break;
 8002466:	e1d4      	b.n	8002812 <lfs_dir_fetchmatch+0x5a2>
                }
                return err;
 8002468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246a:	e25e      	b.n	800292a <lfs_dir_fetchmatch+0x6ba>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	f107 0120 	add.w	r1, r7, #32
 8002472:	2204      	movs	r2, #4
 8002474:	4618      	mov	r0, r3
 8002476:	f004 fbfd 	bl	8006c74 <lfs_crc>
 800247a:	4603      	mov	r3, r0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe f94a 	bl	800071a <lfs_frombe32>
 8002486:	4602      	mov	r2, r0
 8002488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800248a:	4053      	eors	r3, r2
 800248c:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fd76 	bl	8000f82 <lfs_tag_isvalid>
 8002496:	4603      	mov	r3, r0
 8002498:	f083 0301 	eor.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01b      	beq.n	80024da <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 80024a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80024a4:	f7fe fd8e 	bl	8000fc4 <lfs_tag_type1>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80024ae:	d10d      	bne.n	80024cc <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024b8:	6992      	ldr	r2, [r2, #24]
 80024ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80024be:	fb01 f202 	mul.w	r2, r1, r2
 80024c2:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <lfs_dir_fetchmatch+0x25c>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <lfs_dir_fetchmatch+0x25e>
 80024cc:	2300      	movs	r3, #0
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	759a      	strb	r2, [r3, #22]
                break;
 80024d8:	e19b      	b.n	8002812 <lfs_dir_fetchmatch+0x5a2>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fdc8 	bl	8001072 <lfs_tag_dsize>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	441a      	add	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d903      	bls.n	80024fa <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2200      	movs	r2, #0
 80024f6:	759a      	strb	r2, [r3, #22]
                break;
 80024f8:	e18b      	b.n	8002812 <lfs_dir_fetchmatch+0x5a2>
            }

            ptag = tag;
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fd5f 	bl	8000fc4 <lfs_tag_type1>
 8002506:	4603      	mov	r3, r0
 8002508:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800250c:	d164      	bne.n	80025d8 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800250e:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002514:	69dc      	ldr	r4, [r3, #28]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800251c:	3204      	adds	r2, #4
 800251e:	2104      	movs	r1, #4
 8002520:	9103      	str	r1, [sp, #12]
 8002522:	f107 011c 	add.w	r1, r7, #28
 8002526:	9102      	str	r1, [sp, #8]
 8002528:	9201      	str	r2, [sp, #4]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4623      	mov	r3, r4
 800252e:	4602      	mov	r2, r0
 8002530:	2100      	movs	r1, #0
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7fe f946 	bl	80007c4 <lfs_bd_read>
 8002538:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800253a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 8002540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002542:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002546:	d103      	bne.n	8002550 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2200      	movs	r2, #0
 800254c:	759a      	strb	r2, [r3, #22]
                        break;
 800254e:	e160      	b.n	8002812 <lfs_dir_fetchmatch+0x5a2>
                    }
                    return err;
 8002550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8002552:	e1ea      	b.n	800292a <lfs_dir_fetchmatch+0x6ba>
                }
                dcrc = lfs_fromle32(dcrc);
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe f8c8 	bl	80006ec <lfs_fromle32>
 800255c:	4603      	mov	r3, r0
 800255e:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 8002560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	429a      	cmp	r2, r3
 8002566:	d003      	beq.n	8002570 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2200      	movs	r2, #0
 800256c:	759a      	strb	r2, [r3, #22]
                    break;
 800256e:	e150      	b.n	8002812 <lfs_dir_fetchmatch+0x5a2>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fd46 	bl	8001004 <lfs_tag_chunk>
 8002578:	4603      	mov	r3, r0
 800257a:	07db      	lsls	r3, r3, #31
 800257c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800257e:	4053      	eors	r3, r2
 8002580:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800258a:	2204      	movs	r2, #4
 800258c:	4618      	mov	r0, r3
 800258e:	f004 fb71 	bl	8006c74 <lfs_crc>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800259a:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fd67 	bl	8001072 <lfs_tag_dsize>
 80025a4:	4602      	mov	r2, r0
 80025a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a8:	441a      	add	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025b2:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80025ba:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80025bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80025c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80025ce:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	e720      	b.n	800241a <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80025d8:	2304      	movs	r3, #4
 80025da:	647b      	str	r3, [r7, #68]	; 0x44
 80025dc:	e032      	b.n	8002644 <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 80025de:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80025e4:	69dc      	ldr	r4, [r3, #28]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025ee:	440a      	add	r2, r1
 80025f0:	2101      	movs	r1, #1
 80025f2:	9103      	str	r1, [sp, #12]
 80025f4:	f107 011b 	add.w	r1, r7, #27
 80025f8:	9102      	str	r1, [sp, #8]
 80025fa:	9201      	str	r2, [sp, #4]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	4623      	mov	r3, r4
 8002600:	4602      	mov	r2, r0
 8002602:	2100      	movs	r1, #0
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7fe f8dd 	bl	80007c4 <lfs_bd_read>
 800260a:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800260c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 8002612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002614:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002618:	d103      	bne.n	8002622 <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2200      	movs	r2, #0
 800261e:	759a      	strb	r2, [r3, #22]
 8002620:	e018      	b.n	8002654 <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 8002622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8002624:	e181      	b.n	800292a <lfs_dir_fetchmatch+0x6ba>
 8002626:	bf00      	nop
 8002628:	0800b8b0 	.word	0x0800b8b0
                }

                crc = lfs_crc(crc, &dat, 1);
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	f107 011b 	add.w	r1, r7, #27
 8002632:	2201      	movs	r2, #1
 8002634:	4618      	mov	r0, r3
 8002636:	f004 fb1d 	bl	8006c74 <lfs_crc>
 800263a:	4603      	mov	r3, r0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800263e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002640:	3301      	adds	r3, #1
 8002642:	647b      	str	r3, [r7, #68]	; 0x44
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fd13 	bl	8001072 <lfs_tag_dsize>
 800264c:	4602      	mov	r2, r0
 800264e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002650:	4293      	cmp	r3, r2
 8002652:	d3c4      	bcc.n	80025de <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fcb4 	bl	8000fc4 <lfs_tag_type1>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d113      	bne.n	800268a <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe fce7 	bl	8001038 <lfs_tag_id>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002672:	4293      	cmp	r3, r2
 8002674:	f200 8081 	bhi.w	800277a <lfs_dir_fetchmatch+0x50a>
                    tempcount = lfs_tag_id(tag) + 1;
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fcdc 	bl	8001038 <lfs_tag_id>
 8002680:	4603      	mov	r3, r0
 8002682:	3301      	adds	r3, #1
 8002684:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002688:	e077      	b.n	800277a <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fc99 	bl	8000fc4 <lfs_tag_type1>
 8002692:	4603      	mov	r3, r0
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002698:	d134      	bne.n	8002704 <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fcbe 	bl	800101e <lfs_tag_splice>
 80026a2:	4603      	mov	r3, r0
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026aa:	4413      	add	r3, r2
 80026ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80026b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026b2:	4ba0      	ldr	r3, [pc, #640]	; (8002934 <lfs_dir_fetchmatch+0x6c4>)
 80026b4:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80026b6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80026ba:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80026be:	6a3a      	ldr	r2, [r7, #32]
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d104      	bne.n	80026ce <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 80026c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80026cc:	e055      	b.n	800277a <lfs_dir_fetchmatch+0x50a>
                } else if (tempbesttag != -1 &&
 80026ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d051      	beq.n	800277a <lfs_dir_fetchmatch+0x50a>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fcad 	bl	8001038 <lfs_tag_id>
 80026de:	4603      	mov	r3, r0
 80026e0:	461c      	mov	r4, r3
 80026e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fca7 	bl	8001038 <lfs_tag_id>
 80026ea:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80026ec:	429c      	cmp	r4, r3
 80026ee:	d844      	bhi.n	800277a <lfs_dir_fetchmatch+0x50a>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fc93 	bl	800101e <lfs_tag_splice>
 80026f8:	4603      	mov	r3, r0
 80026fa:	029a      	lsls	r2, r3, #10
 80026fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fe:	4413      	add	r3, r2
 8002700:	64bb      	str	r3, [r7, #72]	; 0x48
 8002702:	e03a      	b.n	800277a <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fc5c 	bl	8000fc4 <lfs_tag_type1>
 800270c:	4603      	mov	r3, r0
 800270e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002712:	d132      	bne.n	800277a <lfs_dir_fetchmatch+0x50a>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fc74 	bl	8001004 <lfs_tag_chunk>
 800271c:	4603      	mov	r3, r0
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	bf14      	ite	ne
 8002726:	2301      	movne	r3, #1
 8002728:	2300      	moveq	r3, #0
 800272a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800272e:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002734:	69dc      	ldr	r4, [r3, #28]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800273c:	3204      	adds	r2, #4
 800273e:	2108      	movs	r1, #8
 8002740:	9103      	str	r1, [sp, #12]
 8002742:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002746:	9102      	str	r1, [sp, #8]
 8002748:	9201      	str	r2, [sp, #4]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4623      	mov	r3, r4
 800274e:	4602      	mov	r2, r0
 8002750:	2100      	movs	r1, #0
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7fe f836 	bl	80007c4 <lfs_bd_read>
 8002758:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800275a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <lfs_dir_fetchmatch+0x500>
                    if (err == LFS_ERR_CORRUPT) {
 8002760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002762:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002766:	d103      	bne.n	8002770 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	759a      	strb	r2, [r3, #22]
                        break;
 800276e:	e050      	b.n	8002812 <lfs_dir_fetchmatch+0x5a2>
                    }
                }
                lfs_pair_fromle32(temptail);
 8002770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fbd0 	bl	8000f1a <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800277a:	6a3a      	ldr	r2, [r7, #32]
 800277c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800277e:	405a      	eors	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	f47f ae48 	bne.w	800241a <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800278a:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002790:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8002792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002794:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	f107 0210 	add.w	r2, r7, #16
 800279c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027a0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80027a4:	4798      	blx	r3
 80027a6:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 80027a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da09      	bge.n	80027c2 <lfs_dir_fetchmatch+0x552>
                    if (res == LFS_ERR_CORRUPT) {
 80027ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80027b4:	d103      	bne.n	80027be <lfs_dir_fetchmatch+0x54e>
                        dir->erased = false;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2200      	movs	r2, #0
 80027ba:	759a      	strb	r2, [r3, #22]
 80027bc:	e029      	b.n	8002812 <lfs_dir_fetchmatch+0x5a2>
                        break;
                    }
                    return res;
 80027be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 80027c0:	e0b3      	b.n	800292a <lfs_dir_fetchmatch+0x6ba>
                }

                if (res == LFS_CMP_EQ) {
 80027c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <lfs_dir_fetchmatch+0x55e>
                    // found a match
                    tempbesttag = tag;
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80027cc:	e625      	b.n	800241a <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80027ce:	6a3a      	ldr	r2, [r7, #32]
 80027d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d2:	405a      	eors	r2, r3
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <lfs_dir_fetchmatch+0x6c8>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d103      	bne.n	80027e4 <lfs_dir_fetchmatch+0x574>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 80027dc:	f04f 33ff 	mov.w	r3, #4294967295
 80027e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80027e2:	e61a      	b.n	800241a <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 80027e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	f47f ae17 	bne.w	800241a <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fc22 	bl	8001038 <lfs_tag_id>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461c      	mov	r4, r3
 80027f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fc1c 	bl	8001038 <lfs_tag_id>
 8002800:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002802:	429c      	cmp	r4, r3
 8002804:	f63f ae09 	bhi.w	800241a <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800280e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002810:	e603      	b.n	800241a <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d100      	bne.n	800281c <lfs_dir_fetchmatch+0x5ac>
 800281a:	e05d      	b.n	80028d8 <lfs_dir_fetchmatch+0x668>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	333c      	adds	r3, #60	; 0x3c
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fcaf 	bl	8001188 <lfs_gstate_hasmovehere>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d028      	beq.n	8002882 <lfs_dir_fetchmatch+0x612>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fbff 	bl	8001038 <lfs_tag_id>
 800283a:	4603      	mov	r3, r0
 800283c:	461c      	mov	r4, r3
 800283e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fbf9 	bl	8001038 <lfs_tag_id>
 8002846:	4603      	mov	r3, r0
 8002848:	429c      	cmp	r4, r3
 800284a:	d104      	bne.n	8002856 <lfs_dir_fetchmatch+0x5e6>
                    besttag |= 0x80000000;
 800284c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800284e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002852:	667b      	str	r3, [r7, #100]	; 0x64
 8002854:	e015      	b.n	8002882 <lfs_dir_fetchmatch+0x612>
                } else if (besttag != -1 &&
 8002856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d011      	beq.n	8002882 <lfs_dir_fetchmatch+0x612>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fbe8 	bl	8001038 <lfs_tag_id>
 8002868:	4603      	mov	r3, r0
 800286a:	461c      	mov	r4, r3
 800286c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fbe2 	bl	8001038 <lfs_tag_id>
 8002874:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8002876:	429c      	cmp	r4, r3
 8002878:	d203      	bcs.n	8002882 <lfs_dir_fetchmatch+0x612>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800287a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800287c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002880:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8002882:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00f      	beq.n	80028a8 <lfs_dir_fetchmatch+0x638>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fbd4 	bl	8001038 <lfs_tag_id>
 8002890:	4603      	mov	r3, r0
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	8a9b      	ldrh	r3, [r3, #20]
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f7fd feb6 	bl	800060c <lfs_min>
 80028a0:	4603      	mov	r3, r0
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028a6:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 80028a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fb69 	bl	8000f82 <lfs_tag_isvalid>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <lfs_dir_fetchmatch+0x64a>
                return besttag;
 80028b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028b8:	e037      	b.n	800292a <lfs_dir_fetchmatch+0x6ba>
            } else if (lfs_tag_id(besttag) < dir->count) {
 80028ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fbbb 	bl	8001038 <lfs_tag_id>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	8a9b      	ldrh	r3, [r3, #20]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d202      	bcs.n	80028d4 <lfs_dir_fetchmatch+0x664>
                return LFS_ERR_NOENT;
 80028ce:	f06f 0301 	mvn.w	r3, #1
 80028d2:	e02a      	b.n	800292a <lfs_dir_fetchmatch+0x6ba>
            } else {
                return 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e028      	b.n	800292a <lfs_dir_fetchmatch+0x6ba>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fa96 	bl	8000e0c <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 80028e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028e2:	3301      	adds	r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	bfb8      	it	lt
 80028ec:	425b      	neglt	r3, r3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	3368      	adds	r3, #104	; 0x68
 80028f2:	443b      	add	r3, r7
 80028f4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 80028fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028fe:	3301      	adds	r3, #1
 8002900:	65bb      	str	r3, [r7, #88]	; 0x58
 8002902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002904:	2b01      	cmp	r3, #1
 8002906:	f77f ad5a 	ble.w	80023be <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	490a      	ldr	r1, [pc, #40]	; (800293c <lfs_dir_fetchmatch+0x6cc>)
 8002914:	9101      	str	r1, [sp, #4]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800291e:	4908      	ldr	r1, [pc, #32]	; (8002940 <lfs_dir_fetchmatch+0x6d0>)
 8002920:	4808      	ldr	r0, [pc, #32]	; (8002944 <lfs_dir_fetchmatch+0x6d4>)
 8002922:	f008 f9f7 	bl	800ad14 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002926:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800292a:	4618      	mov	r0, r3
 800292c:	376c      	adds	r7, #108	; 0x6c
 800292e:	46bd      	mov	sp, r7
 8002930:	bd90      	pop	{r4, r7, pc}
 8002932:	bf00      	nop
 8002934:	000ffc00 	.word	0x000ffc00
 8002938:	7ffffc00 	.word	0x7ffffc00
 800293c:	0800b86c 	.word	0x0800b86c
 8002940:	0800b770 	.word	0x0800b770
 8002944:	0800b878 	.word	0x0800b878

08002948 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af04      	add	r7, sp, #16
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002954:	2300      	movs	r3, #0
 8002956:	9303      	str	r3, [sp, #12]
 8002958:	2300      	movs	r3, #0
 800295a:	9302      	str	r3, [sp, #8]
 800295c:	2300      	movs	r3, #0
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f7ff fc7e 	bl	8002270 <lfs_dir_fetchmatch>
 8002974:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <lfs_dir_getgstate+0x5c>)
 8002994:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <lfs_dir_getgstate+0x60>)
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7fe ff37 	bl	800180c <lfs_dir_get>
 800299e:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	da05      	bge.n	80029b2 <lfs_dir_getgstate+0x32>
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f113 0f02 	cmn.w	r3, #2
 80029ac:	d001      	beq.n	80029b2 <lfs_dir_getgstate+0x32>
        return res;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	e00f      	b.n	80029d2 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f113 0f02 	cmn.w	r3, #2
 80029b8:	d00a      	beq.n	80029d0 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fc02 	bl	80011c8 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	4619      	mov	r1, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe fb65 	bl	800109a <lfs_gstate_xor>
    }

    return 0;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	7ff0000c 	.word	0x7ff0000c
 80029e0:	7ff00000 	.word	0x7ff00000

080029e4 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b08f      	sub	sp, #60	; 0x3c
 80029e8:	af04      	add	r7, sp, #16
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	689c      	ldr	r4, [r3, #8]
 8002a02:	68b8      	ldr	r0, [r7, #8]
 8002a04:	f7fe fb28 	bl	8001058 <lfs_tag_size>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7fd fdfd 	bl	800060c <lfs_min>
 8002a12:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002a14:	6a3c      	ldr	r4, [r7, #32]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	6852      	ldr	r2, [r2, #4]
 8002a1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a20:	6849      	ldr	r1, [r1, #4]
 8002a22:	69b8      	ldr	r0, [r7, #24]
 8002a24:	9003      	str	r0, [sp, #12]
 8002a26:	9102      	str	r1, [sp, #8]
 8002a28:	9201      	str	r2, [sp, #4]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4622      	mov	r2, r4
 8002a30:	2100      	movs	r1, #0
 8002a32:	6a38      	ldr	r0, [r7, #32]
 8002a34:	f7fe f80a 	bl	8000a4c <lfs_bd_cmp>
 8002a38:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <lfs_dir_find_match+0x60>
        return res;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	e014      	b.n	8002a6e <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	689c      	ldr	r4, [r3, #8]
 8002a48:	68b8      	ldr	r0, [r7, #8]
 8002a4a:	f7fe fb05 	bl	8001058 <lfs_tag_size>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	429c      	cmp	r4, r3
 8002a52:	d00b      	beq.n	8002a6c <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	689c      	ldr	r4, [r3, #8]
 8002a58:	68b8      	ldr	r0, [r7, #8]
 8002a5a:	f7fe fafd 	bl	8001058 <lfs_tag_size>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	429c      	cmp	r4, r3
 8002a62:	d201      	bcs.n	8002a68 <lfs_dir_find_match+0x84>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e002      	b.n	8002a6e <lfs_dir_find_match+0x8a>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e000      	b.n	8002a6e <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	372c      	adds	r7, #44	; 0x2c
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd90      	pop	{r4, r7, pc}
	...

08002a78 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b093      	sub	sp, #76	; 0x4c
 8002a7c:	af04      	add	r7, sp, #16
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002a98:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8002a9a:	4b6e      	ldr	r3, [pc, #440]	; (8002c54 <lfs_dir_find+0x1dc>)
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8002aae:	496a      	ldr	r1, [pc, #424]	; (8002c58 <lfs_dir_find+0x1e0>)
 8002ab0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ab2:	f008 fa3b 	bl	800af2c <strspn>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aba:	4413      	add	r3, r2
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8002abe:	4966      	ldr	r1, [pc, #408]	; (8002c58 <lfs_dir_find+0x1e0>)
 8002ac0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ac2:	f008 fa22 	bl	800af0a <strcspn>
 8002ac6:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d105      	bne.n	8002ada <lfs_dir_find+0x62>
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	4b62      	ldr	r3, [pc, #392]	; (8002c5c <lfs_dir_find+0x1e4>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d00a      	beq.n	8002af0 <lfs_dir_find+0x78>
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d10c      	bne.n	8002afa <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	495f      	ldr	r1, [pc, #380]	; (8002c60 <lfs_dir_find+0x1e8>)
 8002ae4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ae6:	f007 fd21 	bl	800a52c <memcmp>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <lfs_dir_find+0x82>
            name += namelen;
 8002af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	4413      	add	r3, r2
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8002af8:	e7d9      	b.n	8002aae <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8002afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	4413      	add	r3, r2
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8002b06:	4954      	ldr	r1, [pc, #336]	; (8002c58 <lfs_dir_find+0x1e0>)
 8002b08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b0a:	f008 fa0f 	bl	800af2c <strspn>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b12:	4413      	add	r3, r2
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8002b16:	4950      	ldr	r1, [pc, #320]	; (8002c58 <lfs_dir_find+0x1e0>)
 8002b18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b1a:	f008 f9f6 	bl	800af0a <strcspn>
 8002b1e:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01d      	beq.n	8002b62 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d112      	bne.n	8002b52 <lfs_dir_find+0xda>
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	494c      	ldr	r1, [pc, #304]	; (8002c60 <lfs_dir_find+0x1e8>)
 8002b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b32:	f007 fcfb 	bl	800a52c <memcmp>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <lfs_dir_find+0xda>
                depth -= 1;
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8002b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8002b50:	e7ad      	b.n	8002aae <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	3301      	adds	r3, #1
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8002b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8002b60:	e7d1      	b.n	8002b06 <lfs_dir_find+0x8e>
                break;
 8002b62:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8002b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <lfs_dir_find+0xf8>
            return tag;
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	e06c      	b.n	8002c4a <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b74:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe fa33 	bl	8000fe4 <lfs_tag_type3>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d002      	beq.n	8002b8a <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8002b84:	f06f 0313 	mvn.w	r3, #19
 8002b88:	e05f      	b.n	8002c4a <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe fa53 	bl	8001038 <lfs_tag_id>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d01c      	beq.n	8002bd8 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe fa49 	bl	8001038 <lfs_tag_id>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002baa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bae:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002bb6:	9200      	str	r2, [sp, #0]
 8002bb8:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <lfs_dir_find+0x1ec>)
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7fe fe25 	bl	800180c <lfs_dir_get>
 8002bc2:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	da01      	bge.n	8002bce <lfs_dir_find+0x156>
                return res;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	e03d      	b.n	8002c4a <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	3318      	adds	r3, #24
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe f9a1 	bl	8000f1a <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8002bde:	212f      	movs	r1, #47	; 0x2f
 8002be0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002be2:	f008 f985 	bl	800aef0 <strchr>
 8002be6:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <lfs_dir_find+0x178>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	e000      	b.n	8002bf2 <lfs_dir_find+0x17a>
 8002bf0:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	613a      	str	r2, [r7, #16]
 8002bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf8:	617a      	str	r2, [r7, #20]
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfc:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002bfe:	f107 0210 	add.w	r2, r7, #16
 8002c02:	9203      	str	r2, [sp, #12]
 8002c04:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <lfs_dir_find+0x1f0>)
 8002c06:	9202      	str	r2, [sp, #8]
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8002c12:	4622      	mov	r2, r4
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff fb2a 	bl	8002270 <lfs_dir_fetchmatch>
 8002c1c:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	da01      	bge.n	8002c28 <lfs_dir_find+0x1b0>
                return tag;
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	e010      	b.n	8002c4a <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8002c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	4413      	add	r3, r2
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8002c36:	e73a      	b.n	8002aae <lfs_dir_find+0x36>
            if (!dir->split) {
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	7ddb      	ldrb	r3, [r3, #23]
 8002c3c:	f083 0301 	eor.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0c8      	beq.n	8002bd8 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8002c46:	f06f 0301 	mvn.w	r3, #1
    }
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	373c      	adds	r7, #60	; 0x3c
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd90      	pop	{r4, r7, pc}
 8002c52:	bf00      	nop
 8002c54:	002ffc00 	.word	0x002ffc00
 8002c58:	0800b8b8 	.word	0x0800b8b8
 8002c5c:	0800b8bc 	.word	0x0800b8bc
 8002c60:	0800b8c0 	.word	0x0800b8c0
 8002c64:	700ffc00 	.word	0x700ffc00
 8002c68:	080029e5 	.word	0x080029e5

08002c6c <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b08b      	sub	sp, #44	; 0x2c
 8002c70:	af04      	add	r7, sp, #16
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f103 0010 	add.w	r0, r3, #16
 8002c80:	68fc      	ldr	r4, [r7, #12]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	6852      	ldr	r2, [r2, #4]
 8002c8a:	6839      	ldr	r1, [r7, #0]
 8002c8c:	9103      	str	r1, [sp, #12]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	9102      	str	r1, [sp, #8]
 8002c92:	9201      	str	r2, [sp, #4]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2300      	movs	r3, #0
 8002c98:	4622      	mov	r2, r4
 8002c9a:	4601      	mov	r1, r0
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f7fd ffd7 	bl	8000c50 <lfs_bd_prog>
 8002ca2:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <lfs_dir_commitprog+0x42>
        return err;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	e010      	b.n	8002cd0 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 ffdc 	bl	8006c74 <lfs_crc>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	441a      	add	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	605a      	str	r2, [r3, #4]
    return 0;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	371c      	adds	r7, #28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd90      	pop	{r4, r7, pc}

08002cd8 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b08f      	sub	sp, #60	; 0x3c
 8002cdc:	af04      	add	r7, sp, #16
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fe f9c3 	bl	8001072 <lfs_tag_dsize>
 8002cec:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	441a      	add	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d902      	bls.n	8002d04 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8002cfe:	f06f 031b 	mvn.w	r3, #27
 8002d02:	e065      	b.n	8002dd0 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4053      	eors	r3, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fd0e 	bl	8000732 <lfs_tobe32>
 8002d16:	4603      	mov	r3, r0
 8002d18:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8002d1a:	f107 0214 	add.w	r2, r7, #20
 8002d1e:	2304      	movs	r3, #4
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7ff ffa2 	bl	8002c6c <lfs_dir_commitprog>
 8002d28:	61f8      	str	r0, [r7, #28]
    if (err) {
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <lfs_dir_commitattr+0x5c>
        return err;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	e04d      	b.n	8002dd0 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0c      	blt.n	8002d54 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	3b04      	subs	r3, #4
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7ff ff92 	bl	8002c6c <lfs_dir_commitprog>
 8002d48:	61f8      	str	r0, [r7, #28]
        if (err) {
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d039      	beq.n	8002dc4 <lfs_dir_commitattr+0xec>
            return err;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	e03d      	b.n	8002dd0 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8002d58:	2300      	movs	r3, #0
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	e02d      	b.n	8002dba <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8002d5e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8002d60:	6a3a      	ldr	r2, [r7, #32]
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8002d66:	1f1c      	subs	r4, r3, #4
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8002d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d72:	440a      	add	r2, r1
 8002d74:	2101      	movs	r1, #1
 8002d76:	9103      	str	r1, [sp, #12]
 8002d78:	f107 0113 	add.w	r1, r7, #19
 8002d7c:	9102      	str	r1, [sp, #8]
 8002d7e:	9201      	str	r2, [sp, #4]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	4623      	mov	r3, r4
 8002d84:	4602      	mov	r2, r0
 8002d86:	2100      	movs	r1, #0
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7fd fd1b 	bl	80007c4 <lfs_bd_read>
 8002d8e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <lfs_dir_commitattr+0xc2>
                return err;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	e01a      	b.n	8002dd0 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8002d9a:	f107 0213 	add.w	r2, r7, #19
 8002d9e:	2301      	movs	r3, #1
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff ff62 	bl	8002c6c <lfs_dir_commitprog>
 8002da8:	61f8      	str	r0, [r7, #28]
            if (err) {
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <lfs_dir_commitattr+0xdc>
                return err;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	e00d      	b.n	8002dd0 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	3301      	adds	r3, #1
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	3b04      	subs	r3, #4
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d3cc      	bcc.n	8002d5e <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	609a      	str	r2, [r3, #8]
    return 0;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	372c      	adds	r7, #44	; 0x2c
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}

08002dd8 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b097      	sub	sp, #92	; 0x5c
 8002ddc:	af04      	add	r7, sp, #16
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f7fd fc2f 	bl	8000656 <lfs_alignup>
 8002df8:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8002e02:	e0a6      	b.n	8002f52 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8002e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fbf8 	bl	800060c <lfs_min>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	4413      	add	r3, r2
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8002e24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d206      	bcs.n	8002e3a <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	3b08      	subs	r3, #8
 8002e30:	4619      	mov	r1, r3
 8002e32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e34:	f7fd fbea 	bl	800060c <lfs_min>
 8002e38:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2204      	movs	r2, #4
 8002e48:	9203      	str	r2, [sp, #12]
 8002e4a:	f107 0214 	add.w	r2, r7, #20
 8002e4e:	9202      	str	r2, [sp, #8]
 8002e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e52:	9201      	str	r2, [sp, #4]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2304      	movs	r3, #4
 8002e58:	460a      	mov	r2, r1
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7fd fcb1 	bl	80007c4 <lfs_bd_read>
 8002e62:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <lfs_dir_commitcrc+0x9e>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002e70:	d001      	beq.n	8002e76 <lfs_dir_commitcrc+0x9e>
            return err;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	e0e8      	b.n	8003048 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fc4e 	bl	800071a <lfs_frombe32>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	43db      	mvns	r3, r3
 8002e82:	0fdb      	lsrs	r3, r3, #31
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8002e8e:	7efb      	ldrb	r3, [r7, #27]
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	051a      	lsls	r2, r3, #20
 8002e96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	1acb      	subs	r3, r1, r3
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8002ea2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002ea6:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	4053      	eors	r3, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fc3e 	bl	8000732 <lfs_tobe32>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f107 010c 	add.w	r1, r7, #12
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f003 fed5 	bl	8006c74 <lfs_crc>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fc14 	bl	8000702 <lfs_tole32>
 8002eda:	4603      	mov	r3, r0
 8002edc:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f103 0010 	add.w	r0, r3, #16
 8002ee4:	687c      	ldr	r4, [r7, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	6852      	ldr	r2, [r2, #4]
 8002eee:	2108      	movs	r1, #8
 8002ef0:	9103      	str	r1, [sp, #12]
 8002ef2:	f107 010c 	add.w	r1, r7, #12
 8002ef6:	9102      	str	r1, [sp, #8]
 8002ef8:	9201      	str	r2, [sp, #4]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2300      	movs	r3, #0
 8002efe:	4622      	mov	r2, r4
 8002f00:	4601      	mov	r1, r0
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fea4 	bl	8000c50 <lfs_bd_prog>
 8002f08:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <lfs_dir_commitcrc+0x13c>
            return err;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	e099      	b.n	8003048 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8002f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f894 	bl	8001058 <lfs_tag_size>
 8002f30:	4603      	mov	r3, r0
 8002f32:	1d1a      	adds	r2, r3, #4
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	441a      	add	r2, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8002f3e:	7efb      	ldrb	r3, [r7, #27]
 8002f40:	07da      	lsls	r2, r3, #31
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	405a      	eors	r2, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f50:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	f63f af53 	bhi.w	8002e04 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f103 0110 	add.w	r1, r3, #16
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	2300      	movs	r3, #0
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7fd fe3d 	bl	8000be8 <lfs_bd_sync>
 8002f6e:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <lfs_dir_commitcrc+0x1a2>
        return err;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	e066      	b.n	8003048 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8002f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8002f84:	e05b      	b.n	800303e <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f90:	e030      	b.n	8002ff4 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8002f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d106      	bne.n	8002fa8 <lfs_dir_commitcrc+0x1d0>
 8002f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d002      	beq.n	8002fa8 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8002fa2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002fa6:	e04f      	b.n	8003048 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8002fa8:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8002faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fae:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8002fb0:	1d18      	adds	r0, r3, #4
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	9203      	str	r2, [sp, #12]
 8002fba:	f107 020b 	add.w	r2, r7, #11
 8002fbe:	9202      	str	r2, [sp, #8]
 8002fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc2:	9201      	str	r2, [sp, #4]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	460a      	mov	r2, r1
 8002fca:	2100      	movs	r1, #0
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7fd fbf9 	bl	80007c4 <lfs_bd_read>
 8002fd2:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <lfs_dir_commitcrc+0x206>
                return err;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	e034      	b.n	8003048 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 8002fde:	f107 030b 	add.w	r3, r7, #11
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fe8:	f003 fe44 	bl	8006c74 <lfs_crc>
 8002fec:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d3c9      	bcc.n	8002f92 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8003004:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003008:	e01e      	b.n	8003048 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800300a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd faf9 	bl	800060c <lfs_min>
 800301a:	4602      	mov	r2, r0
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	4413      	add	r3, r2
 8003020:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8003022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	429a      	cmp	r2, r3
 8003028:	d206      	bcs.n	8003038 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	3b08      	subs	r3, #8
 800302e:	4619      	mov	r1, r3
 8003030:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003032:	f7fd faeb 	bl	800060c <lfs_min>
 8003036:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	3304      	adds	r3, #4
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800303e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	429a      	cmp	r2, r3
 8003044:	d39f      	bcc.n	8002f86 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	374c      	adds	r7, #76	; 0x4c
 800304c:	46bd      	mov	sp, r7
 800304e:	bd90      	pop	{r4, r7, pc}

08003050 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af04      	add	r7, sp, #16
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e016      	b.n	800308e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3301      	adds	r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	bfb8      	it	lt
 800306c:	425b      	neglt	r3, r3
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	4413      	add	r3, r2
 8003074:	4619      	mov	r1, r3
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe fa2e 	bl	80014d8 <lfs_alloc>
 800307c:	60f8      	str	r0, [r7, #12]
        if (err) {
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <lfs_dir_alloc+0x38>
            return err;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	e058      	b.n	800313a <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3301      	adds	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b01      	cmp	r3, #1
 8003092:	dde5      	ble.n	8003060 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80030a4:	2004      	movs	r0, #4
 80030a6:	9003      	str	r0, [sp, #12]
 80030a8:	9202      	str	r2, [sp, #8]
 80030aa:	2200      	movs	r2, #0
 80030ac:	9201      	str	r2, [sp, #4]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2304      	movs	r3, #4
 80030b2:	460a      	mov	r2, r1
 80030b4:	2100      	movs	r1, #0
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd fb84 	bl	80007c4 <lfs_bd_read>
 80030bc:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fb12 	bl	80006ec <lfs_fromle32>
 80030c8:	4602      	mov	r2, r0
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <lfs_dir_alloc+0x90>
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80030da:	d001      	beq.n	80030e0 <lfs_dir_alloc+0x90>
        return err;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	e02c      	b.n	800313a <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	dd0e      	ble.n	8003108 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	3301      	adds	r3, #1
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	4619      	mov	r1, r3
 80030fc:	4610      	mov	r0, r2
 80030fe:	f7fd faaa 	bl	8000656 <lfs_alignup>
 8003102:	4602      	mov	r2, r0
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2204      	movs	r2, #4
 800310c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2200      	movs	r2, #0
 800311a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	f04f 32ff 	mov.w	r2, #4294967295
 8003122:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f04f 32ff 	mov.w	r2, #4294967295
 800312a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2200      	movs	r2, #0
 8003130:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2200      	movs	r2, #0
 8003136:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8003142:	b580      	push	{r7, lr}
 8003144:	b092      	sub	sp, #72	; 0x48
 8003146:	af04      	add	r7, sp, #16
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003150:	f107 0310 	add.w	r3, r7, #16
 8003154:	4619      	mov	r1, r3
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff ff7a 	bl	8003050 <lfs_dir_alloc>
 800315c:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <lfs_dir_split+0x26>
        return err;
 8003164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003166:	e03c      	b.n	80031e2 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	7ddb      	ldrb	r3, [r3, #23]
 800316c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800317c:	f107 0110 	add.w	r1, r7, #16
 8003180:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003184:	9302      	str	r3, [sp, #8]
 8003186:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f879 	bl	800328c <lfs_dir_compact>
 800319a:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	2b00      	cmp	r3, #0
 80031a0:	da01      	bge.n	80031a6 <lfs_dir_split+0x64>
        return res;
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	e01d      	b.n	80031e2 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2201      	movs	r2, #1
 80031b6:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3320      	adds	r3, #32
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f7fd fe53 	bl	8000e6c <lfs_pair_cmp>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <lfs_dir_split+0x9e>
 80031cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3738      	adds	r7, #56	; 0x38
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80031fa:	68b8      	ldr	r0, [r7, #8]
 80031fc:	f7fd ff39 	bl	8001072 <lfs_tag_dsize>
 8003200:	4602      	mov	r2, r0
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	441a      	add	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	601a      	str	r2, [r3, #0]
    return 0;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	6859      	ldr	r1, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	f7ff fd51 	bl	8002cd8 <lfs_dir_commitattr>
 8003236:	4603      	mov	r3, r0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003250:	2b00      	cmp	r3, #0
 8003252:	dd11      	ble.n	8003278 <lfs_dir_needsrelocation+0x38>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	3301      	adds	r3, #1
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800325e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003260:	3201      	adds	r2, #1
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	fbb3 f1f2 	udiv	r1, r3, r2
 800326a:	fb01 f202 	mul.w	r2, r1, r2
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <lfs_dir_needsrelocation+0x38>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <lfs_dir_needsrelocation+0x3a>
 8003278:	2300      	movs	r3, #0
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	b2db      	uxtb	r3, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b0a4      	sub	sp, #144	; 0x90
 8003290:	af0a      	add	r7, sp, #40	; 0x28
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800329a:	2300      	movs	r3, #0
 800329c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f7ff ffcc 	bl	8003240 <lfs_dir_needsrelocation>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80032b8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00e      	beq.n	80032de <lfs_dir_compact+0x52>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2200      	movs	r2, #0
 80032c4:	657a      	str	r2, [r7, #84]	; 0x54
 80032c6:	2201      	movs	r2, #1
 80032c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80032ca:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd fdcb 	bl	8000e6c <lfs_pair_cmp>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f040 8155 	bne.w	8003588 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80032e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e4:	2300      	movs	r3, #0
 80032e6:	643b      	str	r3, [r7, #64]	; 0x40
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ec:	647b      	str	r3, [r7, #68]	; 0x44
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032f4:	2300      	movs	r3, #0
 80032f6:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <lfs_dir_compact+0x80>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003308:	3b08      	subs	r3, #8
 800330a:	e003      	b.n	8003314 <lfs_dir_compact+0x88>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003314:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4619      	mov	r1, r3
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7fd fd43 	bl	8000da8 <lfs_bd_erase>
 8003322:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800332a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003330:	f000 812c 	beq.w	800358c <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003336:	e187      	b.n	8003648 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd f9e0 	bl	8000702 <lfs_tole32>
 8003342:	4602      	mov	r2, r0
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800334e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003352:	2304      	movs	r3, #4
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f7ff fc89 	bl	8002c6c <lfs_dir_commitprog>
 800335a:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd f9c3 	bl	80006ec <lfs_fromle32>
 8003366:	4602      	mov	r2, r0
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	609a      	str	r2, [r3, #8]
            if (err) {
 800336c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8003372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003374:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003378:	f000 810a 	beq.w	8003590 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 800337c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337e:	e163      	b.n	8003648 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003380:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003384:	425b      	negs	r3, r3
 8003386:	b29b      	uxth	r3, r3
 8003388:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	637a      	str	r2, [r7, #52]	; 0x34
 800338e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003392:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8003394:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003398:	9208      	str	r2, [sp, #32]
 800339a:	4aad      	ldr	r2, [pc, #692]	; (8003650 <lfs_dir_compact+0x3c4>)
 800339c:	9207      	str	r2, [sp, #28]
 800339e:	9306      	str	r3, [sp, #24]
 80033a0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80033a4:	9305      	str	r3, [sp, #20]
 80033a6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80033aa:	9304      	str	r3, [sp, #16]
 80033ac:	2300      	movs	r3, #0
 80033ae:	9303      	str	r3, [sp, #12]
 80033b0:	4ba8      	ldr	r3, [pc, #672]	; (8003654 <lfs_dir_compact+0x3c8>)
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295
 80033c0:	2200      	movs	r2, #0
 80033c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7fe fb73 	bl	8001ab0 <lfs_dir_traverse>
 80033ca:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80033cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d006      	beq.n	80033e0 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80033d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80033d8:	f000 80dc 	beq.w	8003594 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80033dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033de:	e133      	b.n	8003648 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	3318      	adds	r3, #24
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd fd26 	bl	8000e36 <lfs_pair_isnull>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f083 0301 	eor.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d022      	beq.n	800343c <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3318      	adds	r3, #24
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fda7 	bl	8000f4e <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	7ddb      	ldrb	r3, [r3, #23]
 8003404:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003408:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800340a:	4a93      	ldr	r2, [pc, #588]	; (8003658 <lfs_dir_compact+0x3cc>)
 800340c:	431a      	orrs	r2, r3
                        dir->tail);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003412:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff fc5e 	bl	8002cd8 <lfs_dir_commitattr>
 800341c:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3318      	adds	r3, #24
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fd79 	bl	8000f1a <lfs_pair_fromle32>
                if (err) {
 8003428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800342e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003430:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003434:	f000 80b0 	beq.w	8003598 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800343a:	e105      	b.n	8003648 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800343c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003448:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800344c:	f083 0301 	eor.w	r3, r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d011      	beq.n	800347a <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800345c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003460:	4611      	mov	r1, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fe19 	bl	800109a <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800346e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd fe10 	bl	800109a <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fe07 	bl	800109a <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800349c:	461a      	mov	r2, r3
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff fa6d 	bl	8002980 <lfs_dir_getgstate>
 80034a6:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80034a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <lfs_dir_compact+0x226>
                return err;
 80034ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b0:	e0ca      	b.n	8003648 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80034b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd fe14 	bl	80010e4 <lfs_gstate_iszero>
 80034bc:	4603      	mov	r3, r0
 80034be:	f083 0301 	eor.w	r3, r3, #1
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d016      	beq.n	80034f6 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80034c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd fe9b 	bl	8001208 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80034d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80034da:	4a60      	ldr	r2, [pc, #384]	; (800365c <lfs_dir_compact+0x3d0>)
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7ff fbfb 	bl	8002cd8 <lfs_dir_commitattr>
 80034e2:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80034e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80034ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ec:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80034f0:	d054      	beq.n	800359c <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80034f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f4:	e0a8      	b.n	8003648 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80034f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034fa:	4619      	mov	r1, r3
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff fc6b 	bl	8002dd8 <lfs_dir_commitcrc>
 8003502:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800350a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800350c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003510:	d046      	beq.n	80035a0 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003514:	e098      	b.n	8003648 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800351c:	6992      	ldr	r2, [r2, #24]
 800351e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003522:	fb01 f202 	mul.w	r2, r1, r2
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d006      	beq.n	800353a <lfs_dir_compact+0x2ae>
 800352c:	4b4c      	ldr	r3, [pc, #304]	; (8003660 <lfs_dir_compact+0x3d4>)
 800352e:	4a4d      	ldr	r2, [pc, #308]	; (8003664 <lfs_dir_compact+0x3d8>)
 8003530:	f240 714c 	movw	r1, #1868	; 0x74c
 8003534:	484c      	ldr	r0, [pc, #304]	; (8003668 <lfs_dir_compact+0x3dc>)
 8003536:	f006 ff8f 	bl	800a458 <__assert_func>
            lfs_pair_swap(dir->pair);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd fc65 	bl	8000e0c <lfs_pair_swap>
            dir->count = end - begin;
 8003542:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003546:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	b29a      	uxth	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3348      	adds	r3, #72	; 0x48
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800356a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800356e:	f083 0301 	eor.w	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d064      	beq.n	8003642 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	333c      	adds	r3, #60	; 0x3c
 800357e:	3230      	adds	r2, #48	; 0x30
 8003580:	ca07      	ldmia	r2, {r0, r1, r2}
 8003582:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003586:	e05c      	b.n	8003642 <lfs_dir_compact+0x3b6>
        goto relocate;
 8003588:	bf00      	nop
 800358a:	e00a      	b.n	80035a2 <lfs_dir_compact+0x316>
                    goto relocate;
 800358c:	bf00      	nop
 800358e:	e008      	b.n	80035a2 <lfs_dir_compact+0x316>
                    goto relocate;
 8003590:	bf00      	nop
 8003592:	e006      	b.n	80035a2 <lfs_dir_compact+0x316>
                    goto relocate;
 8003594:	bf00      	nop
 8003596:	e004      	b.n	80035a2 <lfs_dir_compact+0x316>
                        goto relocate;
 8003598:	bf00      	nop
 800359a:	e002      	b.n	80035a2 <lfs_dir_compact+0x316>
                        goto relocate;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <lfs_dir_compact+0x316>
                    goto relocate;
 80035a0:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3310      	adds	r3, #16
 80035ac:	4619      	mov	r1, r3
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f7fd f8e2 	bl	8000778 <lfs_cache_drop>
        if (!tired) {
 80035b4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80035b8:	f083 0301 	eor.w	r3, r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a29      	ldr	r2, [pc, #164]	; (800366c <lfs_dir_compact+0x3e0>)
 80035c8:	9200      	str	r2, [sp, #0]
 80035ca:	f240 725e 	movw	r2, #1886	; 0x75e
 80035ce:	4926      	ldr	r1, [pc, #152]	; (8003668 <lfs_dir_compact+0x3dc>)
 80035d0:	4827      	ldr	r0, [pc, #156]	; (8003670 <lfs_dir_compact+0x3e4>)
 80035d2:	f007 fb9f 	bl	800ad14 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2200      	movs	r2, #0
 80035da:	617a      	str	r2, [r7, #20]
 80035dc:	2201      	movs	r2, #1
 80035de:	61ba      	str	r2, [r7, #24]
 80035e0:	f107 0214 	add.w	r2, r7, #20
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd fc40 	bl	8000e6c <lfs_pair_cmp>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10c      	bne.n	800360c <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4a1d      	ldr	r2, [pc, #116]	; (800366c <lfs_dir_compact+0x3e0>)
 80035f8:	9200      	str	r2, [sp, #0]
 80035fa:	f240 7263 	movw	r2, #1891	; 0x763
 80035fe:	491a      	ldr	r1, [pc, #104]	; (8003668 <lfs_dir_compact+0x3dc>)
 8003600:	481c      	ldr	r0, [pc, #112]	; (8003674 <lfs_dir_compact+0x3e8>)
 8003602:	f007 fb87 	bl	800ad14 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003606:	f06f 031b 	mvn.w	r3, #27
 800360a:	e01d      	b.n	8003648 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7fd ff60 	bl	80014d8 <lfs_alloc>
 8003618:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800361a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00c      	beq.n	800363a <lfs_dir_compact+0x3ae>
 8003620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003622:	f113 0f1c 	cmn.w	r3, #28
 8003626:	d106      	bne.n	8003636 <lfs_dir_compact+0x3aa>
 8003628:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800362c:	f083 0301 	eor.w	r3, r3, #1
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <lfs_dir_compact+0x3ae>
            return err;
 8003636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003638:	e006      	b.n	8003648 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 800363a:	2300      	movs	r3, #0
 800363c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8003640:	e64d      	b.n	80032de <lfs_dir_compact+0x52>
        break;
 8003642:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003644:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003648:	4618      	mov	r0, r3
 800364a:	3768      	adds	r7, #104	; 0x68
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	08003217 	.word	0x08003217
 8003654:	400ffc00 	.word	0x400ffc00
 8003658:	000ffc08 	.word	0x000ffc08
 800365c:	7ffffc0c 	.word	0x7ffffc0c
 8003660:	0800b8c4 	.word	0x0800b8c4
 8003664:	0800c11c 	.word	0x0800c11c
 8003668:	0800b770 	.word	0x0800b770
 800366c:	0800b86c 	.word	0x0800b86c
 8003670:	0800b8ec 	.word	0x0800b8ec
 8003674:	0800b910 	.word	0x0800b910

08003678 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b097      	sub	sp, #92	; 0x5c
 800367c:	af0a      	add	r7, sp, #40	; 0x28
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003686:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 800368c:	e058      	b.n	8003740 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	b29b      	uxth	r3, r3
 8003696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003698:	b292      	uxth	r2, r2
 800369a:	4252      	negs	r2, r2
 800369c:	b292      	uxth	r2, r2
 800369e:	b212      	sxth	r2, r2
 80036a0:	f107 0118 	add.w	r1, r7, #24
 80036a4:	9108      	str	r1, [sp, #32]
 80036a6:	4979      	ldr	r1, [pc, #484]	; (800388c <lfs_dir_splittingcompact+0x214>)
 80036a8:	9107      	str	r1, [sp, #28]
 80036aa:	9206      	str	r2, [sp, #24]
 80036ac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80036b0:	9205      	str	r2, [sp, #20]
 80036b2:	9304      	str	r3, [sp, #16]
 80036b4:	2300      	movs	r3, #0
 80036b6:	9303      	str	r3, [sp, #12]
 80036b8:	4b75      	ldr	r3, [pc, #468]	; (8003890 <lfs_dir_splittingcompact+0x218>)
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	f04f 33ff 	mov.w	r3, #4294967295
 80036c8:	2200      	movs	r2, #0
 80036ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7fe f9ef 	bl	8001ab0 <lfs_dir_traverse>
 80036d2:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <lfs_dir_splittingcompact+0x66>
                return err;
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	e0d1      	b.n	8003882 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 80036de:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2bfe      	cmp	r3, #254	; 0xfe
 80036e8:	d822      	bhi.n	8003730 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	e003      	b.n	8003710 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800370c:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800370e:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003714:	6992      	ldr	r2, [r2, #24]
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f7fc ff9c 	bl	8000656 <lfs_alignup>
 800371e:	4603      	mov	r3, r0
 8003720:	4619      	mov	r1, r3
 8003722:	4620      	mov	r0, r4
 8003724:	f7fc ff72 	bl	800060c <lfs_min>
 8003728:	4602      	mov	r2, r0
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	d20e      	bcs.n	800374e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003730:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800373c:	4413      	add	r3, r2
 800373e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003740:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d8a0      	bhi.n	800368e <lfs_dir_splittingcompact+0x16>
 800374c:	e000      	b.n	8003750 <lfs_dir_splittingcompact+0xd8>
                break;
 800374e:	bf00      	nop
        }

        if (split == begin) {
 8003750:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003756:	429a      	cmp	r2, r3
 8003758:	d02d      	beq.n	80037b6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	b29b      	uxth	r3, r3
 800375e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003762:	9202      	str	r2, [sp, #8]
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff fce6 	bl	8003142 <lfs_dir_split>
 8003776:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <lfs_dir_splittingcompact+0x112>
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	f113 0f1c 	cmn.w	r3, #28
 8003784:	d001      	beq.n	800378a <lfs_dir_splittingcompact+0x112>
            return err;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	e07b      	b.n	8003882 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00e      	beq.n	80037ae <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	493e      	ldr	r1, [pc, #248]	; (8003894 <lfs_dir_splittingcompact+0x21c>)
 800379a:	9101      	str	r1, [sp, #4]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	f240 72ad 	movw	r2, #1965	; 0x7ad
 80037a4:	493c      	ldr	r1, [pc, #240]	; (8003898 <lfs_dir_splittingcompact+0x220>)
 80037a6:	483d      	ldr	r0, [pc, #244]	; (800389c <lfs_dir_splittingcompact+0x224>)
 80037a8:	f007 fab4 	bl	800ad14 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 80037ac:	e004      	b.n	80037b8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 80037b4:	e767      	b.n	8003686 <lfs_dir_splittingcompact+0xe>
            break;
 80037b6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff fd40 	bl	8003240 <lfs_dir_needsrelocation>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d04e      	beq.n	8003864 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	613a      	str	r2, [r7, #16]
 80037cc:	2201      	movs	r2, #1
 80037ce:	617a      	str	r2, [r7, #20]
 80037d0:	f107 0210 	add.w	r2, r7, #16
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fb48 	bl	8000e6c <lfs_pair_cmp>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d140      	bne.n	8003864 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f003 f916 	bl	8006a14 <lfs_fs_rawsize>
 80037e8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	da01      	bge.n	80037f4 <lfs_dir_splittingcompact+0x17c>
            return size;
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	e046      	b.n	8003882 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	085a      	lsrs	r2, r3, #1
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d930      	bls.n	8003864 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4a23      	ldr	r2, [pc, #140]	; (8003894 <lfs_dir_splittingcompact+0x21c>)
 8003808:	9200      	str	r2, [sp, #0]
 800380a:	f240 72c1 	movw	r2, #1985	; 0x7c1
 800380e:	4922      	ldr	r1, [pc, #136]	; (8003898 <lfs_dir_splittingcompact+0x220>)
 8003810:	4823      	ldr	r0, [pc, #140]	; (80038a0 <lfs_dir_splittingcompact+0x228>)
 8003812:	f007 fa7f 	bl	800ad14 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003816:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800381a:	9302      	str	r3, [sp, #8]
 800381c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff fc88 	bl	8003142 <lfs_dir_split>
 8003832:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <lfs_dir_splittingcompact+0x1ce>
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f113 0f1c 	cmn.w	r3, #28
 8003840:	d001      	beq.n	8003846 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	e01d      	b.n	8003882 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <lfs_dir_splittingcompact+0x21c>)
 800384e:	f240 72cb 	movw	r2, #1995	; 0x7cb
 8003852:	4911      	ldr	r1, [pc, #68]	; (8003898 <lfs_dir_splittingcompact+0x220>)
 8003854:	4813      	ldr	r0, [pc, #76]	; (80038a4 <lfs_dir_splittingcompact+0x22c>)
 8003856:	f007 fa5d 	bl	800ad14 <iprintf>
 800385a:	e003      	b.n	8003864 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 800385c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003860:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003864:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003868:	9302      	str	r3, [sp, #8]
 800386a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff fd06 	bl	800328c <lfs_dir_compact>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3734      	adds	r7, #52	; 0x34
 8003886:	46bd      	mov	sp, r7
 8003888:	bd90      	pop	{r4, r7, pc}
 800388a:	bf00      	nop
 800388c:	080031eb 	.word	0x080031eb
 8003890:	400ffc00 	.word	0x400ffc00
 8003894:	0800b86c 	.word	0x0800b86c
 8003898:	0800b770 	.word	0x0800b770
 800389c:	0800b948 	.word	0x0800b948
 80038a0:	0800b978 	.word	0x0800b978
 80038a4:	0800b9a8 	.word	0x0800b9a8

080038a8 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 80038a8:	b5b0      	push	{r4, r5, r7, lr}
 80038aa:	b0a6      	sub	sp, #152	; 0x98
 80038ac:	af0a      	add	r7, sp, #40	; 0x28
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
    int state = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 80038c0:	2300      	movs	r3, #0
 80038c2:	667b      	str	r3, [r7, #100]	; 0x64
 80038c4:	e06d      	b.n	80039a2 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80038c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	4413      	add	r3, r2
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd fb87 	bl	8000fe4 <lfs_tag_type3>
 80038d6:	4603      	mov	r3, r0
 80038d8:	461a      	mov	r2, r3
 80038da:	f240 4301 	movw	r3, #1025	; 0x401
 80038de:	429a      	cmp	r2, r3
 80038e0:	d106      	bne.n	80038f0 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	8a9b      	ldrh	r3, [r3, #20]
 80038e6:	3301      	adds	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	829a      	strh	r2, [r3, #20]
 80038ee:	e055      	b.n	800399c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80038f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd fb72 	bl	8000fe4 <lfs_tag_type3>
 8003900:	4603      	mov	r3, r0
 8003902:	461a      	mov	r2, r3
 8003904:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003908:	429a      	cmp	r2, r3
 800390a:	d114      	bne.n	8003936 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	8a9b      	ldrh	r3, [r3, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d106      	bne.n	8003922 <lfs_dir_relocatingcommit+0x7a>
 8003914:	4ba4      	ldr	r3, [pc, #656]	; (8003ba8 <lfs_dir_relocatingcommit+0x300>)
 8003916:	4aa5      	ldr	r2, [pc, #660]	; (8003bac <lfs_dir_relocatingcommit+0x304>)
 8003918:	f240 71e3 	movw	r1, #2019	; 0x7e3
 800391c:	48a4      	ldr	r0, [pc, #656]	; (8003bb0 <lfs_dir_relocatingcommit+0x308>)
 800391e:	f006 fd9b 	bl	800a458 <__assert_func>
            dir->count -= 1;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	8a9b      	ldrh	r3, [r3, #20]
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003934:	e032      	b.n	800399c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	4413      	add	r3, r2
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd fb3f 	bl	8000fc4 <lfs_tag_type1>
 8003946:	4603      	mov	r3, r0
 8003948:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800394c:	d126      	bne.n	800399c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800394e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	4413      	add	r3, r2
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800395e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	4413      	add	r3, r2
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800396e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	4413      	add	r3, r2
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fd fb43 	bl	8001004 <lfs_tag_chunk>
 800397e:	4603      	mov	r3, r0
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	3318      	adds	r3, #24
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd fabf 	bl	8000f1a <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800399c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800399e:	3301      	adds	r3, #1
 80039a0:	667b      	str	r3, [r7, #100]	; 0x64
 80039a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039a8:	429a      	cmp	r2, r3
 80039aa:	db8c      	blt.n	80038c6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 80039ac:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d02b      	beq.n	8003a0c <lfs_dir_relocatingcommit+0x164>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	8a9b      	ldrh	r3, [r3, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d127      	bne.n	8003a0c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80039bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <lfs_dir_relocatingcommit+0x12a>
 80039c4:	4b7b      	ldr	r3, [pc, #492]	; (8003bb4 <lfs_dir_relocatingcommit+0x30c>)
 80039c6:	4a79      	ldr	r2, [pc, #484]	; (8003bac <lfs_dir_relocatingcommit+0x304>)
 80039c8:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80039cc:	4878      	ldr	r0, [pc, #480]	; (8003bb0 <lfs_dir_relocatingcommit+0x308>)
 80039ce:	f006 fd43 	bl	800a458 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80039d8:	4619      	mov	r1, r3
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f002 fc8e 	bl	80062fc <lfs_fs_pred>
 80039e0:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 80039e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <lfs_dir_relocatingcommit+0x14c>
 80039e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ea:	f113 0f02 	cmn.w	r3, #2
 80039ee:	d001      	beq.n	80039f4 <lfs_dir_relocatingcommit+0x14c>
            return err;
 80039f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f2:	e203      	b.n	8003dfc <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 80039f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f6:	f113 0f02 	cmn.w	r3, #2
 80039fa:	d007      	beq.n	8003a0c <lfs_dir_relocatingcommit+0x164>
 80039fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a00:	7ddb      	ldrb	r3, [r3, #23]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8003a06:	2302      	movs	r3, #2
 8003a08:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8003a0a:	e121      	b.n	8003c50 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	7d9b      	ldrb	r3, [r3, #22]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80fb 	beq.w	8003c0c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8003a1a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8003a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003a32:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <lfs_dir_relocatingcommit+0x1a0>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a44:	3b08      	subs	r3, #8
 8003a46:	e003      	b.n	8003a50 <lfs_dir_relocatingcommit+0x1a8>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	3318      	adds	r3, #24
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fa79 	bl	8000f4e <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8003a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a72:	9308      	str	r3, [sp, #32]
 8003a74:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <lfs_dir_relocatingcommit+0x310>)
 8003a76:	9307      	str	r3, [sp, #28]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	9306      	str	r3, [sp, #24]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9305      	str	r3, [sp, #20]
 8003a80:	2300      	movs	r3, #0
 8003a82:	9304      	str	r3, [sp, #16]
 8003a84:	2300      	movs	r3, #0
 8003a86:	9303      	str	r3, [sp, #12]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9302      	str	r3, [sp, #8]
 8003a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	460b      	mov	r3, r1
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7fe f808 	bl	8001ab0 <lfs_dir_traverse>
 8003aa0:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3318      	adds	r3, #24
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd fa37 	bl	8000f1a <lfs_pair_fromle32>
        if (err) {
 8003aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab4:	f113 0f1c 	cmn.w	r3, #28
 8003ab8:	f000 80aa 	beq.w	8003c10 <lfs_dir_relocatingcommit+0x368>
 8003abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003abe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003ac2:	f000 80a5 	beq.w	8003c10 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac8:	e198      	b.n	8003dfc <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8003aca:	f107 031c 	add.w	r3, r7, #28
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003adc:	f107 031c 	add.w	r3, r7, #28
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd fad9 	bl	800109a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003aee:	f107 031c 	add.w	r3, r7, #28
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd fad0 	bl	800109a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003b00:	f107 031c 	add.w	r3, r7, #28
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fd fac7 	bl	800109a <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fd fae1 	bl	80010e4 <lfs_gstate_iszero>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f083 0301 	eor.w	r3, r3, #1
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d027      	beq.n	8003b7e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003b2e:	f107 031c 	add.w	r3, r7, #28
 8003b32:	461a      	mov	r2, r3
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f7fe ff22 	bl	8002980 <lfs_dir_getgstate>
 8003b3c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8003b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8003b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b46:	e159      	b.n	8003dfc <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd fb5b 	bl	8001208 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8003b52:	f107 031c 	add.w	r3, r7, #28
 8003b56:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003b5a:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <lfs_dir_relocatingcommit+0x314>)
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f7ff f8bb 	bl	8002cd8 <lfs_dir_commitattr>
 8003b62:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8003b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6c:	f113 0f1c 	cmn.w	r3, #28
 8003b70:	d050      	beq.n	8003c14 <lfs_dir_relocatingcommit+0x36c>
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b74:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003b78:	d04c      	beq.n	8003c14 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8003b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b7c:	e13e      	b.n	8003dfc <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8003b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b82:	4619      	mov	r1, r3
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff f927 	bl	8002dd8 <lfs_dir_commitcrc>
 8003b8a:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8003b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b94:	f113 0f1c 	cmn.w	r3, #28
 8003b98:	d03e      	beq.n	8003c18 <lfs_dir_relocatingcommit+0x370>
 8003b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b9c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003ba0:	d03a      	beq.n	8003c18 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba4:	e12a      	b.n	8003dfc <lfs_dir_relocatingcommit+0x554>
 8003ba6:	bf00      	nop
 8003ba8:	0800b9d4 	.word	0x0800b9d4
 8003bac:	0800c12c 	.word	0x0800c12c
 8003bb0:	0800b770 	.word	0x0800b770
 8003bb4:	0800b9e4 	.word	0x0800b9e4
 8003bb8:	08003217 	.word	0x08003217
 8003bbc:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003bc6:	6992      	ldr	r2, [r2, #24]
 8003bc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bcc:	fb01 f202 	mul.w	r2, r1, r2
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <lfs_dir_relocatingcommit+0x33c>
 8003bd6:	4b8b      	ldr	r3, [pc, #556]	; (8003e04 <lfs_dir_relocatingcommit+0x55c>)
 8003bd8:	4a8b      	ldr	r2, [pc, #556]	; (8003e08 <lfs_dir_relocatingcommit+0x560>)
 8003bda:	f640 013a 	movw	r1, #2106	; 0x83a
 8003bde:	488b      	ldr	r0, [pc, #556]	; (8003e0c <lfs_dir_relocatingcommit+0x564>)
 8003be0:	f006 fc3a 	bl	800a458 <__assert_func>
        dir->off = commit.off;
 8003be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8003bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	333c      	adds	r3, #60	; 0x3c
 8003bf6:	3230      	adds	r2, #48	; 0x30
 8003bf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3348      	adds	r3, #72	; 0x48
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	e021      	b.n	8003c50 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8003c0c:	bf00      	nop
 8003c0e:	e004      	b.n	8003c1a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8003c10:	bf00      	nop
 8003c12:	e002      	b.n	8003c1a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8003c18:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3310      	adds	r3, #16
 8003c1e:	4619      	mov	r1, r3
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7fc fda9 	bl	8000778 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	8a9b      	ldrh	r3, [r3, #20]
 8003c2a:	9302      	str	r3, [sp, #8]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7ff fd1b 	bl	8003678 <lfs_dir_splittingcompact>
 8003c42:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8003c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da01      	bge.n	8003c4e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8003c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4c:	e0d6      	b.n	8003dfc <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8003c4e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	663b      	str	r3, [r7, #96]	; 0x60
 8003c62:	e0c6      	b.n	8003df2 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8003c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c66:	3308      	adds	r3, #8
 8003c68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd f8fc 	bl	8000e6c <lfs_pair_cmp>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 80b8 	bne.w	8003dec <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8003c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	f103 0408 	add.w	r4, r3, #8
 8003c84:	4615      	mov	r5, r2
 8003c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8003c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c94:	3308      	adds	r3, #8
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f000 809d 	beq.w	8003dd8 <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ca2:	e07b      	b.n	8003d9c <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fd f998 	bl	8000fe4 <lfs_tag_type3>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d115      	bne.n	8003cec <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8003cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc2:	889c      	ldrh	r4, [r3, #4]
 8003cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	4413      	add	r3, r2
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd f9b2 	bl	8001038 <lfs_tag_id>
 8003cd4:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003cd6:	429c      	cmp	r4, r3
 8003cd8:	d108      	bne.n	8003cec <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8003cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce0:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8003ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	e054      	b.n	8003d96 <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd f974 	bl	8000fe4 <lfs_tag_type3>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d11c      	bne.n	8003d42 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8003d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d0a:	889c      	ldrh	r4, [r3, #4]
 8003d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd f98e 	bl	8001038 <lfs_tag_id>
 8003d1c:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003d1e:	429c      	cmp	r4, r3
 8003d20:	d90f      	bls.n	8003d42 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8003d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d24:	889b      	ldrh	r3, [r3, #4]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d2c:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8003d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d30:	799b      	ldrb	r3, [r3, #6]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d12f      	bne.n	8003d96 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8003d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	1e5a      	subs	r2, r3, #1
 8003d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8003d40:	e029      	b.n	8003d96 <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8003d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	4413      	add	r3, r2
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fd f949 	bl	8000fe4 <lfs_tag_type3>
 8003d52:	4603      	mov	r3, r0
 8003d54:	461a      	mov	r2, r3
 8003d56:	f240 4301 	movw	r3, #1025	; 0x401
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d11b      	bne.n	8003d96 <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8003d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d60:	889c      	ldrh	r4, [r3, #4]
 8003d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fd f963 	bl	8001038 <lfs_tag_id>
 8003d72:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8003d74:	429c      	cmp	r4, r3
 8003d76:	d30e      	bcc.n	8003d96 <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8003d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d7a:	889b      	ldrh	r3, [r3, #4]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d82:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8003d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d86:	799b      	ldrb	r3, [r3, #6]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d104      	bne.n	8003d96 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8003d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8003d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d98:	3301      	adds	r3, #1
 8003d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003da2:	429a      	cmp	r2, r3
 8003da4:	f6ff af7e 	blt.w	8003ca4 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8003da8:	e016      	b.n	8003dd8 <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 8003daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dac:	889a      	ldrh	r2, [r3, #4]
 8003dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db0:	8b9b      	ldrh	r3, [r3, #28]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db8:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8003dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dbc:	f103 0108 	add.w	r1, r3, #8
 8003dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dc2:	3320      	adds	r3, #32
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7fe fdbe 	bl	8002948 <lfs_dir_fetch>
 8003dcc:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8003dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <lfs_dir_relocatingcommit+0x530>
                    return err;
 8003dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd6:	e011      	b.n	8003dfc <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 8003dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dda:	889a      	ldrh	r2, [r3, #4]
 8003ddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dde:	8b9b      	ldrh	r3, [r3, #28]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d303      	bcc.n	8003dec <lfs_dir_relocatingcommit+0x544>
 8003de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de6:	7fdb      	ldrb	r3, [r3, #31]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1de      	bne.n	8003daa <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	663b      	str	r3, [r7, #96]	; 0x60
 8003df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f47f af35 	bne.w	8003c64 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3770      	adds	r7, #112	; 0x70
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bdb0      	pop	{r4, r5, r7, pc}
 8003e04:	0800b8c4 	.word	0x0800b8c4
 8003e08:	0800c12c 	.word	0x0800c12c
 8003e0c:	0800b770 	.word	0x0800b770

08003e10 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8003e10:	b5b0      	push	{r4, r5, r7, lr}
 8003e12:	b0bc      	sub	sp, #240	; 0xf0
 8003e14:	af04      	add	r7, sp, #16
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003e26:	e045      	b.n	8003eb4 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8003e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d03a      	beq.n	8003eaa <lfs_dir_orphaningcommit+0x9a>
 8003e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e38:	3308      	adds	r3, #8
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fd f814 	bl	8000e6c <lfs_pair_cmp>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d12f      	bne.n	8003eaa <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8003e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e4e:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d12a      	bne.n	8003eaa <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8003e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d023      	beq.n	8003eaa <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8003e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d91b      	bls.n	8003eaa <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8003e72:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fff0 	bl	8004e5c <lfs_file_outline>
 8003e7c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8003e80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <lfs_dir_orphaningcommit+0x7e>
                return err;
 8003e88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e8c:	e2ad      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8003e8e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f001 f804 	bl	8004ea0 <lfs_file_flush>
 8003e98:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8003e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <lfs_dir_orphaningcommit+0x9a>
                return err;
 8003ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ea8:	e29f      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8003eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1b5      	bne.n	8003e28 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003ed2:	461d      	mov	r5, r3
 8003ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ed8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003ee6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff fcd8 	bl	80038a8 <lfs_dir_relocatingcommit>
 8003ef8:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8003efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	da02      	bge.n	8003f0a <lfs_dir_orphaningcommit+0xfa>
        return state;
 8003f04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f08:	e26f      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fc ffaa 	bl	8000e6c <lfs_pair_cmp>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	461d      	mov	r5, r3
 8003f22:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8003f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d14a      	bne.n	8003fd0 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3348      	adds	r3, #72	; 0x48
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7fe fd1c 	bl	8002980 <lfs_dir_getgstate>
 8003f48:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8003f4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <lfs_dir_orphaningcommit+0x14a>
            return err;
 8003f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f58:	e247      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8003f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8003f60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	3318      	adds	r3, #24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fc ffef 	bl	8000f4e <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	7ddb      	ldrb	r3, [r3, #23]
 8003f74:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003f78:	051a      	lsls	r2, r3, #20
 8003f7a:	4bc2      	ldr	r3, [pc, #776]	; (8004284 <lfs_dir_orphaningcommit+0x474>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	667b      	str	r3, [r7, #100]	; 0x64
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	3318      	adds	r3, #24
 8003f84:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f86:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f8a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003f8e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003f92:	2000      	movs	r0, #0
 8003f94:	9001      	str	r0, [sp, #4]
 8003f96:	2001      	movs	r0, #1
 8003f98:	9000      	str	r0, [sp, #0]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff fc84 	bl	80038a8 <lfs_dir_relocatingcommit>
 8003fa0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	3318      	adds	r3, #24
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fc ffb6 	bl	8000f1a <lfs_pair_fromle32>
        if (state < 0) {
 8003fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	da02      	bge.n	8003fbc <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8003fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fba:	e216      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8003fbc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003fc0:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8003fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8003fd6:	e1fc      	b.n	80043d2 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8003fd8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003fdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fe0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003fe4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fe8:	4ca7      	ldr	r4, [pc, #668]	; (8004288 <lfs_dir_orphaningcommit+0x478>)
 8003fea:	9403      	str	r4, [sp, #12]
 8003fec:	9102      	str	r1, [sp, #8]
 8003fee:	9201      	str	r2, [sp, #4]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f640 02c4 	movw	r2, #2244	; 0x8c4
 8003ff8:	49a4      	ldr	r1, [pc, #656]	; (800428c <lfs_dir_orphaningcommit+0x47c>)
 8003ffa:	48a5      	ldr	r0, [pc, #660]	; (8004290 <lfs_dir_orphaningcommit+0x480>)
 8003ffc:	f006 fe8a 	bl	800ad14 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f103 0220 	add.w	r2, r3, #32
 800400c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc ff2a 	bl	8000e6c <lfs_pair_cmp>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d107      	bne.n	800402e <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800401e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8004026:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004036:	e037      	b.n	80040a8 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004038:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800403c:	f103 0208 	add.w	r2, r3, #8
 8004040:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f7fc ff10 	bl	8000e6c <lfs_pair_cmp>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8004052:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004056:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800405a:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 800405c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004060:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004064:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8004066:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800406a:	799b      	ldrb	r3, [r3, #6]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d116      	bne.n	800409e <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8004070:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004074:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004078:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800407c:	4611      	mov	r1, r2
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fef4 	bl	8000e6c <lfs_pair_cmp>
 8004084:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800408a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800408e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8004094:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004098:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800409e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1c3      	bne.n	8004038 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80040b0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80040b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80040b8:	4619      	mov	r1, r3
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f002 f9a6 	bl	800640c <lfs_fs_parent>
 80040c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80040c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	da07      	bge.n	80040dc <lfs_dir_orphaningcommit+0x2cc>
 80040cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040d0:	f113 0f02 	cmn.w	r3, #2
 80040d4:	d002      	beq.n	80040dc <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80040d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040da:	e186      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80040dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040e0:	f113 0f02 	cmn.w	r3, #2
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 80040ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040f2:	f113 0f02 	cmn.w	r3, #2
 80040f6:	f000 809e 	beq.w	8004236 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80040fa:	2101      	movs	r1, #1
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f002 f9db 	bl	80064b8 <lfs_fs_preporphans>
 8004102:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8004106:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <lfs_dir_orphaningcommit+0x304>
                return err;
 800410e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004112:	e16a      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004114:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004118:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3330      	adds	r3, #48	; 0x30
 8004120:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f7fd f82e 	bl	8001188 <lfs_gstate_hasmovehere>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d02d      	beq.n	800418e <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4618      	mov	r0, r3
 8004138:	f7fc ff7e 	bl	8001038 <lfs_tag_id>
 800413c:	4603      	mov	r3, r0
 800413e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8004142:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004146:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800414a:	484f      	ldr	r0, [pc, #316]	; (8004288 <lfs_dir_orphaningcommit+0x478>)
 800414c:	9002      	str	r0, [sp, #8]
 800414e:	9201      	str	r2, [sp, #4]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	460b      	mov	r3, r1
 8004154:	f640 02f1 	movw	r2, #2289	; 0x8f1
 8004158:	494c      	ldr	r1, [pc, #304]	; (800428c <lfs_dir_orphaningcommit+0x47c>)
 800415a:	484e      	ldr	r0, [pc, #312]	; (8004294 <lfs_dir_orphaningcommit+0x484>)
 800415c:	f006 fdda 	bl	800ad14 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004160:	2200      	movs	r2, #0
 8004162:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f002 f9e0 	bl	800652c <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 800416c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc ff61 	bl	8001038 <lfs_tag_id>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800417e:	4293      	cmp	r3, r2
 8004180:	d205      	bcs.n	800418e <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8004182:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004186:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800418a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800418e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004190:	657b      	str	r3, [r7, #84]	; 0x54
 8004192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004194:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8004196:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800419a:	4618      	mov	r0, r3
 800419c:	f7fc fed7 	bl	8000f4e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80041a0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80041a4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <lfs_dir_orphaningcommit+0x3ac>
 80041ac:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80041b0:	029b      	lsls	r3, r3, #10
 80041b2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80041b6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80041ba:	e000      	b.n	80041be <lfs_dir_orphaningcommit+0x3ae>
 80041bc:	2300      	movs	r3, #0
 80041be:	647b      	str	r3, [r7, #68]	; 0x44
 80041c0:	2300      	movs	r3, #0
 80041c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80041ce:	653b      	str	r3, [r7, #80]	; 0x50
 80041d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041d4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80041d8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80041dc:	2000      	movs	r0, #0
 80041de:	9001      	str	r0, [sp, #4]
 80041e0:	2002      	movs	r0, #2
 80041e2:	9000      	str	r0, [sp, #0]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff fb5f 	bl	80038a8 <lfs_dir_relocatingcommit>
 80041ea:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80041ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fc fe91 	bl	8000f1a <lfs_pair_fromle32>
            if (state < 0) {
 80041f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	da02      	bge.n	8004206 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004204:	e0f1      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8004206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800420a:	2b01      	cmp	r3, #1
 800420c:	d113      	bne.n	8004236 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800420e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8004214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 800421a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800421e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004226:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800422a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004234:	e0cd      	b.n	80043d2 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004236:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800423a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800423e:	4619      	mov	r1, r3
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f002 f85b 	bl	80062fc <lfs_fs_pred>
 8004246:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800424a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <lfs_dir_orphaningcommit+0x452>
 8004252:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004256:	f113 0f02 	cmn.w	r3, #2
 800425a:	d002      	beq.n	8004262 <lfs_dir_orphaningcommit+0x452>
            return err;
 800425c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004260:	e0c3      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004262:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01a      	beq.n	80042a0 <lfs_dir_orphaningcommit+0x490>
 800426a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800426e:	f113 0f02 	cmn.w	r3, #2
 8004272:	d115      	bne.n	80042a0 <lfs_dir_orphaningcommit+0x490>
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <lfs_dir_orphaningcommit+0x488>)
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <lfs_dir_orphaningcommit+0x48c>)
 8004278:	f640 1114 	movw	r1, #2324	; 0x914
 800427c:	4803      	ldr	r0, [pc, #12]	; (800428c <lfs_dir_orphaningcommit+0x47c>)
 800427e:	f006 f8eb 	bl	800a458 <__assert_func>
 8004282:	bf00      	nop
 8004284:	000ffc08 	.word	0x000ffc08
 8004288:	0800b86c 	.word	0x0800b86c
 800428c:	0800b770 	.word	0x0800b770
 8004290:	0800b9ec 	.word	0x0800b9ec
 8004294:	0800ba28 	.word	0x0800ba28
 8004298:	0800ba6c 	.word	0x0800ba6c
 800429c:	0800c148 	.word	0x0800c148

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80042a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042a4:	f113 0f02 	cmn.w	r3, #2
 80042a8:	f000 8093 	beq.w	80043d2 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3330      	adds	r3, #48	; 0x30
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fc ff34 	bl	800111e <lfs_gstate_hasorphans>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d011      	beq.n	80042e0 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80042bc:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80042c0:	425b      	negs	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	b25b      	sxtb	r3, r3
 80042c6:	4619      	mov	r1, r3
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f002 f8f5 	bl	80064b8 <lfs_fs_preporphans>
 80042ce:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80042d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80042da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042de:	e084      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80042e0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80042e4:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3330      	adds	r3, #48	; 0x30
 80042ec:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc ff48 	bl	8001188 <lfs_gstate_hasmovehere>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01c      	beq.n	8004338 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	4618      	mov	r0, r3
 8004304:	f7fc fe98 	bl	8001038 <lfs_tag_id>
 8004308:	4603      	mov	r3, r0
 800430a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800430e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004310:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004312:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004316:	4837      	ldr	r0, [pc, #220]	; (80043f4 <lfs_dir_orphaningcommit+0x5e4>)
 8004318:	9002      	str	r0, [sp, #8]
 800431a:	9201      	str	r2, [sp, #4]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	460b      	mov	r3, r1
 8004320:	f640 1225 	movw	r2, #2341	; 0x925
 8004324:	4934      	ldr	r1, [pc, #208]	; (80043f8 <lfs_dir_orphaningcommit+0x5e8>)
 8004326:	4835      	ldr	r0, [pc, #212]	; (80043fc <lfs_dir_orphaningcommit+0x5ec>)
 8004328:	f006 fcf4 	bl	800ad14 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800432c:	2200      	movs	r2, #0
 800432e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f002 f8fa 	bl	800652c <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 800433e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8004344:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc fe00 	bl	8000f4e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800434e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004352:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <lfs_dir_orphaningcommit+0x55a>
 800435a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800435e:	029b      	lsls	r3, r3, #10
 8004360:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004364:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004368:	e000      	b.n	800436c <lfs_dir_orphaningcommit+0x55c>
 800436a:	2300      	movs	r3, #0
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
 800436e:	2300      	movs	r3, #0
 8004370:	62bb      	str	r3, [r7, #40]	; 0x28
 8004372:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004376:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800437a:	051a      	lsls	r2, r3, #20
 800437c:	4b20      	ldr	r3, [pc, #128]	; (8004400 <lfs_dir_orphaningcommit+0x5f0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004382:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004386:	633b      	str	r3, [r7, #48]	; 0x30
 8004388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800438c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004390:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004394:	2000      	movs	r0, #0
 8004396:	9001      	str	r0, [sp, #4]
 8004398:	2002      	movs	r0, #2
 800439a:	9000      	str	r0, [sp, #0]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fa83 	bl	80038a8 <lfs_dir_relocatingcommit>
 80043a2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80043a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fc fdb5 	bl	8000f1a <lfs_pair_fromle32>
            if (state < 0) {
 80043b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	da02      	bge.n	80043be <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80043b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043bc:	e015      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80043be:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80043c2:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80043c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80043ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80043d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	f43f adfe 	beq.w	8003fd8 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80043dc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <lfs_dir_orphaningcommit+0x5d8>
 80043e4:	2303      	movs	r3, #3
 80043e6:	e000      	b.n	80043ea <lfs_dir_orphaningcommit+0x5da>
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	37e0      	adds	r7, #224	; 0xe0
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bdb0      	pop	{r4, r5, r7, pc}
 80043f2:	bf00      	nop
 80043f4:	0800b86c 	.word	0x0800b86c
 80043f8:	0800b770 	.word	0x0800b770
 80043fc:	0800ba28 	.word	0x0800ba28
 8004400:	000ffc08 	.word	0x000ffc08

08004404 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7ff fcf9 	bl	8003e10 <lfs_dir_orphaningcommit>
 800441e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	da01      	bge.n	800442a <lfs_dir_commit+0x26>
        return orphans;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	e00d      	b.n	8004446 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004430:	2100      	movs	r1, #0
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f002 f91a 	bl	800666c <lfs_fs_deorphan>
 8004438:	6138      	str	r0, [r7, #16]
        if (err) {
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <lfs_dir_commit+0x40>
            return err;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	e000      	b.n	8004446 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800444e:	b590      	push	{r4, r7, lr}
 8004450:	b087      	sub	sp, #28
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	3b08      	subs	r3, #8
 8004466:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <lfs_ctz_index+0x2e>
        return 0;
 8004478:	2300      	movs	r3, #0
 800447a:	e01c      	b.n	80044b6 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3b01      	subs	r3, #1
 8004480:	4618      	mov	r0, r3
 8004482:	f7fc f919 	bl	80006b8 <lfs_popc>
 8004486:	4603      	mov	r3, r0
 8004488:	3302      	adds	r3, #2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	1ad2      	subs	r2, r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	fb02 f303 	mul.w	r3, r2, r3
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	1ad4      	subs	r4, r2, r3
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7fc f907 	bl	80006b8 <lfs_popc>
 80044aa:	4603      	mov	r3, r0
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	1ae2      	subs	r2, r4, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	601a      	str	r2, [r3, #0]
    return i;
 80044b4:	68fb      	ldr	r3, [r7, #12]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd90      	pop	{r4, r7, pc}

080044be <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 80044be:	b590      	push	{r4, r7, lr}
 80044c0:	b08f      	sub	sp, #60	; 0x3c
 80044c2:	af04      	add	r7, sp, #16
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d108      	bne.n	80044e4 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 80044d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d4:	f04f 32ff 	mov.w	r2, #4294967295
 80044d8:	601a      	str	r2, [r3, #0]
        *off = 0;
 80044da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
        return 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e053      	b.n	800458c <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	3b01      	subs	r3, #1
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	f107 0314 	add.w	r3, r7, #20
 80044ee:	4619      	mov	r1, r3
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7ff ffac 	bl	800444e <lfs_ctz_index>
 80044f6:	4603      	mov	r3, r0
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80044fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044fe:	4619      	mov	r1, r3
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff ffa4 	bl	800444e <lfs_ctz_index>
 8004506:	4603      	mov	r3, r0
 8004508:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800450a:	e034      	b.n	8004576 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800450c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	3301      	adds	r3, #1
 8004514:	4618      	mov	r0, r3
 8004516:	f7fc f8b0 	bl	800067a <lfs_npw2>
 800451a:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800451c:	1e5c      	subs	r4, r3, #1
 800451e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004520:	f7fc f8bb 	bl	800069a <lfs_ctz>
 8004524:	4603      	mov	r3, r0
 8004526:	4619      	mov	r1, r3
 8004528:	4620      	mov	r0, r4
 800452a:	f7fc f86f 	bl	800060c <lfs_min>
 800452e:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	0092      	lsls	r2, r2, #2
 8004536:	2104      	movs	r1, #4
 8004538:	9103      	str	r1, [sp, #12]
 800453a:	4639      	mov	r1, r7
 800453c:	9102      	str	r1, [sp, #8]
 800453e:	9201      	str	r2, [sp, #4]
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	2304      	movs	r3, #4
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7fc f93b 	bl	80007c4 <lfs_bd_read>
 800454e:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fc f8ca 	bl	80006ec <lfs_fromle32>
 8004558:	4603      	mov	r3, r0
 800455a:	603b      	str	r3, [r7, #0]
        if (err) {
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <lfs_ctz_find+0xa8>
            return err;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	e012      	b.n	800458c <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004566:	2201      	movs	r2, #1
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	461a      	mov	r2, r3
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	429a      	cmp	r2, r3
 800457c:	d8c6      	bhi.n	800450c <lfs_ctz_find+0x4e>
    }

    *block = head;
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004582:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004584:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004588:	601a      	str	r2, [r3, #0]
    return 0;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	372c      	adds	r7, #44	; 0x2c
 8004590:	46bd      	mov	sp, r7
 8004592:	bd90      	pop	{r4, r7, pc}

08004594 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b092      	sub	sp, #72	; 0x48
 8004598:	af04      	add	r7, sp, #16
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80045a2:	f107 0320 	add.w	r3, r7, #32
 80045a6:	4619      	mov	r1, r3
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7fc ff95 	bl	80014d8 <lfs_alloc>
 80045ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <lfs_ctz_extend+0x26>
            return err;
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	e0e9      	b.n	800478e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	4619      	mov	r1, r3
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7fc fbf2 	bl	8000da8 <lfs_bd_erase>
 80045c4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d006      	beq.n	80045da <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80045d2:	f000 80cb 	beq.w	800476c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	e0d9      	b.n	800478e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 80045da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d107      	bne.n	80045f0 <lfs_ctz_extend+0x5c>
                *block = nblock;
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e4:	601a      	str	r2, [r3, #0]
                *off = 0;
 80045e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
                return 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e0ce      	b.n	800478e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 80045f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f2:	3b01      	subs	r3, #1
 80045f4:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 80045f6:	f107 031c 	add.w	r3, r7, #28
 80045fa:	4619      	mov	r1, r3
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff ff26 	bl	800444e <lfs_ctz_index>
 8004602:	4603      	mov	r3, r0
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3301      	adds	r3, #1
 800460a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	429a      	cmp	r2, r3
 8004616:	d044      	beq.n	80046a2 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
 800461c:	e035      	b.n	800468a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	2301      	movs	r3, #1
 8004626:	9303      	str	r3, [sp, #12]
 8004628:	f107 0317 	add.w	r3, r7, #23
 800462c:	9302      	str	r3, [sp, #8]
 800462e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	4613      	mov	r3, r2
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	2100      	movs	r1, #0
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7fc f8c1 	bl	80007c4 <lfs_bd_read>
 8004642:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <lfs_ctz_extend+0xba>
                        return err;
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	e09f      	b.n	800478e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	2201      	movs	r2, #1
 8004652:	9203      	str	r2, [sp, #12]
 8004654:	f107 0217 	add.w	r2, r7, #23
 8004658:	9202      	str	r2, [sp, #8]
 800465a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800465c:	9201      	str	r2, [sp, #4]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2301      	movs	r3, #1
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7fc faf2 	bl	8000c50 <lfs_bd_prog>
 800466c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004676:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800467a:	d101      	bne.n	8004680 <lfs_ctz_extend+0xec>
                            goto relocate;
 800467c:	bf00      	nop
                    goto relocate;
 800467e:	e075      	b.n	800476c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8004680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8004682:	e084      	b.n	800478e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004686:	3301      	adds	r3, #1
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468e:	429a      	cmp	r2, r3
 8004690:	d3c5      	bcc.n	800461e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8004692:	6a3a      	ldr	r2, [r7, #32]
 8004694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004696:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469c:	601a      	str	r2, [r3, #0]
                return 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	e075      	b.n	800478e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	3301      	adds	r3, #1
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80046a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046aa:	f7fb fff6 	bl	800069a <lfs_ctz>
 80046ae:	4603      	mov	r3, r0
 80046b0:	3301      	adds	r3, #1
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 80046b8:	2300      	movs	r3, #0
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30
 80046bc:	e049      	b.n	8004752 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fc f81e 	bl	8000702 <lfs_tole32>
 80046c6:	4603      	mov	r3, r0
 80046c8:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ce:	0092      	lsls	r2, r2, #2
 80046d0:	2104      	movs	r1, #4
 80046d2:	9103      	str	r1, [sp, #12]
 80046d4:	f107 0118 	add.w	r1, r7, #24
 80046d8:	9102      	str	r1, [sp, #8]
 80046da:	9201      	str	r2, [sp, #4]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	2301      	movs	r3, #1
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f7fc fab3 	bl	8000c50 <lfs_bd_prog>
 80046ea:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fb fffc 	bl	80006ec <lfs_fromle32>
 80046f4:	4603      	mov	r3, r0
 80046f6:	61bb      	str	r3, [r7, #24]
                if (err) {
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004704:	d034      	beq.n	8004770 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	e041      	b.n	800478e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	3b01      	subs	r3, #1
 800470e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004710:	429a      	cmp	r2, r3
 8004712:	d01b      	beq.n	800474c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004718:	0092      	lsls	r2, r2, #2
 800471a:	2104      	movs	r1, #4
 800471c:	9103      	str	r1, [sp, #12]
 800471e:	f107 0118 	add.w	r1, r7, #24
 8004722:	9102      	str	r1, [sp, #8]
 8004724:	9201      	str	r2, [sp, #4]
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	2304      	movs	r3, #4
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	2100      	movs	r1, #0
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7fc f848 	bl	80007c4 <lfs_bd_read>
 8004734:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb ffd7 	bl	80006ec <lfs_fromle32>
 800473e:	4603      	mov	r3, r0
 8004740:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <lfs_ctz_extend+0x1b8>
                        return err;
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	e020      	b.n	800478e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	3301      	adds	r3, #1
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
 8004752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	429a      	cmp	r2, r3
 8004758:	d3b1      	bcc.n	80046be <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800475a:	6a3a      	ldr	r2, [r7, #32]
 800475c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800475e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	009a      	lsls	r2, r3, #2
 8004764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004766:	601a      	str	r2, [r3, #0]
            return 0;
 8004768:	2300      	movs	r3, #0
 800476a:	e010      	b.n	800478e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 800476c:	bf00      	nop
 800476e:	e000      	b.n	8004772 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8004770:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	4a08      	ldr	r2, [pc, #32]	; (8004798 <lfs_ctz_extend+0x204>)
 8004776:	9200      	str	r2, [sp, #0]
 8004778:	f640 22de 	movw	r2, #2782	; 0xade
 800477c:	4907      	ldr	r1, [pc, #28]	; (800479c <lfs_ctz_extend+0x208>)
 800477e:	4808      	ldr	r0, [pc, #32]	; (80047a0 <lfs_ctz_extend+0x20c>)
 8004780:	f006 fac8 	bl	800ad14 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7fb fff6 	bl	8000778 <lfs_cache_drop>
    while (true) {
 800478c:	e709      	b.n	80045a2 <lfs_ctz_extend+0xe>
    }
}
 800478e:	4618      	mov	r0, r3
 8004790:	3738      	adds	r7, #56	; 0x38
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	0800b86c 	.word	0x0800b86c
 800479c:	0800b770 	.word	0x0800b770
 80047a0:	0800b8ec 	.word	0x0800b8ec

080047a4 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b090      	sub	sp, #64	; 0x40
 80047a8:	af04      	add	r7, sp, #16
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <lfs_ctz_traverse+0x18>
        return 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e06b      	b.n	8004894 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	3b01      	subs	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	f107 031c 	add.w	r3, r7, #28
 80047c6:	4619      	mov	r1, r3
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff fe40 	bl	800444e <lfs_ctz_index>
 80047ce:	4603      	mov	r3, r0
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 80047d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80047d8:	4798      	blx	r3
 80047da:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <lfs_ctz_traverse+0x42>
            return err;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	e056      	b.n	8004894 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <lfs_ctz_traverse+0x4c>
            return 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e051      	b.n	8004894 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	f1c3 0302 	rsb	r3, r3, #2
 80047fa:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 80047fc:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 80047fe:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004800:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004802:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004804:	9303      	str	r3, [sp, #12]
 8004806:	f107 0314 	add.w	r3, r7, #20
 800480a:	9302      	str	r3, [sp, #8]
 800480c:	2300      	movs	r3, #0
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7fb ffd2 	bl	80007c4 <lfs_bd_read>
 8004820:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	4618      	mov	r0, r3
 8004826:	f7fb ff61 	bl	80006ec <lfs_fromle32>
 800482a:	4603      	mov	r3, r0
 800482c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	4618      	mov	r0, r3
 8004832:	f7fb ff5b 	bl	80006ec <lfs_fromle32>
 8004836:	4603      	mov	r3, r0
 8004838:	61bb      	str	r3, [r7, #24]
        if (err) {
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <lfs_ctz_traverse+0xa0>
            return err;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	e027      	b.n	8004894 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8004844:	2300      	movs	r3, #0
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
 8004848:	e012      	b.n	8004870 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	3330      	adds	r3, #48	; 0x30
 8004850:	443b      	add	r3, r7
 8004852:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004858:	4611      	mov	r1, r2
 800485a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800485c:	4798      	blx	r3
 800485e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <lfs_ctz_traverse+0xc6>
                return err;
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	e014      	b.n	8004894 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	3301      	adds	r3, #1
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	3b01      	subs	r3, #1
 8004874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004876:	429a      	cmp	r2, r3
 8004878:	dbe7      	blt.n	800484a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	3b01      	subs	r3, #1
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	3330      	adds	r3, #48	; 0x30
 8004882:	443b      	add	r3, r7
 8004884:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004888:	603b      	str	r3, [r7, #0]
        index -= count;
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8004892:	e79e      	b.n	80047d2 <lfs_ctz_traverse+0x2e>
    }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3730      	adds	r7, #48	; 0x30
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 800489c:	b5b0      	push	{r4, r5, r7, lr}
 800489e:	b09a      	sub	sp, #104	; 0x68
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f002 f87d 	bl	80069b4 <lfs_fs_forceconsistency>
 80048ba:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 80048bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <lfs_file_rawopencfg+0x2a>
            return err;
 80048c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c4:	e1b0      	b.n	8004c28 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80048ca:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2200      	movs	r2, #0
 80048d6:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2200      	movs	r2, #0
 80048dc:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2200      	movs	r2, #0
 80048e2:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f103 0108 	add.w	r1, r3, #8
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	3304      	adds	r3, #4
 80048ee:	1d3a      	adds	r2, r7, #4
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7fe f8c1 	bl	8002a78 <lfs_dir_find>
 80048f6:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 80048f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	da0c      	bge.n	8004918 <lfs_file_rawopencfg+0x7c>
 80048fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004900:	f113 0f02 	cmn.w	r3, #2
 8004904:	d105      	bne.n	8004912 <lfs_file_rawopencfg+0x76>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	889b      	ldrh	r3, [r3, #4]
 800490a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800490e:	4293      	cmp	r3, r2
 8004910:	d102      	bne.n	8004918 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8004912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004914:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004916:	e17c      	b.n	8004c12 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2201      	movs	r2, #1
 800491c:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f7fc fd70 	bl	8001406 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004928:	f113 0f02 	cmn.w	r3, #2
 800492c:	d14e      	bne.n	80049cc <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d103      	bne.n	8004940 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8004938:	f06f 0301 	mvn.w	r3, #1
 800493c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800493e:	e168      	b.n	8004c12 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fb fc64 	bl	8000210 <strlen>
 8004948:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004950:	429a      	cmp	r2, r3
 8004952:	d903      	bls.n	800495c <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8004954:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004958:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800495a:	e15a      	b.n	8004c12 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f103 0108 	add.w	r1, r3, #8
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	889b      	ldrh	r3, [r3, #4]
 8004966:	029b      	lsls	r3, r3, #10
 8004968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800496c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004972:	2300      	movs	r3, #0
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	889b      	ldrh	r3, [r3, #4]
 800497a:	029a      	lsls	r2, r3, #10
 800497c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497e:	4313      	orrs	r3, r2
 8004980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	889b      	ldrh	r3, [r3, #4]
 800498e:	029b      	lsls	r3, r3, #10
 8004990:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800499a:	2300      	movs	r3, #0
 800499c:	643b      	str	r3, [r7, #64]	; 0x40
 800499e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80049a2:	2303      	movs	r3, #3
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff fd2d 	bl	8004404 <lfs_dir_commit>
 80049aa:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80049ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ae:	f113 0f1c 	cmn.w	r3, #28
 80049b2:	d001      	beq.n	80049b8 <lfs_file_rawopencfg+0x11c>
 80049b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b6:	e001      	b.n	80049bc <lfs_file_rawopencfg+0x120>
 80049b8:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80049bc:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 80049be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f040 8125 	bne.w	8004c10 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80049c6:	4b9a      	ldr	r3, [pc, #616]	; (8004c30 <lfs_file_rawopencfg+0x394>)
 80049c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80049ca:	e044      	b.n	8004a56 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 80049d6:	f06f 0310 	mvn.w	r3, #16
 80049da:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80049dc:	e119      	b.n	8004c12 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80049de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fc faff 	bl	8000fe4 <lfs_tag_type3>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d003      	beq.n	80049f4 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 80049ec:	f06f 0314 	mvn.w	r3, #20
 80049f0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80049f2:	e10e      	b.n	8004c12 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00e      	beq.n	8004a1c <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	889b      	ldrh	r3, [r3, #4]
 8004a02:	029b      	lsls	r3, r3, #10
 8004a04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a0c:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
 8004a1a:	e01c      	b.n	8004a56 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	889b      	ldrh	r3, [r3, #4]
 8004a26:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a2c:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004a34:	9200      	str	r2, [sp, #0]
 8004a36:	4a7f      	ldr	r2, [pc, #508]	; (8004c34 <lfs_file_rawopencfg+0x398>)
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7fc fee7 	bl	800180c <lfs_dir_get>
 8004a3e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8004a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	da02      	bge.n	8004a4c <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8004a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a48:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004a4a:	e0e2      	b.n	8004c12 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	3328      	adds	r3, #40	; 0x28
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fc fbf9 	bl	8001248 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004a56:	2300      	movs	r3, #0
 8004a58:	657b      	str	r3, [r7, #84]	; 0x54
 8004a5a:	e063      	b.n	8004b24 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d03c      	beq.n	8004ae2 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a76:	4613      	mov	r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004a86:	051a      	lsls	r2, r3, #20
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	889b      	ldrh	r3, [r3, #4]
 8004a8c:	029b      	lsls	r3, r3, #10
 8004a8e:	ea42 0103 	orr.w	r1, r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a96:	6858      	ldr	r0, [r3, #4]
 8004a98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4403      	add	r3, r0
 8004aa4:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004aa6:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aae:	6859      	ldr	r1, [r3, #4]
 8004ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4a5d      	ldr	r2, [pc, #372]	; (8004c38 <lfs_file_rawopencfg+0x39c>)
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7fc fea0 	bl	800180c <lfs_dir_get>
 8004acc:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8004ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	da06      	bge.n	8004ae2 <lfs_file_rawopencfg+0x246>
 8004ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad6:	f113 0f02 	cmn.w	r3, #2
 8004ada:	d002      	beq.n	8004ae2 <lfs_file_rawopencfg+0x246>
                err = res;
 8004adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ade:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004ae0:	e097      	b.n	8004c12 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d017      	beq.n	8004b1e <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004af6:	4613      	mov	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	440b      	add	r3, r1
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d903      	bls.n	8004b12 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8004b0a:	f06f 031b 	mvn.w	r3, #27
 8004b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004b10:	e07f      	b.n	8004c12 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b20:	3301      	adds	r3, #1
 8004b22:	657b      	str	r3, [r7, #84]	; 0x54
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d395      	bcc.n	8004a5c <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b44:	e010      	b.n	8004b68 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fb fdfc 	bl	800074a <lfs_malloc>
 8004b52:	4602      	mov	r2, r0
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8004b60:	f06f 030b 	mvn.w	r3, #11
 8004b64:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004b66:	e054      	b.n	8004c12 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	3340      	adds	r3, #64	; 0x40
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7fb fe11 	bl	8000796 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8004b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fc fa34 	bl	8000fe4 <lfs_tag_type3>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f240 2301 	movw	r3, #513	; 0x201
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d141      	bne.n	8004c0c <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f06f 0201 	mvn.w	r2, #1
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8004b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc fa60 	bl	8001058 <lfs_tag_size>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d020      	beq.n	8004c0c <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	889b      	ldrh	r3, [r3, #4]
 8004bd4:	029c      	lsls	r4, r3, #10
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bda:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fb fd14 	bl	800060c <lfs_min>
 8004be4:	4603      	mov	r3, r0
 8004be6:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004be8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	4a0f      	ldr	r2, [pc, #60]	; (8004c34 <lfs_file_rawopencfg+0x398>)
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7fc fe07 	bl	800180c <lfs_dir_get>
 8004bfe:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8004c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da02      	bge.n	8004c0c <lfs_file_rawopencfg+0x370>
                err = res;
 8004c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c08:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004c0a:	e002      	b.n	8004c12 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e00b      	b.n	8004c28 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8004c10:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f823 	bl	8004c6c <lfs_file_rawclose>
    return err;
 8004c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3760      	adds	r7, #96	; 0x60
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c30:	20100000 	.word	0x20100000
 8004c34:	700ffc00 	.word	0x700ffc00
 8004c38:	7ffffc00 	.word	0x7ffffc00

08004c3c <lfs_file_rawopen>:

static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8004c4a:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <lfs_file_rawopen+0x2c>)
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff fe21 	bl	800489c <lfs_file_rawopencfg>
 8004c5a:	6178      	str	r0, [r7, #20]
    return err;
 8004c5c:	697b      	ldr	r3, [r7, #20]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	0800c160 	.word	0x0800c160

08004c6c <lfs_file_rawclose>:

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f9e5 	bl	8005048 <lfs_file_rawsync>
 8004c7e:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fc fb9d 	bl	80013c2 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fb fd63 	bl	8000762 <lfs_free>
    }

    return err;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8004ca8:	b590      	push	{r4, r7, lr}
 8004caa:	b08d      	sub	sp, #52	; 0x34
 8004cac:	af06      	add	r7, sp, #24
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004cb2:	f107 030c 	add.w	r3, r7, #12
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fc fc0d 	bl	80014d8 <lfs_alloc>
 8004cbe:	6138      	str	r0, [r7, #16]
        if (err) {
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <lfs_file_relocate+0x22>
            return err;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	e0bb      	b.n	8004e42 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc f86a 	bl	8000da8 <lfs_bd_erase>
 8004cd4:	6138      	str	r0, [r7, #16]
        if (err) {
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d006      	beq.n	8004cea <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004ce2:	f000 809b 	beq.w	8004e1c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	e0ab      	b.n	8004e42 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e069      	b.n	8004dc4 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d027      	beq.n	8004d4c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f103 0008 	add.w	r0, r3, #8
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	889b      	ldrh	r3, [r3, #4]
 8004d14:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8004d16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d1e:	2101      	movs	r1, #1
 8004d20:	9105      	str	r1, [sp, #20]
 8004d22:	f107 010b 	add.w	r1, r7, #11
 8004d26:	9104      	str	r1, [sp, #16]
 8004d28:	6979      	ldr	r1, [r7, #20]
 8004d2a:	9103      	str	r1, [sp, #12]
 8004d2c:	9302      	str	r3, [sp, #8]
 8004d2e:	4b47      	ldr	r3, [pc, #284]	; (8004e4c <lfs_file_relocate+0x1a4>)
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	9200      	str	r2, [sp, #0]
 8004d34:	4623      	mov	r3, r4
 8004d36:	2200      	movs	r2, #0
 8004d38:	4601      	mov	r1, r0
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fc fd81 	bl	8001842 <lfs_dir_getread>
 8004d40:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01e      	beq.n	8004d86 <lfs_file_relocate+0xde>
                    return err;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	e07a      	b.n	8004e42 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8004d52:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	1ad4      	subs	r4, r2, r3
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	2201      	movs	r2, #1
 8004d62:	9203      	str	r2, [sp, #12]
 8004d64:	f107 020b 	add.w	r2, r7, #11
 8004d68:	9202      	str	r2, [sp, #8]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	9201      	str	r2, [sp, #4]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4623      	mov	r3, r4
 8004d72:	4602      	mov	r2, r0
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fb fd25 	bl	80007c4 <lfs_bd_read>
 8004d7a:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <lfs_file_relocate+0xde>
                    return err;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	e05d      	b.n	8004e42 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f103 0110 	add.w	r1, r3, #16
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	9203      	str	r2, [sp, #12]
 8004d94:	f107 020b 	add.w	r2, r7, #11
 8004d98:	9202      	str	r2, [sp, #8]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	9201      	str	r2, [sp, #4]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	2301      	movs	r3, #1
 8004da2:	4602      	mov	r2, r0
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fb ff53 	bl	8000c50 <lfs_bd_prog>
 8004daa:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004db8:	d032      	beq.n	8004e20 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	e041      	b.n	8004e42 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d390      	bcc.n	8004cf0 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69d9      	ldr	r1, [r3, #28]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f005 fbb5 	bl	800a54c <memcpy>
        file->cache.block = lfs->pcache.block;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3310      	adds	r3, #16
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fb fcc8 	bl	8000796 <lfs_cache_zero>

        file->block = nblock;
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e012      	b.n	8004e42 <lfs_file_relocate+0x19a>
                goto relocate;
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <lfs_file_relocate+0x17a>
                    goto relocate;
 8004e20:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <lfs_file_relocate+0x1a8>)
 8004e26:	9200      	str	r2, [sp, #0]
 8004e28:	f640 4212 	movw	r2, #3090	; 0xc12
 8004e2c:	4909      	ldr	r1, [pc, #36]	; (8004e54 <lfs_file_relocate+0x1ac>)
 8004e2e:	480a      	ldr	r0, [pc, #40]	; (8004e58 <lfs_file_relocate+0x1b0>)
 8004e30:	f005 ff70 	bl	800ad14 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3310      	adds	r3, #16
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fb fc9c 	bl	8000778 <lfs_cache_drop>
    while (true) {
 8004e40:	e737      	b.n	8004cb2 <lfs_file_relocate+0xa>
    }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd90      	pop	{r4, r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	fff7fc00 	.word	0xfff7fc00
 8004e50:	0800b86c 	.word	0x0800b86c
 8004e54:	0800b770 	.word	0x0800b770
 8004e58:	0800b8ec 	.word	0x0800b8ec

08004e5c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc fb12 	bl	8001498 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ff16 	bl	8004ca8 <lfs_file_relocate>
 8004e7c:	60f8      	str	r0, [r7, #12]
    if (err) {
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <lfs_file_outline+0x2c>
        return err;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	e006      	b.n	8004e96 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b09f      	sub	sp, #124	; 0x7c
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d011      	beq.n	8004eda <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	3340      	adds	r3, #64	; 0x40
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7fb fc55 	bl	8000778 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80a4 	beq.w	8005030 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eec:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d176      	bne.n	8004fe8 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8004efa:	f107 030c 	add.w	r3, r7, #12
 8004efe:	2254      	movs	r2, #84	; 0x54
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f005 fb30 	bl	800a568 <memset>
                .ctz.head = file->ctz.head,
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8004f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f14:	2301      	movs	r3, #1
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8004f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8004f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fb fc22 	bl	8000778 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8004f34:	e02b      	b.n	8004f8e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8004f36:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8004f3a:	f107 010c 	add.w	r1, r7, #12
 8004f3e:	2301      	movs	r3, #1
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f90d 	bl	8005160 <lfs_file_flushedread>
 8004f46:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8004f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	da01      	bge.n	8004f52 <lfs_file_flush+0xb2>
                    return res;
 8004f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f50:	e06f      	b.n	8005032 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8004f52:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8004f56:	2301      	movs	r3, #1
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa08 	bl	8005370 <lfs_file_flushedwrite>
 8004f60:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8004f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	da01      	bge.n	8004f6c <lfs_file_flush+0xcc>
                    return res;
 8004f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f6a:	e062      	b.n	8005032 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d00b      	beq.n	8004f8e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8004f76:	f107 030c 	add.w	r3, r7, #12
 8004f7a:	3340      	adds	r3, #64	; 0x40
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fb fbfa 	bl	8000778 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fb fbf5 	bl	8000778 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3cd      	bcc.n	8004f36 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fb fda3 	bl	8000af0 <lfs_bd_flush>
 8004faa:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8004fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d026      	beq.n	8005000 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8004fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fb4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004fb8:	d001      	beq.n	8004fbe <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8004fba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fbc:	e039      	b.n	8005032 <lfs_file_flush+0x192>
                        goto relocate;
 8004fbe:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	; (800503c <lfs_file_flush+0x19c>)
 8004fc6:	9200      	str	r2, [sp, #0]
 8004fc8:	f640 4261 	movw	r2, #3169	; 0xc61
 8004fcc:	491c      	ldr	r1, [pc, #112]	; (8005040 <lfs_file_flush+0x1a0>)
 8004fce:	481d      	ldr	r0, [pc, #116]	; (8005044 <lfs_file_flush+0x1a4>)
 8004fd0:	f005 fea0 	bl	800ad14 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff fe66 	bl	8004ca8 <lfs_file_relocate>
 8004fdc:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8004fde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0da      	beq.n	8004f9a <lfs_file_flush+0xfa>
                    return err;
 8004fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fe6:	e024      	b.n	8005032 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f7fb fafa 	bl	80005ec <lfs_max>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8004ffe:	e000      	b.n	8005002 <lfs_file_flush+0x162>
                break;
 8005000:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800502e:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3774      	adds	r7, #116	; 0x74
 8005036:	46bd      	mov	sp, r7
 8005038:	bd90      	pop	{r4, r7, pc}
 800503a:	bf00      	nop
 800503c:	0800b86c 	.word	0x0800b86c
 8005040:	0800b770 	.word	0x0800b770
 8005044:	0800b8ec 	.word	0x0800b8ec

08005048 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b090      	sub	sp, #64	; 0x40
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800505e:	2300      	movs	r3, #0
 8005060:	e07a      	b.n	8005158 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ff1b 	bl	8004ea0 <lfs_file_flush>
 800506a:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 800507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005080:	e06a      	b.n	8005158 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d063      	beq.n	8005156 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	3308      	adds	r3, #8
 8005092:	4618      	mov	r0, r3
 8005094:	f7fb fecf 	bl	8000e36 <lfs_pair_isnull>
 8005098:	4603      	mov	r3, r0
 800509a:	f083 0301 	eor.w	r3, r3, #1
 800509e:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d058      	beq.n	8005156 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80050b0:	f240 2301 	movw	r3, #513	; 0x201
 80050b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ba:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
 80050c2:	e014      	b.n	80050ee <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80050c4:	f240 2302 	movw	r3, #514	; 0x202
 80050c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050d0:	3228      	adds	r2, #40	; 0x28
 80050d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050d6:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80050da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fc f8ca 	bl	8001278 <lfs_ctz_tole32>
            buffer = &ctz;
 80050e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050e8:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 80050ea:	2308      	movs	r3, #8
 80050ec:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	f103 0108 	add.w	r1, r3, #8
 80050f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80050f6:	051a      	lsls	r2, r3, #20
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	889b      	ldrh	r3, [r3, #4]
 80050fc:	029b      	lsls	r3, r3, #10
 80050fe:	431a      	orrs	r2, r3
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	889b      	ldrh	r3, [r3, #4]
 800510e:	029a      	lsls	r2, r3, #10
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	4313      	orrs	r3, r2
 8005118:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 800511c:	623b      	str	r3, [r7, #32]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
 8005126:	f107 0218 	add.w	r2, r7, #24
 800512a:	2302      	movs	r3, #2
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7ff f969 	bl	8004404 <lfs_dir_commit>
 8005132:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	e006      	b.n	8005158 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3740      	adds	r7, #64	; 0x40
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005160:	b5b0      	push	{r4, r5, r7, lr}
 8005162:	b090      	sub	sp, #64	; 0x40
 8005164:	af06      	add	r7, sp, #24
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	429a      	cmp	r2, r3
 8005180:	d301      	bcc.n	8005186 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005182:	2300      	movs	r3, #0
 8005184:	e0b7      	b.n	80052f6 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	4619      	mov	r1, r3
 8005192:	6838      	ldr	r0, [r7, #0]
 8005194:	f7fb fa3a 	bl	800060c <lfs_min>
 8005198:	6038      	str	r0, [r7, #0]
    nsize = size;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 800519e:	e0a5      	b.n	80052ec <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d006      	beq.n	80051ba <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b4:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d130      	bne.n	800521c <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d11c      	bne.n	8005200 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	3138      	adds	r1, #56	; 0x38
 80051dc:	68b8      	ldr	r0, [r7, #8]
 80051de:	303c      	adds	r0, #60	; 0x3c
 80051e0:	9003      	str	r0, [sp, #12]
 80051e2:	9102      	str	r1, [sp, #8]
 80051e4:	9201      	str	r2, [sp, #4]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	462b      	mov	r3, r5
 80051ea:	4622      	mov	r2, r4
 80051ec:	2100      	movs	r1, #0
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff f965 	bl	80044be <lfs_ctz_find>
 80051f4:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <lfs_file_flushedread+0xb0>
                    return err;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	e07a      	b.n	80052f6 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f06f 0201 	mvn.w	r2, #1
 8005206:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	4619      	mov	r1, r3
 800522a:	6a38      	ldr	r0, [r7, #32]
 800522c:	f7fb f9ee 	bl	800060c <lfs_min>
 8005230:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d026      	beq.n	800528c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f103 0408 	add.w	r4, r3, #8
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 800524e:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	889b      	ldrh	r3, [r3, #4]
 8005254:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8005256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800525a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005262:	69b8      	ldr	r0, [r7, #24]
 8005264:	9005      	str	r0, [sp, #20]
 8005266:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005268:	9004      	str	r0, [sp, #16]
 800526a:	9103      	str	r1, [sp, #12]
 800526c:	9302      	str	r3, [sp, #8]
 800526e:	4b24      	ldr	r3, [pc, #144]	; (8005300 <lfs_file_flushedread+0x1a0>)
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	9200      	str	r2, [sp, #0]
 8005274:	462b      	mov	r3, r5
 8005276:	2200      	movs	r2, #0
 8005278:	4621      	mov	r1, r4
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7fc fae1 	bl	8001842 <lfs_dir_getread>
 8005280:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01d      	beq.n	80052c4 <lfs_file_flushedread+0x164>
                return err;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	e034      	b.n	80052f6 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8005296:	69dc      	ldr	r4, [r3, #28]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052a0:	69b9      	ldr	r1, [r7, #24]
 80052a2:	9103      	str	r1, [sp, #12]
 80052a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052a6:	9102      	str	r1, [sp, #8]
 80052a8:	9201      	str	r2, [sp, #4]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	4623      	mov	r3, r4
 80052ae:	4602      	mov	r2, r0
 80052b0:	2100      	movs	r1, #0
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f7fb fa86 	bl	80007c4 <lfs_bd_read>
 80052b8:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <lfs_file_flushedread+0x164>
                return err;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	e018      	b.n	80052f6 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	441a      	add	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	441a      	add	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80052dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	4413      	add	r3, r2
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f47f af56 	bne.w	80051a0 <lfs_file_flushedread+0x40>
    }

    return size;
 80052f4:	683b      	ldr	r3, [r7, #0]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3728      	adds	r7, #40	; 0x28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bdb0      	pop	{r4, r5, r7, pc}
 80052fe:	bf00      	nop
 8005300:	fff7fc00 	.word	0xfff7fc00

08005304 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <lfs_file_rawread+0x28>
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <lfs_file_rawread+0x60>)
 8005320:	4a11      	ldr	r2, [pc, #68]	; (8005368 <lfs_file_rawread+0x64>)
 8005322:	f640 41ec 	movw	r1, #3308	; 0xcec
 8005326:	4811      	ldr	r0, [pc, #68]	; (800536c <lfs_file_rawread+0x68>)
 8005328:	f005 f896 	bl	800a458 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d009      	beq.n	800534c <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff fdb0 	bl	8004ea0 <lfs_file_flush>
 8005340:	6178      	str	r0, [r7, #20]
        if (err) {
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <lfs_file_rawread+0x48>
            return err;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	e006      	b.n	800535a <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff ff04 	bl	8005160 <lfs_file_flushedread>
 8005358:	4603      	mov	r3, r0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	0800ba94 	.word	0x0800ba94
 8005368:	0800c16c 	.word	0x0800c16c
 800536c:	0800b770 	.word	0x0800b770

08005370 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b090      	sub	sp, #64	; 0x40
 8005374:	af04      	add	r7, sp, #16
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 810c 	beq.w	80055ac <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	441a      	add	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f7fb f922 	bl	80005ec <lfs_max>
 80053a8:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 80053ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80053c0:	08db      	lsrs	r3, r3, #3
 80053c2:	e003      	b.n	80053cc <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053c8:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80053ca:	08db      	lsrs	r3, r3, #3
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f7fb f91c 	bl	800060c <lfs_min>
 80053d4:	4603      	mov	r3, r0
 80053d6:	4619      	mov	r1, r3
 80053d8:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80053dc:	f7fb f916 	bl	800060c <lfs_min>
 80053e0:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80053e2:	429c      	cmp	r4, r3
 80053e4:	f240 80e2 	bls.w	80055ac <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f7ff fd36 	bl	8004e5c <lfs_file_outline>
 80053f0:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80d9 	beq.w	80055ac <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	e0d5      	b.n	80055b6 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d006      	beq.n	8005424 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800541e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d16b      	bne.n	80054fc <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d157      	bne.n	80054e0 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d12d      	bne.n	8005498 <lfs_file_flushedwrite+0x128>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005440:	2b00      	cmp	r3, #0
 8005442:	d029      	beq.n	8005498 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005456:	3a01      	subs	r2, #1
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	3138      	adds	r1, #56	; 0x38
 800545c:	68b8      	ldr	r0, [r7, #8]
 800545e:	303c      	adds	r0, #60	; 0x3c
 8005460:	9003      	str	r0, [sp, #12]
 8005462:	9102      	str	r1, [sp, #8]
 8005464:	9201      	str	r2, [sp, #4]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	462b      	mov	r3, r5
 800546a:	4622      	mov	r2, r4
 800546c:	2100      	movs	r1, #0
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff f825 	bl	80044be <lfs_ctz_find>
 8005474:	6238      	str	r0, [r7, #32]
                    if (err) {
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	e094      	b.n	80055b6 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	3340      	adds	r3, #64	; 0x40
 8005490:	4619      	mov	r1, r3
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7fb f97f 	bl	8000796 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7fb fffd 	bl	8001498 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80054a4:	68fc      	ldr	r4, [r7, #12]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	3238      	adds	r2, #56	; 0x38
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	313c      	adds	r1, #60	; 0x3c
 80054b6:	9102      	str	r1, [sp, #8]
 80054b8:	9201      	str	r2, [sp, #4]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	462b      	mov	r3, r5
 80054be:	4622      	mov	r2, r4
 80054c0:	4601      	mov	r1, r0
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff f866 	bl	8004594 <lfs_ctz_extend>
 80054c8:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00f      	beq.n	80054f0 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	e06a      	b.n	80055b6 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f06f 0201 	mvn.w	r2, #1
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005500:	69da      	ldr	r2, [r3, #28]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	4619      	mov	r1, r3
 800550a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800550c:	f7fb f87e 	bl	800060c <lfs_min>
 8005510:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005518:	68fc      	ldr	r4, [r7, #12]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005522:	69b9      	ldr	r1, [r7, #24]
 8005524:	9103      	str	r1, [sp, #12]
 8005526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005528:	9102      	str	r1, [sp, #8]
 800552a:	9201      	str	r2, [sp, #4]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2301      	movs	r3, #1
 8005530:	4622      	mov	r2, r4
 8005532:	4601      	mov	r1, r0
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7fb fb8b 	bl	8000c50 <lfs_bd_prog>
 800553a:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01c      	beq.n	800557c <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005548:	d007      	beq.n	800555a <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	e02d      	b.n	80055b6 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 800555a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7ff fba2 	bl	8004ca8 <lfs_file_relocate>
 8005564:	6178      	str	r0, [r7, #20]
            if (err) {
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0d2      	beq.n	8005512 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	e01c      	b.n	80055b6 <lfs_file_flushedwrite+0x246>
            break;
 800557c:	bf00      	nop
            }
        }

        file->pos += diff;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	441a      	add	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	441a      	add	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	4413      	add	r3, r2
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 800559e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f7fb ff76 	bl	8001498 <lfs_alloc_ack>
    while (nsize > 0) {
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f47f af2b 	bne.w	800540a <lfs_file_flushedwrite+0x9a>
    }

    return size;
 80055b4:	683b      	ldr	r3, [r7, #0]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3730      	adds	r7, #48	; 0x30
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080055c0 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	; 0x28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <lfs_file_rawwrite+0x28>
 80055da:	4b38      	ldr	r3, [pc, #224]	; (80056bc <lfs_file_rawwrite+0xfc>)
 80055dc:	4a38      	ldr	r2, [pc, #224]	; (80056c0 <lfs_file_rawwrite+0x100>)
 80055de:	f640 5157 	movw	r1, #3415	; 0xd57
 80055e2:	4838      	ldr	r0, [pc, #224]	; (80056c4 <lfs_file_rawwrite+0x104>)
 80055e4:	f004 ff38 	bl	800a458 <__assert_func>

    if (file->flags & LFS_F_READING) {
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d009      	beq.n	8005608 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff fc52 	bl	8004ea0 <lfs_file_flush>
 80055fc:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <lfs_file_rawwrite+0x48>
            return err;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	e055      	b.n	80056b4 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <lfs_file_rawwrite+0x68>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	429a      	cmp	r2, r3
 800561e:	d203      	bcs.n	8005628 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	441a      	add	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005634:	429a      	cmp	r2, r3
 8005636:	d902      	bls.n	800563e <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005638:	f06f 031a 	mvn.w	r3, #26
 800563c:	e03a      	b.n	80056b4 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d121      	bne.n	800568e <lfs_file_rawwrite+0xce>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	429a      	cmp	r2, r3
 8005654:	d91b      	bls.n	800568e <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565a:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8005664:	e00e      	b.n	8005684 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8005666:	2300      	movs	r3, #0
 8005668:	75fb      	strb	r3, [r7, #23]
 800566a:	f107 0217 	add.w	r2, r7, #23
 800566e:	2301      	movs	r3, #1
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7ff fe7c 	bl	8005370 <lfs_file_flushedwrite>
 8005678:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2b00      	cmp	r3, #0
 800567e:	da01      	bge.n	8005684 <lfs_file_rawwrite+0xc4>
                return res;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	e017      	b.n	80056b4 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005688:	6a3a      	ldr	r2, [r7, #32]
 800568a:	429a      	cmp	r2, r3
 800568c:	d8eb      	bhi.n	8005666 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7ff fe6b 	bl	8005370 <lfs_file_flushedwrite>
 800569a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	da01      	bge.n	80056a6 <lfs_file_rawwrite+0xe6>
        return nsize;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	e006      	b.n	80056b4 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 80056b2:	69bb      	ldr	r3, [r7, #24]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3728      	adds	r7, #40	; 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	0800bac4 	.word	0x0800bac4
 80056c0:	0800c180 	.word	0x0800c180
 80056c4:	0800b770 	.word	0x0800b770

080056c8 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08c      	sub	sp, #48	; 0x30
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d102      	bne.n	80056e8 <lfs_file_rawseek+0x20>
        npos = off;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e6:	e025      	b.n	8005734 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d10f      	bne.n	800570e <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f2:	461a      	mov	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4413      	add	r3, r2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	da02      	bge.n	8005702 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 80056fc:	f06f 0315 	mvn.w	r3, #21
 8005700:	e067      	b.n	80057d2 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4413      	add	r3, r2
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800570c:	e012      	b.n	8005734 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d10f      	bne.n	8005734 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f875 	bl	8005806 <lfs_file_rawsize>
 800571c:	4602      	mov	r2, r0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4413      	add	r3, r2
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	2b00      	cmp	r3, #0
 8005728:	da02      	bge.n	8005730 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 800572a:	f06f 0315 	mvn.w	r3, #21
 800572e:	e050      	b.n	80057d2 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800573a:	429a      	cmp	r2, r3
 800573c:	d902      	bls.n	8005744 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 800573e:	f06f 0315 	mvn.w	r3, #21
 8005742:	e046      	b.n	80057d2 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800574a:	429a      	cmp	r2, r3
 800574c:	d101      	bne.n	8005752 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	e03f      	b.n	80057d2 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 800575a:	2b00      	cmp	r3, #0
 800575c:	d12b      	bne.n	80057b6 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	f107 0318 	add.w	r3, r7, #24
 8005768:	4619      	mov	r1, r3
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7fe fe6f 	bl	800444e <lfs_ctz_index>
 8005770:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8005776:	f107 0314 	add.w	r3, r7, #20
 800577a:	4619      	mov	r1, r3
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7fe fe66 	bl	800444e <lfs_ctz_index>
 8005782:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8005784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	429a      	cmp	r2, r3
 800578a:	d114      	bne.n	80057b6 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	429a      	cmp	r2, r3
 8005794:	d80f      	bhi.n	80057b6 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579e:	441a      	add	r2, r3
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d907      	bls.n	80057b6 <lfs_file_rawseek+0xee>
            file->pos = npos;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057aa:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 80057b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b4:	e00d      	b.n	80057d2 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7ff fb71 	bl	8004ea0 <lfs_file_flush>
 80057be:	61f8      	str	r0, [r7, #28]
    if (err) {
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <lfs_file_rawseek+0x102>
        return err;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	e003      	b.n	80057d2 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ce:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3730      	adds	r7, #48	; 0x30
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <lfs_file_rawrewind>:
static lfs_soff_t lfs_file_rawtell(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 80057e4:	2300      	movs	r3, #0
 80057e6:	2200      	movs	r2, #0
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff ff6c 	bl	80056c8 <lfs_file_rawseek>
 80057f0:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	da01      	bge.n	80057fc <lfs_file_rawrewind+0x22>
        return (int)res;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	e000      	b.n	80057fe <lfs_file_rawrewind+0x24>
    }

    return 0;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f7fa fee0 	bl	80005ec <lfs_max>
 800582c:	4603      	mov	r3, r0
 800582e:	e001      	b.n	8005834 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8005834:	4618      	mov	r0, r3
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b08c      	sub	sp, #48	; 0x30
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <lfs_init+0x2c>
 800585a:	4b92      	ldr	r3, [pc, #584]	; (8005aa4 <lfs_init+0x268>)
 800585c:	4a92      	ldr	r2, [pc, #584]	; (8005aa8 <lfs_init+0x26c>)
 800585e:	f640 7148 	movw	r1, #3912	; 0xf48
 8005862:	4892      	ldr	r0, [pc, #584]	; (8005aac <lfs_init+0x270>)
 8005864:	f004 fdf8 	bl	800a458 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <lfs_init+0x44>
 8005872:	4b8f      	ldr	r3, [pc, #572]	; (8005ab0 <lfs_init+0x274>)
 8005874:	4a8c      	ldr	r2, [pc, #560]	; (8005aa8 <lfs_init+0x26c>)
 8005876:	f640 7149 	movw	r1, #3913	; 0xf49
 800587a:	488c      	ldr	r0, [pc, #560]	; (8005aac <lfs_init+0x270>)
 800587c:	f004 fdec 	bl	800a458 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <lfs_init+0x5c>
 800588a:	4b8a      	ldr	r3, [pc, #552]	; (8005ab4 <lfs_init+0x278>)
 800588c:	4a86      	ldr	r2, [pc, #536]	; (8005aa8 <lfs_init+0x26c>)
 800588e:	f640 714a 	movw	r1, #3914	; 0xf4a
 8005892:	4886      	ldr	r0, [pc, #536]	; (8005aac <lfs_init+0x270>)
 8005894:	f004 fde0 	bl	800a458 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058a2:	6952      	ldr	r2, [r2, #20]
 80058a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80058a8:	fb01 f202 	mul.w	r2, r1, r2
 80058ac:	1a9b      	subs	r3, r3, r2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <lfs_init+0x84>
 80058b2:	4b81      	ldr	r3, [pc, #516]	; (8005ab8 <lfs_init+0x27c>)
 80058b4:	4a7c      	ldr	r2, [pc, #496]	; (8005aa8 <lfs_init+0x26c>)
 80058b6:	f640 714e 	movw	r1, #3918	; 0xf4e
 80058ba:	487c      	ldr	r0, [pc, #496]	; (8005aac <lfs_init+0x270>)
 80058bc:	f004 fdcc 	bl	800a458 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058ca:	6992      	ldr	r2, [r2, #24]
 80058cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80058d0:	fb01 f202 	mul.w	r2, r1, r2
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d006      	beq.n	80058e8 <lfs_init+0xac>
 80058da:	4b78      	ldr	r3, [pc, #480]	; (8005abc <lfs_init+0x280>)
 80058dc:	4a72      	ldr	r2, [pc, #456]	; (8005aa8 <lfs_init+0x26c>)
 80058de:	f640 714f 	movw	r1, #3919	; 0xf4f
 80058e2:	4872      	ldr	r0, [pc, #456]	; (8005aac <lfs_init+0x270>)
 80058e4:	f004 fdb8 	bl	800a458 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80058f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80058f8:	fb01 f202 	mul.w	r2, r1, r2
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d006      	beq.n	8005910 <lfs_init+0xd4>
 8005902:	4b6f      	ldr	r3, [pc, #444]	; (8005ac0 <lfs_init+0x284>)
 8005904:	4a68      	ldr	r2, [pc, #416]	; (8005aa8 <lfs_init+0x26c>)
 8005906:	f44f 6175 	mov.w	r1, #3920	; 0xf50
 800590a:	4868      	ldr	r0, [pc, #416]	; (8005aac <lfs_init+0x270>)
 800590c:	f004 fda4 	bl	800a458 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	3b08      	subs	r3, #8
 8005918:	f04f 32ff 	mov.w	r2, #4294967295
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	4618      	mov	r0, r3
 8005922:	f7fa feaa 	bl	800067a <lfs_npw2>
 8005926:	4603      	mov	r3, r0
 8005928:	009a      	lsls	r2, r3, #2
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	429a      	cmp	r2, r3
 8005932:	d906      	bls.n	8005942 <lfs_init+0x106>
 8005934:	4b63      	ldr	r3, [pc, #396]	; (8005ac4 <lfs_init+0x288>)
 8005936:	4a5c      	ldr	r2, [pc, #368]	; (8005aa8 <lfs_init+0x26c>)
 8005938:	f640 7153 	movw	r1, #3923	; 0xf53
 800593c:	485b      	ldr	r0, [pc, #364]	; (8005aac <lfs_init+0x270>)
 800593e:	f004 fd8b 	bl	800a458 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <lfs_init+0x11e>
 800594c:	4b5e      	ldr	r3, [pc, #376]	; (8005ac8 <lfs_init+0x28c>)
 800594e:	4a56      	ldr	r2, [pc, #344]	; (8005aa8 <lfs_init+0x26c>)
 8005950:	f640 715c 	movw	r1, #3932	; 0xf5c
 8005954:	4855      	ldr	r0, [pc, #340]	; (8005aac <lfs_init+0x270>)
 8005956:	f004 fd7f 	bl	800a458 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60da      	str	r2, [r3, #12]
 800596e:	e010      	b.n	8005992 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	4618      	mov	r0, r3
 8005978:	f7fa fee7 	bl	800074a <lfs_malloc>
 800597c:	4602      	mov	r2, r0
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d103      	bne.n	8005992 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800598a:	f06f 030b 	mvn.w	r3, #11
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005990:	e0fd      	b.n	8005b8e <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	61da      	str	r2, [r3, #28]
 80059a6:	e010      	b.n	80059ca <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fa fecb 	bl	800074a <lfs_malloc>
 80059b4:	4602      	mov	r2, r0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 80059c2:	f06f 030b 	mvn.w	r3, #11
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80059c8:	e0e1      	b.n	8005b8e <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fa fee1 	bl	8000796 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3310      	adds	r3, #16
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fa fedb 	bl	8000796 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d106      	bne.n	80059f8 <lfs_init+0x1bc>
 80059ea:	4b38      	ldr	r3, [pc, #224]	; (8005acc <lfs_init+0x290>)
 80059ec:	4a2e      	ldr	r2, [pc, #184]	; (8005aa8 <lfs_init+0x26c>)
 80059ee:	f640 717a 	movw	r1, #3962	; 0xf7a
 80059f2:	482e      	ldr	r0, [pc, #184]	; (8005aac <lfs_init+0x270>)
 80059f4:	f004 fd30 	bl	800a458 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <lfs_init+0x1d8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d006      	beq.n	8005a22 <lfs_init+0x1e6>
 8005a14:	4b2e      	ldr	r3, [pc, #184]	; (8005ad0 <lfs_init+0x294>)
 8005a16:	4a24      	ldr	r2, [pc, #144]	; (8005aa8 <lfs_init+0x26c>)
 8005a18:	f640 717b 	movw	r1, #3963	; 0xf7b
 8005a1c:	4823      	ldr	r0, [pc, #140]	; (8005aac <lfs_init+0x270>)
 8005a1e:	f004 fd1b 	bl	800a458 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	665a      	str	r2, [r3, #100]	; 0x64
 8005a36:	e010      	b.n	8005a5a <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fa fe83 	bl	800074a <lfs_malloc>
 8005a44:	4602      	mov	r2, r0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 8005a52:	f06f 030b 	mvn.w	r3, #11
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005a58:	e099      	b.n	8005b8e <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a60:	2bff      	cmp	r3, #255	; 0xff
 8005a62:	d906      	bls.n	8005a72 <lfs_init+0x236>
 8005a64:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <lfs_init+0x298>)
 8005a66:	4a10      	ldr	r2, [pc, #64]	; (8005aa8 <lfs_init+0x26c>)
 8005a68:	f640 7188 	movw	r1, #3976	; 0xf88
 8005a6c:	480f      	ldr	r0, [pc, #60]	; (8005aac <lfs_init+0x270>)
 8005a6e:	f004 fcf3 	bl	800a458 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	22ff      	movs	r2, #255	; 0xff
 8005a88:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da23      	bge.n	8005adc <lfs_init+0x2a0>
 8005a94:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <lfs_init+0x29c>)
 8005a96:	4a04      	ldr	r2, [pc, #16]	; (8005aa8 <lfs_init+0x26c>)
 8005a98:	f640 718e 	movw	r1, #3982	; 0xf8e
 8005a9c:	4803      	ldr	r0, [pc, #12]	; (8005aac <lfs_init+0x270>)
 8005a9e:	f004 fcdb 	bl	800a458 <__assert_func>
 8005aa2:	bf00      	nop
 8005aa4:	0800baf4 	.word	0x0800baf4
 8005aa8:	0800c194 	.word	0x0800c194
 8005aac:	0800b770 	.word	0x0800b770
 8005ab0:	0800bb10 	.word	0x0800bb10
 8005ab4:	0800bb2c 	.word	0x0800bb2c
 8005ab8:	0800bb48 	.word	0x0800bb48
 8005abc:	0800bb78 	.word	0x0800bb78
 8005ac0:	0800bba8 	.word	0x0800bba8
 8005ac4:	0800bbdc 	.word	0x0800bbdc
 8005ac8:	0800bc28 	.word	0x0800bc28
 8005acc:	0800bc44 	.word	0x0800bc44
 8005ad0:	0800bc64 	.word	0x0800bc64
 8005ad4:	0800bcb8 	.word	0x0800bcb8
 8005ad8:	0800bcd4 	.word	0x0800bcd4
    lfs->file_max = lfs->cfg->file_max;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d103      	bne.n	8005af6 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005af4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afc:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d906      	bls.n	8005b12 <lfs_init+0x2d6>
 8005b04:	4b26      	ldr	r3, [pc, #152]	; (8005ba0 <lfs_init+0x364>)
 8005b06:	4a27      	ldr	r2, [pc, #156]	; (8005ba4 <lfs_init+0x368>)
 8005b08:	f640 7194 	movw	r1, #3988	; 0xf94
 8005b0c:	4826      	ldr	r0, [pc, #152]	; (8005ba8 <lfs_init+0x36c>)
 8005b0e:	f004 fca3 	bl	800a458 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005b2a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d906      	bls.n	8005b4a <lfs_init+0x30e>
 8005b3c:	4b1b      	ldr	r3, [pc, #108]	; (8005bac <lfs_init+0x370>)
 8005b3e:	4a19      	ldr	r2, [pc, #100]	; (8005ba4 <lfs_init+0x368>)
 8005b40:	f640 719a 	movw	r1, #3994	; 0xf9a
 8005b44:	4818      	ldr	r0, [pc, #96]	; (8005ba8 <lfs_init+0x36c>)
 8005b46:	f004 fc87 	bl	800a458 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b50:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f04f 32ff 	mov.w	r2, #4294967295
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	333c      	adds	r3, #60	; 0x3c
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	605a      	str	r2, [r3, #4]
 8005b70:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3330      	adds	r3, #48	; 0x30
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	605a      	str	r2, [r3, #4]
 8005b7c:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3348      	adds	r3, #72	; 0x48
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	605a      	str	r2, [r3, #4]
 8005b88:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e003      	b.n	8005b96 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f80e 	bl	8005bb0 <lfs_deinit>
    return err;
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3730      	adds	r7, #48	; 0x30
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	0800bcf8 	.word	0x0800bcf8
 8005ba4:	0800c194 	.word	0x0800c194
 8005ba8:	0800b770 	.word	0x0800b770
 8005bac:	0800bd14 	.word	0x0800bd14

08005bb0 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fa fdcb 	bl	8000762 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fa fdc1 	bl	8000762 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d104      	bne.n	8005bf4 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fa fdb7 	bl	8000762 <lfs_free>
    }

    return 0;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b0a0      	sub	sp, #128	; 0x80
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
    int err = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff fe13 	bl	800583c <lfs_init>
 8005c16:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <lfs_rawformat+0x22>
            return err;
 8005c1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c20:	e082      	b.n	8005d28 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2100      	movs	r1, #0
 8005c30:	f004 fc9a 	bl	800a568 <memset>
        lfs->free.off = 0;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f7fa fcde 	bl	800060c <lfs_min>
 8005c50:	4602      	mov	r2, r0
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fb fc1b 	bl	8001498 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8005c62:	f107 030c 	add.w	r3, r7, #12
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fd f9f1 	bl	8003050 <lfs_dir_alloc>
 8005c6e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d14f      	bne.n	8005d16 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8005c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c7a:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c80:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8005c82:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c88:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8005c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8005c90:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8005c96:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8005c9c:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8005c9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fb fb38 	bl	8001318 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8005ca8:	4b21      	ldr	r3, [pc, #132]	; (8005d30 <lfs_rawformat+0x130>)
 8005caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cac:	2300      	movs	r3, #0
 8005cae:	653b      	str	r3, [r7, #80]	; 0x50
 8005cb0:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <lfs_rawformat+0x134>)
 8005cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005cb4:	4b20      	ldr	r3, [pc, #128]	; (8005d38 <lfs_rawformat+0x138>)
 8005cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cb8:	4b20      	ldr	r3, [pc, #128]	; (8005d3c <lfs_rawformat+0x13c>)
 8005cba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8005cc2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005cc6:	f107 010c 	add.w	r1, r7, #12
 8005cca:	2303      	movs	r3, #3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fe fb99 	bl	8004404 <lfs_dir_commit>
 8005cd2:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8005cd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d11f      	bne.n	8005d1a <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8005ce0:	f107 010c 	add.w	r1, r7, #12
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7fe fb8b 	bl	8004404 <lfs_dir_commit>
 8005cee:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005cf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d113      	bne.n	8005d1e <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8005cfe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005d02:	f107 030c 	add.w	r3, r7, #12
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7fc fe1d 	bl	8002948 <lfs_dir_fetch>
 8005d0e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	e004      	b.n	8005d20 <lfs_rawformat+0x120>
            goto cleanup;
 8005d16:	bf00      	nop
 8005d18:	e002      	b.n	8005d20 <lfs_rawformat+0x120>
            goto cleanup;
 8005d1a:	bf00      	nop
 8005d1c:	e000      	b.n	8005d20 <lfs_rawformat+0x120>
            goto cleanup;
 8005d1e:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff ff45 	bl	8005bb0 <lfs_deinit>
    return err;
 8005d26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3780      	adds	r7, #128	; 0x80
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40100000 	.word	0x40100000
 8005d34:	0ff00008 	.word	0x0ff00008
 8005d38:	0800bd44 	.word	0x0800bd44
 8005d3c:	20100018 	.word	0x20100018

08005d40 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b09c      	sub	sp, #112	; 0x70
 8005d44:	af04      	add	r7, sp, #16
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff fd75 	bl	800583c <lfs_init>
 8005d52:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8005d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <lfs_rawmount+0x1e>
        return err;
 8005d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d5c:	e192      	b.n	8006084 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8005d5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d62:	2220      	movs	r2, #32
 8005d64:	2100      	movs	r1, #0
 8005d66:	4618      	mov	r0, r3
 8005d68:	f004 fbfe 	bl	800a568 <memset>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8005d74:	e10b      	b.n	8005f8e <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d303      	bcc.n	8005d8c <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8005d84:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005d88:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8005d8a:	e177      	b.n	800607c <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8005d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d8e:	3301      	adds	r3, #1
 8005d90:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
 8005d96:	4b8a      	ldr	r3, [pc, #552]	; (8005fc0 <lfs_rawmount+0x280>)
 8005d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d9a:	2308      	movs	r3, #8
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8005d9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005da2:	f103 0218 	add.w	r2, r3, #24
 8005da6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dae:	9303      	str	r3, [sp, #12]
 8005db0:	4b84      	ldr	r3, [pc, #528]	; (8005fc4 <lfs_rawmount+0x284>)
 8005db2:	9302      	str	r3, [sp, #8]
 8005db4:	2300      	movs	r3, #0
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	4b83      	ldr	r3, [pc, #524]	; (8005fc8 <lfs_rawmount+0x288>)
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	4b83      	ldr	r3, [pc, #524]	; (8005fcc <lfs_rawmount+0x28c>)
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fc fa56 	bl	8002270 <lfs_dir_fetchmatch>
 8005dc4:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8005dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	da02      	bge.n	8005dd2 <lfs_rawmount+0x92>
            err = tag;
 8005dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dce:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8005dd0:	e154      	b.n	800607c <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8005dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80cd 	beq.w	8005f74 <lfs_rawmount+0x234>
 8005dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fb f8de 	bl	8000f9e <lfs_tag_isdelete>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f083 0301 	eor.w	r3, r3, #1
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 80c2 	beq.w	8005f74 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8005df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8005df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8005dfc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005e00:	f107 030c 	add.w	r3, r7, #12
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	4b72      	ldr	r3, [pc, #456]	; (8005fd0 <lfs_rawmount+0x290>)
 8005e08:	4a70      	ldr	r2, [pc, #448]	; (8005fcc <lfs_rawmount+0x28c>)
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fb fcfe 	bl	800180c <lfs_dir_get>
 8005e10:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8005e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	da02      	bge.n	8005e1e <lfs_rawmount+0xde>
                err = tag;
 8005e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005e1c:	e12e      	b.n	800607c <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8005e1e:	f107 030c 	add.w	r3, r7, #12
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fb fa40 	bl	80012a8 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	0c1b      	lsrs	r3, r3, #16
 8005e2c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8005e36:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d103      	bne.n	8005e46 <lfs_rawmount+0x106>
 8005e3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d011      	beq.n	8005e6a <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8005e46:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8005e4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e4e:	4961      	ldr	r1, [pc, #388]	; (8005fd4 <lfs_rawmount+0x294>)
 8005e50:	9101      	str	r1, [sp, #4]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	f241 0235 	movw	r2, #4149	; 0x1035
 8005e5a:	495f      	ldr	r1, [pc, #380]	; (8005fd8 <lfs_rawmount+0x298>)
 8005e5c:	485f      	ldr	r0, [pc, #380]	; (8005fdc <lfs_rawmount+0x29c>)
 8005e5e:	f004 ff59 	bl	800ad14 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8005e62:	f06f 0315 	mvn.w	r3, #21
 8005e66:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005e68:	e083      	b.n	8005f72 <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d018      	beq.n	8005ea2 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d910      	bls.n	8005e9c <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e80:	4954      	ldr	r1, [pc, #336]	; (8005fd4 <lfs_rawmount+0x294>)
 8005e82:	9101      	str	r1, [sp, #4]
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	4613      	mov	r3, r2
 8005e88:	f241 023e 	movw	r2, #4158	; 0x103e
 8005e8c:	4952      	ldr	r1, [pc, #328]	; (8005fd8 <lfs_rawmount+0x298>)
 8005e8e:	4854      	ldr	r0, [pc, #336]	; (8005fe0 <lfs_rawmount+0x2a0>)
 8005e90:	f004 ff40 	bl	800ad14 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8005e94:	f06f 0315 	mvn.w	r3, #21
 8005e98:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8005e9a:	e06a      	b.n	8005f72 <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d018      	beq.n	8005eda <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d910      	bls.n	8005ed4 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	4946      	ldr	r1, [pc, #280]	; (8005fd4 <lfs_rawmount+0x294>)
 8005eba:	9101      	str	r1, [sp, #4]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	f241 0249 	movw	r2, #4169	; 0x1049
 8005ec4:	4944      	ldr	r1, [pc, #272]	; (8005fd8 <lfs_rawmount+0x298>)
 8005ec6:	4847      	ldr	r0, [pc, #284]	; (8005fe4 <lfs_rawmount+0x2a4>)
 8005ec8:	f004 ff24 	bl	800ad14 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8005ecc:	f06f 0315 	mvn.w	r3, #21
 8005ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8005ed2:	e04e      	b.n	8005f72 <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d018      	beq.n	8005f12 <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8005ee0:	6a3a      	ldr	r2, [r7, #32]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d910      	bls.n	8005f0c <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8005eea:	6a3a      	ldr	r2, [r7, #32]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef0:	4938      	ldr	r1, [pc, #224]	; (8005fd4 <lfs_rawmount+0x294>)
 8005ef2:	9101      	str	r1, [sp, #4]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	f241 0254 	movw	r2, #4180	; 0x1054
 8005efc:	4936      	ldr	r1, [pc, #216]	; (8005fd8 <lfs_rawmount+0x298>)
 8005efe:	483a      	ldr	r0, [pc, #232]	; (8005fe8 <lfs_rawmount+0x2a8>)
 8005f00:	f004 ff08 	bl	800ad14 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8005f04:	f06f 0315 	mvn.w	r3, #21
 8005f08:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8005f0a:	e032      	b.n	8005f72 <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d011      	beq.n	8005f42 <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	492b      	ldr	r1, [pc, #172]	; (8005fd4 <lfs_rawmount+0x294>)
 8005f28:	9101      	str	r1, [sp, #4]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	f241 025e 	movw	r2, #4190	; 0x105e
 8005f32:	4929      	ldr	r1, [pc, #164]	; (8005fd8 <lfs_rawmount+0x298>)
 8005f34:	482d      	ldr	r0, [pc, #180]	; (8005fec <lfs_rawmount+0x2ac>)
 8005f36:	f004 feed 	bl	800ad14 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8005f3a:	f06f 0315 	mvn.w	r3, #21
 8005f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005f40:	e017      	b.n	8005f72 <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d012      	beq.n	8005f74 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	491f      	ldr	r1, [pc, #124]	; (8005fd4 <lfs_rawmount+0x294>)
 8005f58:	9101      	str	r1, [sp, #4]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	f241 0265 	movw	r2, #4197	; 0x1065
 8005f62:	491d      	ldr	r1, [pc, #116]	; (8005fd8 <lfs_rawmount+0x298>)
 8005f64:	4822      	ldr	r0, [pc, #136]	; (8005ff0 <lfs_rawmount+0x2b0>)
 8005f66:	f004 fed5 	bl	800ad14 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8005f6a:	f06f 0315 	mvn.w	r3, #21
 8005f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005f70:	bf00      	nop
            goto cleanup;
 8005f72:	e083      	b.n	800607c <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7fc fcfd 	bl	8002980 <lfs_dir_getgstate>
 8005f86:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8005f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d175      	bne.n	800607a <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8005f8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f92:	3318      	adds	r3, #24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fa ff4e 	bl	8000e36 <lfs_pair_isnull>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f083 0301 	eor.w	r3, r3, #1
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f47f aee7 	bne.w	8005d76 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3320      	adds	r3, #32
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fa ff42 	bl	8000e36 <lfs_pair_isnull>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01d      	beq.n	8005ff4 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8005fb8:	f06f 0315 	mvn.w	r3, #21
 8005fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8005fbe:	e05d      	b.n	800607c <lfs_rawmount+0x33c>
 8005fc0:	0800bd44 	.word	0x0800bd44
 8005fc4:	080029e5 	.word	0x080029e5
 8005fc8:	0ff00008 	.word	0x0ff00008
 8005fcc:	7ffffc00 	.word	0x7ffffc00
 8005fd0:	20100018 	.word	0x20100018
 8005fd4:	0800b86c 	.word	0x0800b86c
 8005fd8:	0800b770 	.word	0x0800b770
 8005fdc:	0800bd50 	.word	0x0800bd50
 8005fe0:	0800bd7c 	.word	0x0800bd7c
 8005fe4:	0800bdb0 	.word	0x0800bdb0
 8005fe8:	0800bde4 	.word	0x0800bde4
 8005fec:	0800be18 	.word	0x0800be18
 8005ff0:	0800be4c 	.word	0x0800be4c
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3330      	adds	r3, #48	; 0x30
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fb f873 	bl	80010e4 <lfs_gstate_iszero>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f083 0301 	eor.w	r3, r3, #1
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d010      	beq.n	800602c <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006016:	481d      	ldr	r0, [pc, #116]	; (800608c <lfs_rawmount+0x34c>)
 8006018:	9002      	str	r0, [sp, #8]
 800601a:	9201      	str	r2, [sp, #4]
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	460b      	mov	r3, r1
 8006020:	f241 027b 	movw	r2, #4219	; 0x107b
 8006024:	491a      	ldr	r1, [pc, #104]	; (8006090 <lfs_rawmount+0x350>)
 8006026:	481b      	ldr	r0, [pc, #108]	; (8006094 <lfs_rawmount+0x354>)
 8006028:	f004 fe74 	bl	800ad14 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	4618      	mov	r0, r3
 8006032:	f7fa ffa6 	bl	8000f82 <lfs_tag_isvalid>
 8006036:	4603      	mov	r3, r0
 8006038:	f083 0301 	eor.w	r3, r3, #1
 800603c:	b2db      	uxtb	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006044:	441a      	add	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	333c      	adds	r3, #60	; 0x3c
 8006050:	3230      	adds	r2, #48	; 0x30
 8006052:	ca07      	ldmia	r2, {r0, r1, r2}
 8006054:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006060:	6a12      	ldr	r2, [r2, #32]
 8006062:	fbb3 f1f2 	udiv	r1, r3, r2
 8006066:	fb01 f202 	mul.w	r2, r1, r2
 800606a:	1a9a      	subs	r2, r3, r2
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7fb fa20 	bl	80014b6 <lfs_alloc_drop>

    return 0;
 8006076:	2300      	movs	r3, #0
 8006078:	e004      	b.n	8006084 <lfs_rawmount+0x344>
            goto cleanup;
 800607a:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f80b 	bl	8006098 <lfs_rawunmount>
    return err;
 8006082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8006084:	4618      	mov	r0, r3
 8006086:	3760      	adds	r7, #96	; 0x60
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	0800b86c 	.word	0x0800b86c
 8006090:	0800b770 	.word	0x0800b770
 8006094:	0800be7c 	.word	0x0800be7c

08006098 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fd85 	bl	8005bb0 <lfs_deinit>
 80060a6:	4603      	mov	r3, r0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b09d      	sub	sp, #116	; 0x74
 80060b4:	af04      	add	r7, sp, #16
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80060be:	f107 0318 	add.w	r3, r7, #24
 80060c2:	2220      	movs	r2, #32
 80060c4:	2100      	movs	r1, #0
 80060c6:	4618      	mov	r0, r3
 80060c8:	f004 fa4e 	bl	800a568 <memset>
 80060cc:	2301      	movs	r3, #1
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80060d4:	e0a7      	b.n	8006226 <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	085b      	lsrs	r3, r3, #1
 80060de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d302      	bcc.n	80060ea <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 80060e4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80060e8:	e102      	b.n	80062f0 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 80060ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ec:	3301      	adds	r3, #1
 80060ee:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 80060f0:	2300      	movs	r3, #0
 80060f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80060f4:	e013      	b.n	800611e <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 80060f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060f8:	3306      	adds	r3, #6
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	3360      	adds	r3, #96	; 0x60
 80060fe:	443b      	add	r3, r7
 8006100:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4611      	mov	r1, r2
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
 800610c:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <lfs_fs_rawtraverse+0x68>
                return err;
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	e0eb      	b.n	80062f0 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8006118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800611a:	3301      	adds	r3, #1
 800611c:	65bb      	str	r3, [r7, #88]	; 0x58
 800611e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006120:	2b01      	cmp	r3, #1
 8006122:	dde8      	ble.n	80060f6 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8006124:	f107 0318 	add.w	r3, r7, #24
 8006128:	f103 0218 	add.w	r2, r3, #24
 800612c:	f107 0318 	add.w	r3, r7, #24
 8006130:	4619      	mov	r1, r3
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7fc fc08 	bl	8002948 <lfs_dir_fetch>
 8006138:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800613a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <lfs_fs_rawtraverse+0x94>
            return err;
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	e0d5      	b.n	80062f0 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8006144:	2300      	movs	r3, #0
 8006146:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800614a:	e067      	b.n	800621c <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800614c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006150:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006152:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006156:	f043 0308 	orr.w	r3, r3, #8
 800615a:	f107 0118 	add.w	r1, r7, #24
 800615e:	f107 0210 	add.w	r2, r7, #16
 8006162:	9200      	str	r2, [sp, #0]
 8006164:	4a64      	ldr	r2, [pc, #400]	; (80062f8 <lfs_fs_rawtraverse+0x248>)
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7fb fb50 	bl	800180c <lfs_dir_get>
 800616c:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800616e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006170:	2b00      	cmp	r3, #0
 8006172:	da05      	bge.n	8006180 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8006174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006176:	f113 0f02 	cmn.w	r3, #2
 800617a:	d049      	beq.n	8006210 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 800617c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617e:	e0b7      	b.n	80062f0 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 8006180:	f107 0310 	add.w	r3, r7, #16
 8006184:	4618      	mov	r0, r3
 8006186:	f7fb f85f 	bl	8001248 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800618a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618c:	4618      	mov	r0, r3
 800618e:	f7fa ff29 	bl	8000fe4 <lfs_tag_type3>
 8006192:	4603      	mov	r3, r0
 8006194:	461a      	mov	r2, r3
 8006196:	f240 2302 	movw	r3, #514	; 0x202
 800619a:	429a      	cmp	r2, r3
 800619c:	d113      	bne.n	80061c6 <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	6938      	ldr	r0, [r7, #16]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	9202      	str	r2, [sp, #8]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	9201      	str	r2, [sp, #4]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	4603      	mov	r3, r0
 80061b0:	460a      	mov	r2, r1
 80061b2:	2100      	movs	r1, #0
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7fe faf5 	bl	80047a4 <lfs_ctz_traverse>
 80061ba:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80061bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d027      	beq.n	8006212 <lfs_fs_rawtraverse+0x162>
                    return err;
 80061c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c4:	e094      	b.n	80062f0 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d022      	beq.n	8006212 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80061cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fa ff08 	bl	8000fe4 <lfs_tag_type3>
 80061d4:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80061d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061da:	d11a      	bne.n	8006212 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 80061dc:	2300      	movs	r3, #0
 80061de:	653b      	str	r3, [r7, #80]	; 0x50
 80061e0:	e012      	b.n	8006208 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 80061e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	f107 0210 	add.w	r2, r7, #16
 80061ea:	4413      	add	r3, r2
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4611      	mov	r1, r2
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
 80061f6:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 80061f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <lfs_fs_rawtraverse+0x152>
                        return err;
 80061fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006200:	e076      	b.n	80062f0 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 8006202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006204:	3301      	adds	r3, #1
 8006206:	653b      	str	r3, [r7, #80]	; 0x50
 8006208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620a:	2b01      	cmp	r3, #1
 800620c:	dde9      	ble.n	80061e2 <lfs_fs_rawtraverse+0x132>
 800620e:	e000      	b.n	8006212 <lfs_fs_rawtraverse+0x162>
                    continue;
 8006210:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006212:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006216:	3301      	adds	r3, #1
 8006218:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800621c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800621e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8006222:	429a      	cmp	r2, r3
 8006224:	d392      	bcc.n	800614c <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 8006226:	f107 0318 	add.w	r3, r7, #24
 800622a:	3318      	adds	r3, #24
 800622c:	4618      	mov	r0, r3
 800622e:	f7fa fe02 	bl	8000e36 <lfs_pair_isnull>
 8006232:	4603      	mov	r3, r0
 8006234:	f083 0301 	eor.w	r3, r3, #1
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	f47f af4b 	bne.w	80060d6 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006246:	e04f      	b.n	80062e8 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 8006248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624a:	799b      	ldrb	r3, [r3, #6]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d147      	bne.n	80062e0 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01d      	beq.n	8006298 <lfs_fs_rawtraverse+0x1e8>
 800625c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d117      	bne.n	8006298 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006272:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	9202      	str	r2, [sp, #8]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	9201      	str	r2, [sp, #4]
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	4623      	mov	r3, r4
 8006284:	4602      	mov	r2, r0
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7fe fa8c 	bl	80047a4 <lfs_ctz_traverse>
 800628c:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800628e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <lfs_fs_rawtraverse+0x1e8>
                return err;
 8006294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006296:	e02b      	b.n	80062f0 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8006298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01e      	beq.n	80062e2 <lfs_fs_rawtraverse+0x232>
 80062a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d118      	bne.n	80062e2 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80062b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ba:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80062bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	9202      	str	r2, [sp, #8]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	9201      	str	r2, [sp, #4]
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	4623      	mov	r3, r4
 80062cc:	4602      	mov	r2, r0
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7fe fa68 	bl	80047a4 <lfs_ctz_traverse>
 80062d4:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 80062d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <lfs_fs_rawtraverse+0x232>
                return err;
 80062dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062de:	e007      	b.n	80062f0 <lfs_fs_rawtraverse+0x240>
            continue;
 80062e0:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80062e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1ac      	bne.n	8006248 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3764      	adds	r7, #100	; 0x64
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd90      	pop	{r4, r7, pc}
 80062f8:	700ffc00 	.word	0x700ffc00

080062fc <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8006318:	e024      	b.n	8006364 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	085b      	lsrs	r3, r3, #1
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	429a      	cmp	r2, r3
 8006326:	d302      	bcc.n	800632e <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8006328:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800632c:	e027      	b.n	800637e <lfs_fs_pred+0x82>
        }
        cycle += 1;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	3301      	adds	r3, #1
 8006332:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3318      	adds	r3, #24
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	4618      	mov	r0, r3
 800633c:	f7fa fd96 	bl	8000e6c <lfs_pair_cmp>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <lfs_fs_pred+0x4e>
            return 0;
 8006346:	2300      	movs	r3, #0
 8006348:	e019      	b.n	800637e <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3318      	adds	r3, #24
 800634e:	461a      	mov	r2, r3
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7fc faf8 	bl	8002948 <lfs_dir_fetch>
 8006358:	6138      	str	r0, [r7, #16]
        if (err) {
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <lfs_fs_pred+0x68>
            return err;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	e00c      	b.n	800637e <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3318      	adds	r3, #24
 8006368:	4618      	mov	r0, r3
 800636a:	f7fa fd64 	bl	8000e36 <lfs_pair_isnull>
 800636e:	4603      	mov	r3, r0
 8006370:	f083 0301 	eor.w	r3, r3, #1
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1cf      	bne.n	800631a <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800637a:	f06f 0301 	mvn.w	r3, #1
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006386:	b5b0      	push	{r4, r5, r7, lr}
 8006388:	b08e      	sub	sp, #56	; 0x38
 800638a:	af04      	add	r7, sp, #16
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80063a6:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 80063ac:	69dd      	ldr	r5, [r3, #28]
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	6852      	ldr	r2, [r2, #4]
 80063b6:	2108      	movs	r1, #8
 80063b8:	9103      	str	r1, [sp, #12]
 80063ba:	f107 0110 	add.w	r1, r7, #16
 80063be:	9102      	str	r1, [sp, #8]
 80063c0:	9201      	str	r2, [sp, #4]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	462b      	mov	r3, r5
 80063c6:	4622      	mov	r2, r4
 80063c8:	4601      	mov	r1, r0
 80063ca:	6a38      	ldr	r0, [r7, #32]
 80063cc:	f7fa f9fa 	bl	80007c4 <lfs_bd_read>
 80063d0:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <lfs_fs_parent_match+0x56>
        return err;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	e012      	b.n	8006402 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 80063dc:	f107 0310 	add.w	r3, r7, #16
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fa fd9a 	bl	8000f1a <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	1d1a      	adds	r2, r3, #4
 80063ea:	f107 0310 	add.w	r3, r7, #16
 80063ee:	4611      	mov	r1, r2
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fa fd3b 	bl	8000e6c <lfs_pair_cmp>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bf14      	ite	ne
 80063fc:	2301      	movne	r3, #1
 80063fe:	2300      	moveq	r3, #0
 8006400:	b2db      	uxtb	r3, r3
}
 8006402:	4618      	mov	r0, r3
 8006404:	3728      	adds	r7, #40	; 0x28
 8006406:	46bd      	mov	sp, r7
 8006408:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800640c <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800640c:	b580      	push	{r7, lr}
 800640e:	b08e      	sub	sp, #56	; 0x38
 8006410:	af04      	add	r7, sp, #16
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8006428:	e02f      	b.n	800648a <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006434:	429a      	cmp	r2, r3
 8006436:	d302      	bcc.n	800643e <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8006438:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800643c:	e032      	b.n	80064a4 <lfs_fs_parent+0x98>
        }
        cycle += 1;
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	3301      	adds	r3, #1
 8006442:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800645a:	f107 0314 	add.w	r3, r7, #20
 800645e:	9303      	str	r3, [sp, #12]
 8006460:	4b12      	ldr	r3, [pc, #72]	; (80064ac <lfs_fs_parent+0xa0>)
 8006462:	9302      	str	r3, [sp, #8]
 8006464:	2300      	movs	r3, #0
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <lfs_fs_parent+0xa4>)
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <lfs_fs_parent+0xa8>)
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f7fb fefd 	bl	8002270 <lfs_dir_fetchmatch>
 8006476:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d005      	beq.n	800648a <lfs_fs_parent+0x7e>
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	f113 0f02 	cmn.w	r3, #2
 8006484:	d001      	beq.n	800648a <lfs_fs_parent+0x7e>
            return tag;
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	e00c      	b.n	80064a4 <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3318      	adds	r3, #24
 800648e:	4618      	mov	r0, r3
 8006490:	f7fa fcd1 	bl	8000e36 <lfs_pair_isnull>
 8006494:	4603      	mov	r3, r0
 8006496:	f083 0301 	eor.w	r3, r3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1c4      	bne.n	800642a <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80064a0:	f06f 0301 	mvn.w	r3, #1
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3728      	adds	r7, #40	; 0x28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	08006387 	.word	0x08006387
 80064b0:	20000008 	.word	0x20000008
 80064b4:	7ff003ff 	.word	0x7ff003ff

080064b8 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 80064b8:	b590      	push	{r4, r7, lr}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fa fdc5 	bl	8001058 <lfs_tag_size>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <lfs_fs_preporphans+0x32>
 80064d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da06      	bge.n	80064ea <lfs_fs_preporphans+0x32>
 80064dc:	4b10      	ldr	r3, [pc, #64]	; (8006520 <lfs_fs_preporphans+0x68>)
 80064de:	4a11      	ldr	r2, [pc, #68]	; (8006524 <lfs_fs_preporphans+0x6c>)
 80064e0:	f241 114e 	movw	r1, #4430	; 0x114e
 80064e4:	4810      	ldr	r0, [pc, #64]	; (8006528 <lfs_fs_preporphans+0x70>)
 80064e6:	f003 ffb7 	bl	800a458 <__assert_func>
    lfs->gstate.tag += orphans;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064f2:	441a      	add	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3330      	adds	r3, #48	; 0x30
 8006504:	4618      	mov	r0, r3
 8006506:	f7fa fe0a 	bl	800111e <lfs_gstate_hasorphans>
 800650a:	4603      	mov	r3, r0
 800650c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800650e:	ea44 0203 	orr.w	r2, r4, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	bd90      	pop	{r4, r7, pc}
 8006520:	0800beb4 	.word	0x0800beb4
 8006524:	0800c1a0 	.word	0x0800c1a0
 8006528:	0800b770 	.word	0x0800b770

0800652c <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	460b      	mov	r3, r1
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	4a17      	ldr	r2, [pc, #92]	; (800659c <lfs_fs_prepmove+0x70>)
 8006540:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006542:	897b      	ldrh	r3, [r7, #10]
 8006544:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006548:	428b      	cmp	r3, r1
 800654a:	d006      	beq.n	800655a <lfs_fs_prepmove+0x2e>
 800654c:	897b      	ldrh	r3, [r7, #10]
 800654e:	029b      	lsls	r3, r3, #10
 8006550:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006554:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006558:	e000      	b.n	800655c <lfs_fs_prepmove+0x30>
 800655a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800655c:	431a      	orrs	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006562:	897b      	ldrh	r3, [r7, #10]
 8006564:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006568:	4293      	cmp	r3, r2
 800656a:	d002      	beq.n	8006572 <lfs_fs_prepmove+0x46>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	e000      	b.n	8006574 <lfs_fs_prepmove+0x48>
 8006572:	2300      	movs	r3, #0
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006578:	897b      	ldrh	r3, [r7, #10]
 800657a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <lfs_fs_prepmove+0x5e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3304      	adds	r3, #4
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	e000      	b.n	800658c <lfs_fs_prepmove+0x60>
 800658a:	2300      	movs	r3, #0
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	800003ff 	.word	0x800003ff

080065a0 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 80065a0:	b5b0      	push	{r4, r5, r7, lr}
 80065a2:	b094      	sub	sp, #80	; 0x50
 80065a4:	af04      	add	r7, sp, #16
 80065a6:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	333c      	adds	r3, #60	; 0x3c
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fa fdd8 	bl	8001162 <lfs_gstate_hasmove>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f083 0301 	eor.w	r3, r3, #1
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <lfs_fs_demove+0x22>
        return 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	e049      	b.n	8006656 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fa fd32 	bl	8001038 <lfs_tag_id>
 80065d4:	4603      	mov	r3, r0
 80065d6:	461a      	mov	r2, r3
 80065d8:	4b21      	ldr	r3, [pc, #132]	; (8006660 <lfs_fs_demove+0xc0>)
 80065da:	9302      	str	r3, [sp, #8]
 80065dc:	9201      	str	r2, [sp, #4]
 80065de:	9400      	str	r4, [sp, #0]
 80065e0:	462b      	mov	r3, r5
 80065e2:	f241 1268 	movw	r2, #4456	; 0x1168
 80065e6:	491f      	ldr	r1, [pc, #124]	; (8006664 <lfs_fs_demove+0xc4>)
 80065e8:	481f      	ldr	r0, [pc, #124]	; (8006668 <lfs_fs_demove+0xc8>)
 80065ea:	f004 fb93 	bl	800ad14 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80065f4:	f107 0318 	add.w	r3, r7, #24
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fc f9a4 	bl	8002948 <lfs_dir_fetch>
 8006600:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8006602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <lfs_fs_demove+0x6c>
        return err;
 8006608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660a:	e024      	b.n	8006656 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006610:	4618      	mov	r0, r3
 8006612:	f7fa fd11 	bl	8001038 <lfs_tag_id>
 8006616:	4603      	mov	r3, r0
 8006618:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800661a:	2200      	movs	r2, #0
 800661c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff ff83 	bl	800652c <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8006626:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006628:	029b      	lsls	r3, r3, #10
 800662a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800662e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	f107 0210 	add.w	r2, r7, #16
 800663c:	f107 0118 	add.w	r1, r7, #24
 8006640:	2301      	movs	r3, #1
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fd fede 	bl	8004404 <lfs_dir_commit>
 8006648:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800664a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <lfs_fs_demove+0xb4>
        return err;
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006652:	e000      	b.n	8006656 <lfs_fs_demove+0xb6>
    }

    return 0;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3740      	adds	r7, #64	; 0x40
 800665a:	46bd      	mov	sp, r7
 800665c:	bdb0      	pop	{r4, r5, r7, pc}
 800665e:	bf00      	nop
 8006660:	0800b86c 	.word	0x0800b86c
 8006664:	0800b770 	.word	0x0800b770
 8006668:	0800bee8 	.word	0x0800bee8

0800666c <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 800666c:	b5b0      	push	{r4, r5, r7, lr}
 800666e:	b0b2      	sub	sp, #200	; 0xc8
 8006670:	af04      	add	r7, sp, #16
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3330      	adds	r3, #48	; 0x30
 800667c:	4618      	mov	r0, r3
 800667e:	f7fa fd4e 	bl	800111e <lfs_gstate_hasorphans>
 8006682:	4603      	mov	r3, r0
 8006684:	f083 0301 	eor.w	r3, r3, #1
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <lfs_fs_deorphan+0x26>
        return 0;
 800668e:	2300      	movs	r3, #0
 8006690:	e17c      	b.n	800698c <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006698:	f107 030c 	add.w	r3, r7, #12
 800669c:	2220      	movs	r2, #32
 800669e:	2100      	movs	r1, #0
 80066a0:	4618      	mov	r0, r3
 80066a2:	f003 ff61 	bl	800a568 <memset>
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ac:	2301      	movs	r3, #1
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 80066b0:	e148      	b.n	8006944 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80066b2:	f107 030c 	add.w	r3, r7, #12
 80066b6:	f103 0218 	add.w	r2, r3, #24
 80066ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7fc f941 	bl	8002948 <lfs_dir_fetch>
 80066c6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 80066ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <lfs_fs_deorphan+0x6c>
                return err;
 80066d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066d6:	e159      	b.n	800698c <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 80066d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066dc:	f083 0301 	eor.w	r3, r3, #1
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 8124 	beq.w	8006930 <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80066e8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80066ec:	f107 030c 	add.w	r3, r7, #12
 80066f0:	3318      	adds	r3, #24
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff fe89 	bl	800640c <lfs_fs_parent>
 80066fa:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80066fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006702:	2b00      	cmp	r3, #0
 8006704:	da07      	bge.n	8006716 <lfs_fs_deorphan+0xaa>
 8006706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800670a:	f113 0f02 	cmn.w	r3, #2
 800670e:	d002      	beq.n	8006716 <lfs_fs_deorphan+0xaa>
                    return tag;
 8006710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006714:	e13a      	b.n	800698c <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 8006716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800671a:	f113 0f02 	cmn.w	r3, #2
 800671e:	d157      	bne.n	80067d0 <lfs_fs_deorphan+0x164>
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d054      	beq.n	80067d0 <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8006726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	499a      	ldr	r1, [pc, #616]	; (8006994 <lfs_fs_deorphan+0x328>)
 800672c:	9101      	str	r1, [sp, #4]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	f241 12a3 	movw	r2, #4515	; 0x11a3
 8006736:	4998      	ldr	r1, [pc, #608]	; (8006998 <lfs_fs_deorphan+0x32c>)
 8006738:	4898      	ldr	r0, [pc, #608]	; (800699c <lfs_fs_deorphan+0x330>)
 800673a:	f004 faeb 	bl	800ad14 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fc f918 	bl	8002980 <lfs_dir_getgstate>
 8006750:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 8006754:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <lfs_fs_deorphan+0xf6>
                        return err;
 800675c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006760:	e114      	b.n	800698c <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8006762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006766:	3318      	adds	r3, #24
 8006768:	4618      	mov	r0, r3
 800676a:	f7fa fbf0 	bl	8000f4e <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800676e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006772:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006776:	051a      	lsls	r2, r3, #20
 8006778:	4b89      	ldr	r3, [pc, #548]	; (80069a0 <lfs_fs_deorphan+0x334>)
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006784:	3318      	adds	r3, #24
 8006786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800678a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800678e:	f107 010c 	add.w	r1, r7, #12
 8006792:	2301      	movs	r3, #1
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7fd fb3b 	bl	8003e10 <lfs_dir_orphaningcommit>
 800679a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800679e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067a2:	3318      	adds	r3, #24
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fa fbb8 	bl	8000f1a <lfs_pair_fromle32>
                    if (state < 0) {
 80067aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da02      	bge.n	80067b8 <lfs_fs_deorphan+0x14c>
                        return state;
 80067b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 80067b6:	e0e9      	b.n	800698c <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 80067b8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80067bc:	3301      	adds	r3, #1
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 80067c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	f040 80af 	bne.w	800692c <lfs_fs_deorphan+0x2c0>
                        goto restart;
 80067ce:	e763      	b.n	8006698 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 80067d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067d4:	f113 0f02 	cmn.w	r3, #2
 80067d8:	f000 80aa 	beq.w	8006930 <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 80067dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067e0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80067e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	4613      	mov	r3, r2
 80067ec:	4a6d      	ldr	r2, [pc, #436]	; (80069a4 <lfs_fs_deorphan+0x338>)
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fb f80c 	bl	800180c <lfs_dir_get>
 80067f4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 80067f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	da02      	bge.n	8006806 <lfs_fs_deorphan+0x19a>
                        return state;
 8006800:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006804:	e0c2      	b.n	800698c <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 8006806:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800680a:	4618      	mov	r0, r3
 800680c:	f7fa fb85 	bl	8000f1a <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 8006810:	f107 030c 	add.w	r3, r7, #12
 8006814:	f103 0218 	add.w	r2, r3, #24
 8006818:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f7fa fb4e 	bl	8000ec0 <lfs_pair_sync>
 8006824:	4603      	mov	r3, r0
 8006826:	f083 0301 	eor.w	r3, r3, #1
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d07f      	beq.n	8006930 <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8006830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006838:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800683c:	4c55      	ldr	r4, [pc, #340]	; (8006994 <lfs_fs_deorphan+0x328>)
 800683e:	9403      	str	r4, [sp, #12]
 8006840:	9102      	str	r1, [sp, #8]
 8006842:	9201      	str	r2, [sp, #4]
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4603      	mov	r3, r0
 8006848:	f241 12cc 	movw	r2, #4556	; 0x11cc
 800684c:	4952      	ldr	r1, [pc, #328]	; (8006998 <lfs_fs_deorphan+0x32c>)
 800684e:	4856      	ldr	r0, [pc, #344]	; (80069a8 <lfs_fs_deorphan+0x33c>)
 8006850:	f004 fa60 	bl	800ad14 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8006854:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006858:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3330      	adds	r3, #48	; 0x30
 8006860:	f107 020c 	add.w	r2, r7, #12
 8006864:	4611      	mov	r1, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f7fa fc8e 	bl	8001188 <lfs_gstate_hasmovehere>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d01c      	beq.n	80068ac <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	4618      	mov	r0, r3
 8006878:	f7fa fbde 	bl	8001038 <lfs_tag_id>
 800687c:	4603      	mov	r3, r0
 800687e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800688a:	4842      	ldr	r0, [pc, #264]	; (8006994 <lfs_fs_deorphan+0x328>)
 800688c:	9002      	str	r0, [sp, #8]
 800688e:	9201      	str	r2, [sp, #4]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	460b      	mov	r3, r1
 8006894:	f241 12d7 	movw	r2, #4567	; 0x11d7
 8006898:	493f      	ldr	r1, [pc, #252]	; (8006998 <lfs_fs_deorphan+0x32c>)
 800689a:	4844      	ldr	r0, [pc, #272]	; (80069ac <lfs_fs_deorphan+0x340>)
 800689c:	f004 fa3a 	bl	800ad14 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80068a0:	2200      	movs	r2, #0
 80068a2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fe40 	bl	800652c <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 80068ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fa fb4c 	bl	8000f4e <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80068b6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80068ba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80068be:	4293      	cmp	r3, r2
 80068c0:	d007      	beq.n	80068d2 <lfs_fs_deorphan+0x266>
 80068c2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80068c6:	029b      	lsls	r3, r3, #10
 80068c8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80068cc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80068d0:	e000      	b.n	80068d4 <lfs_fs_deorphan+0x268>
 80068d2:	2300      	movs	r3, #0
 80068d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068d6:	2300      	movs	r3, #0
 80068d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068dc:	4b34      	ldr	r3, [pc, #208]	; (80069b0 <lfs_fs_deorphan+0x344>)
 80068de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80068e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068ea:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80068ee:	f107 010c 	add.w	r1, r7, #12
 80068f2:	2302      	movs	r3, #2
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7fd fa8b 	bl	8003e10 <lfs_dir_orphaningcommit>
 80068fa:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80068fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006902:	4618      	mov	r0, r3
 8006904:	f7fa fb09 	bl	8000f1a <lfs_pair_fromle32>
                        if (state < 0) {
 8006908:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800690c:	2b00      	cmp	r3, #0
 800690e:	da02      	bge.n	8006916 <lfs_fs_deorphan+0x2aa>
                            return state;
 8006910:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8006914:	e03a      	b.n	800698c <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 8006916:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800691a:	3301      	adds	r3, #1
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8006922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006926:	2b03      	cmp	r3, #3
 8006928:	d10c      	bne.n	8006944 <lfs_fs_deorphan+0x2d8>
 800692a:	e6b5      	b.n	8006698 <lfs_fs_deorphan+0x2c>
                    continue;
 800692c:	bf00      	nop
 800692e:	e009      	b.n	8006944 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 8006930:	f107 040c 	add.w	r4, r7, #12
 8006934:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8006938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800693a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800693c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8006944:	f107 030c 	add.w	r3, r7, #12
 8006948:	3318      	adds	r3, #24
 800694a:	4618      	mov	r0, r3
 800694c:	f7fa fa73 	bl	8000e36 <lfs_pair_isnull>
 8006950:	4603      	mov	r3, r0
 8006952:	f083 0301 	eor.w	r3, r3, #1
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	f47f aeaa 	bne.w	80066b2 <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3330      	adds	r3, #48	; 0x30
 8006962:	4618      	mov	r0, r3
 8006964:	f7fa fbee 	bl	8001144 <lfs_gstate_getorphans>
 8006968:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 800696a:	461a      	mov	r2, r3
 800696c:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8006970:	4619      	mov	r1, r3
 8006972:	4610      	mov	r0, r2
 8006974:	f7f9 fe4a 	bl	800060c <lfs_min>
 8006978:	4603      	mov	r3, r0
 800697a:	b2db      	uxtb	r3, r3
 800697c:	425b      	negs	r3, r3
 800697e:	b2db      	uxtb	r3, r3
 8006980:	b25b      	sxtb	r3, r3
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff fd97 	bl	80064b8 <lfs_fs_preporphans>
 800698a:	4603      	mov	r3, r0
            found));
}
 800698c:	4618      	mov	r0, r3
 800698e:	37b8      	adds	r7, #184	; 0xb8
 8006990:	46bd      	mov	sp, r7
 8006992:	bdb0      	pop	{r4, r5, r7, pc}
 8006994:	0800b86c 	.word	0x0800b86c
 8006998:	0800b770 	.word	0x0800b770
 800699c:	0800bf1c 	.word	0x0800bf1c
 80069a0:	000ffc08 	.word	0x000ffc08
 80069a4:	7ffffc00 	.word	0x7ffffc00
 80069a8:	0800bf4c 	.word	0x0800bf4c
 80069ac:	0800bf90 	.word	0x0800bf90
 80069b0:	600ffc08 	.word	0x600ffc08

080069b4 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff fdef 	bl	80065a0 <lfs_fs_demove>
 80069c2:	60f8      	str	r0, [r7, #12]
    if (err) {
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <lfs_fs_forceconsistency+0x1a>
        return err;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	e00a      	b.n	80069e4 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 80069ce:	2101      	movs	r1, #1
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff fe4b 	bl	800666c <lfs_fs_deorphan>
 80069d6:	60f8      	str	r0, [r7, #12]
    if (err) {
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <lfs_fs_forceconsistency+0x2e>
        return err;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	e000      	b.n	80069e4 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	601a      	str	r2, [r3, #0]
    return 0;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
	...

08006a14 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8006a20:	f107 0208 	add.w	r2, r7, #8
 8006a24:	2300      	movs	r3, #0
 8006a26:	4907      	ldr	r1, [pc, #28]	; (8006a44 <lfs_fs_rawsize+0x30>)
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff fb41 	bl	80060b0 <lfs_fs_rawtraverse>
 8006a2e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <lfs_fs_rawsize+0x26>
        return err;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	e000      	b.n	8006a3c <lfs_fs_rawsize+0x28>
    }

    return size;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	080069ed 	.word	0x080069ed

08006a48 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <lfs_format+0x18>
        return err;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	e005      	b.n	8006a6c <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff f8cc 	bl	8005c00 <lfs_rawformat>
 8006a68:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <lfs_mount+0x18>
        return err;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	e005      	b.n	8006a98 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff f956 	bl	8005d40 <lfs_rawmount>
 8006a94:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8006a96:	68fb      	ldr	r3, [r7, #12]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <lfs_unmount+0x16>
        return err;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	e004      	b.n	8006ac0 <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_rawunmount(lfs);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff faee 	bl	8006098 <lfs_rawunmount>
 8006abc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006abe:	68fb      	ldr	r3, [r7, #12]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]
    if (err) {
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <lfs_file_open+0x1c>
        return err;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	e01a      	b.n	8006b1a <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fa fc4c 	bl	8001388 <lfs_mlist_isopen>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f083 0301 	eor.w	r3, r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d106      	bne.n	8006b0a <lfs_file_open+0x42>
 8006afc:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <lfs_file_open+0x5c>)
 8006afe:	4a0a      	ldr	r2, [pc, #40]	; (8006b28 <lfs_file_open+0x60>)
 8006b00:	f241 5168 	movw	r1, #5480	; 0x1568
 8006b04:	4809      	ldr	r0, [pc, #36]	; (8006b2c <lfs_file_open+0x64>)
 8006b06:	f003 fca7 	bl	800a458 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7fe f893 	bl	8004c3c <lfs_file_rawopen>
 8006b16:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006b18:	697b      	ldr	r3, [r7, #20]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	0800bfd8 	.word	0x0800bfd8
 8006b28:	0800c1b4 	.word	0x0800c1b4
 8006b2c:	0800b770 	.word	0x0800b770

08006b30 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <lfs_file_close+0x18>
        return err;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	e015      	b.n	8006b74 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fa fc1a 	bl	8001388 <lfs_mlist_isopen>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <lfs_file_close+0x38>
 8006b5a:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <lfs_file_close+0x4c>)
 8006b5c:	4a08      	ldr	r2, [pc, #32]	; (8006b80 <lfs_file_close+0x50>)
 8006b5e:	f241 518c 	movw	r1, #5516	; 0x158c
 8006b62:	4808      	ldr	r0, [pc, #32]	; (8006b84 <lfs_file_close+0x54>)
 8006b64:	f003 fc78 	bl	800a458 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fe f87e 	bl	8004c6c <lfs_file_rawclose>
 8006b70:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006b72:	68fb      	ldr	r3, [r7, #12]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	0800c010 	.word	0x0800c010
 8006b80:	0800c1c4 	.word	0x0800c1c4
 8006b84:	0800b770 	.word	0x0800b770

08006b88 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]
    if (err) {
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <lfs_file_read+0x1c>
        return err;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	e017      	b.n	8006bd4 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fa fbec 	bl	8001388 <lfs_mlist_isopen>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <lfs_file_read+0x3c>
 8006bb6:	4b09      	ldr	r3, [pc, #36]	; (8006bdc <lfs_file_read+0x54>)
 8006bb8:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <lfs_file_read+0x58>)
 8006bba:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8006bbe:	4809      	ldr	r0, [pc, #36]	; (8006be4 <lfs_file_read+0x5c>)
 8006bc0:	f003 fc4a 	bl	800a458 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f7fe fb9a 	bl	8005304 <lfs_file_rawread>
 8006bd0:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8006bd2:	693b      	ldr	r3, [r7, #16]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	0800c010 	.word	0x0800c010
 8006be0:	0800c1d4 	.word	0x0800c1d4
 8006be4:	0800b770 	.word	0x0800b770

08006be8 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	617b      	str	r3, [r7, #20]
    if (err) {
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <lfs_file_write+0x1c>
        return err;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	e017      	b.n	8006c34 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fa fbbc 	bl	8001388 <lfs_mlist_isopen>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <lfs_file_write+0x3c>
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <lfs_file_write+0x54>)
 8006c18:	4a09      	ldr	r2, [pc, #36]	; (8006c40 <lfs_file_write+0x58>)
 8006c1a:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 8006c1e:	4809      	ldr	r0, [pc, #36]	; (8006c44 <lfs_file_write+0x5c>)
 8006c20:	f003 fc1a 	bl	800a458 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f7fe fcc8 	bl	80055c0 <lfs_file_rawwrite>
 8006c30:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8006c32:	693b      	ldr	r3, [r7, #16]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	0800c010 	.word	0x0800c010
 8006c40:	0800c1e4 	.word	0x0800c1e4
 8006c44:	0800b770 	.word	0x0800b770

08006c48 <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <lfs_file_rewind+0x18>
        return err;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	e005      	b.n	8006c6c <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fe fdb9 	bl	80057da <lfs_file_rawrewind>
 8006c68:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e024      	b.n	8006cd4 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	091a      	lsrs	r2, r3, #4
 8006c8e:	6939      	ldr	r1, [r7, #16]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	440b      	add	r3, r1
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	4619      	mov	r1, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	404b      	eors	r3, r1
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	4912      	ldr	r1, [pc, #72]	; (8006cec <lfs_crc+0x78>)
 8006ca2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006ca6:	4053      	eors	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	091a      	lsrs	r2, r3, #4
 8006cae:	6939      	ldr	r1, [r7, #16]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	440b      	add	r3, r1
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	091b      	lsrs	r3, r3, #4
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	4619      	mov	r1, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	404b      	eors	r3, r1
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	4909      	ldr	r1, [pc, #36]	; (8006cec <lfs_crc+0x78>)
 8006cc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006cca:	4053      	eors	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d3d6      	bcc.n	8006c8a <lfs_crc+0x16>
    }

    return crc;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	0800c1f4 	.word	0x0800c1f4

08006cf0 <block_device_read>:
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */

int block_device_read(const struct lfs_config *c, lfs_block_t block,
	lfs_off_t off, void *buffer, lfs_size_t size)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
//	W25X_Read((uint8_t*)buffer, (block * c->block_size + off), size);
	W25qxx_ReadSector((uint8_t*)buffer, block, off, size);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f000 fffd 	bl	8007d04 <W25qxx_ReadSector>
	return 0;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block,
	lfs_off_t off, const void *buffer, lfs_size_t size)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
//	W25X_Write_NoCheck((uint8_t*)buffer, (block * c->block_size + off), size);
	W25qxx_WriteSector((uint8_t*)buffer, block, off, size);
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	6838      	ldr	r0, [r7, #0]
 8006d2a:	f000 ff0b 	bl	8007b44 <W25qxx_WriteSector>

	return 0;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
// W25X_Erase_Sector(block * c->block_size);
	W25qxx_EraseSector(block);
 8006d42:	6838      	ldr	r0, [r7, #0]
 8006d44:	f000 fe0c 	bl	8007960 <W25qxx_EraseSector>

	return 0;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <block_device_sync>:

int block_device_sync(const struct lfs_config *c)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
	return 0;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <LFS_Config>:
uint8_t lfs_read_buf[256];
uint8_t lfs_prog_buf[256];
uint8_t lfs_lookahead_buf[256];

void LFS_Config(void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
	// block device operations
	cfg.read  = block_device_read;
 8006d6c:	4b1a      	ldr	r3, [pc, #104]	; (8006dd8 <LFS_Config+0x70>)
 8006d6e:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <LFS_Config+0x74>)
 8006d70:	605a      	str	r2, [r3, #4]
	cfg.prog  = block_device_prog;
 8006d72:	4b19      	ldr	r3, [pc, #100]	; (8006dd8 <LFS_Config+0x70>)
 8006d74:	4a1a      	ldr	r2, [pc, #104]	; (8006de0 <LFS_Config+0x78>)
 8006d76:	609a      	str	r2, [r3, #8]
	cfg.erase = block_device_erase;
 8006d78:	4b17      	ldr	r3, [pc, #92]	; (8006dd8 <LFS_Config+0x70>)
 8006d7a:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <LFS_Config+0x7c>)
 8006d7c:	60da      	str	r2, [r3, #12]
	cfg.sync  = block_device_sync;
 8006d7e:	4b16      	ldr	r3, [pc, #88]	; (8006dd8 <LFS_Config+0x70>)
 8006d80:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <LFS_Config+0x80>)
 8006d82:	611a      	str	r2, [r3, #16]

	// block device configuration
	cfg.read_size = 256;
 8006d84:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <LFS_Config+0x70>)
 8006d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d8a:	615a      	str	r2, [r3, #20]
	cfg.prog_size = 256;
 8006d8c:	4b12      	ldr	r3, [pc, #72]	; (8006dd8 <LFS_Config+0x70>)
 8006d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d92:	619a      	str	r2, [r3, #24]
	cfg.block_size = 4096;
 8006d94:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <LFS_Config+0x70>)
 8006d96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d9a:	61da      	str	r2, [r3, #28]
	cfg.block_count = 4096;
 8006d9c:	4b0e      	ldr	r3, [pc, #56]	; (8006dd8 <LFS_Config+0x70>)
 8006d9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006da2:	621a      	str	r2, [r3, #32]
	cfg.cache_size = 256;
 8006da4:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <LFS_Config+0x70>)
 8006da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28
	cfg.lookahead_size = 256;
 8006dac:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <LFS_Config+0x70>)
 8006dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006db2:	62da      	str	r2, [r3, #44]	; 0x2c
	cfg.block_cycles = 500;
 8006db4:	4b08      	ldr	r3, [pc, #32]	; (8006dd8 <LFS_Config+0x70>)
 8006db6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006dba:	625a      	str	r2, [r3, #36]	; 0x24

	cfg.read_buffer = lfs_read_buf;
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <LFS_Config+0x70>)
 8006dbe:	4a0b      	ldr	r2, [pc, #44]	; (8006dec <LFS_Config+0x84>)
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30
	cfg.prog_buffer = lfs_prog_buf;
 8006dc2:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <LFS_Config+0x70>)
 8006dc4:	4a0a      	ldr	r2, [pc, #40]	; (8006df0 <LFS_Config+0x88>)
 8006dc6:	635a      	str	r2, [r3, #52]	; 0x34
	cfg.lookahead_buffer = lfs_lookahead_buf;
 8006dc8:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <LFS_Config+0x70>)
 8006dca:	4a0a      	ldr	r2, [pc, #40]	; (8006df4 <LFS_Config+0x8c>)
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006dce:	bf00      	nop
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	200001f4 	.word	0x200001f4
 8006ddc:	08006cf1 	.word	0x08006cf1
 8006de0:	08006d15 	.word	0x08006d15
 8006de4:	08006d39 	.word	0x08006d39
 8006de8:	08006d53 	.word	0x08006d53
 8006dec:	20000240 	.word	0x20000240
 8006df0:	20000340 	.word	0x20000340
 8006df4:	20000440 	.word	0x20000440

08006df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006dfe:	f001 f80d 	bl	8007e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006e02:	f000 f85d 	bl	8006ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006e06:	f000 f929 	bl	800705c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8006e0a:	f000 f8fd 	bl	8007008 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8006e0e:	f000 f8c5 	bl	8006f9c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8006e12:	4823      	ldr	r0, [pc, #140]	; (8006ea0 <main+0xa8>)
 8006e14:	f000 f9aa 	bl	800716c <RetargetInit>
  printf("\r\nDebug is started: ");
 8006e18:	4822      	ldr	r0, [pc, #136]	; (8006ea4 <main+0xac>)
 8006e1a:	f003 ff7b 	bl	800ad14 <iprintf>
  W25qxx_Init();
 8006e1e:	f000 fccd 	bl	80077bc <W25qxx_Init>
  LFS_Config();
 8006e22:	f7ff ffa1 	bl	8006d68 <LFS_Config>

  // mount the filesystem
  int err = lfs_mount(&lfs, &cfg);
 8006e26:	4920      	ldr	r1, [pc, #128]	; (8006ea8 <main+0xb0>)
 8006e28:	4820      	ldr	r0, [pc, #128]	; (8006eac <main+0xb4>)
 8006e2a:	f7ff fe23 	bl	8006a74 <lfs_mount>
 8006e2e:	6078      	str	r0, [r7, #4]

  // reformat if we can't mount the filesystem
  // this should only happen on the first boot
  if (err) {
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <main+0x56>
	  printf("\r\n Fs error: %d", err);
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	481d      	ldr	r0, [pc, #116]	; (8006eb0 <main+0xb8>)
 8006e3a:	f003 ff6b 	bl	800ad14 <iprintf>
      lfs_format(&lfs, &cfg);
 8006e3e:	491a      	ldr	r1, [pc, #104]	; (8006ea8 <main+0xb0>)
 8006e40:	481a      	ldr	r0, [pc, #104]	; (8006eac <main+0xb4>)
 8006e42:	f7ff fe01 	bl	8006a48 <lfs_format>
      lfs_mount(&lfs, &cfg);
 8006e46:	4918      	ldr	r1, [pc, #96]	; (8006ea8 <main+0xb0>)
 8006e48:	4818      	ldr	r0, [pc, #96]	; (8006eac <main+0xb4>)
 8006e4a:	f7ff fe13 	bl	8006a74 <lfs_mount>
  }

  // read current count
  uint32_t boot_count = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	603b      	str	r3, [r7, #0]
  lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 8006e52:	f240 1303 	movw	r3, #259	; 0x103
 8006e56:	4a17      	ldr	r2, [pc, #92]	; (8006eb4 <main+0xbc>)
 8006e58:	4917      	ldr	r1, [pc, #92]	; (8006eb8 <main+0xc0>)
 8006e5a:	4814      	ldr	r0, [pc, #80]	; (8006eac <main+0xb4>)
 8006e5c:	f7ff fe34 	bl	8006ac8 <lfs_file_open>
  lfs_file_read(&lfs, &file, &boot_count, sizeof(boot_count));
 8006e60:	463a      	mov	r2, r7
 8006e62:	2304      	movs	r3, #4
 8006e64:	4914      	ldr	r1, [pc, #80]	; (8006eb8 <main+0xc0>)
 8006e66:	4811      	ldr	r0, [pc, #68]	; (8006eac <main+0xb4>)
 8006e68:	f7ff fe8e 	bl	8006b88 <lfs_file_read>

  // update boot count
  boot_count += 1;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	603b      	str	r3, [r7, #0]
  lfs_file_rewind(&lfs, &file);
 8006e72:	4911      	ldr	r1, [pc, #68]	; (8006eb8 <main+0xc0>)
 8006e74:	480d      	ldr	r0, [pc, #52]	; (8006eac <main+0xb4>)
 8006e76:	f7ff fee7 	bl	8006c48 <lfs_file_rewind>
  lfs_file_write(&lfs, &file, &boot_count, sizeof(boot_count));
 8006e7a:	463a      	mov	r2, r7
 8006e7c:	2304      	movs	r3, #4
 8006e7e:	490e      	ldr	r1, [pc, #56]	; (8006eb8 <main+0xc0>)
 8006e80:	480a      	ldr	r0, [pc, #40]	; (8006eac <main+0xb4>)
 8006e82:	f7ff feb1 	bl	8006be8 <lfs_file_write>

  // remember the storage is not updated until the file is closed successfully
  lfs_file_close(&lfs, &file);
 8006e86:	490c      	ldr	r1, [pc, #48]	; (8006eb8 <main+0xc0>)
 8006e88:	4808      	ldr	r0, [pc, #32]	; (8006eac <main+0xb4>)
 8006e8a:	f7ff fe51 	bl	8006b30 <lfs_file_close>

  // release any resources we were using
  lfs_unmount(&lfs);
 8006e8e:	4807      	ldr	r0, [pc, #28]	; (8006eac <main+0xb4>)
 8006e90:	f7ff fe06 	bl	8006aa0 <lfs_unmount>

  // print the boot count
  printf("boot_count: %d\n", boot_count);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	4619      	mov	r1, r3
 8006e98:	4808      	ldr	r0, [pc, #32]	; (8006ebc <main+0xc4>)
 8006e9a:	f003 ff3b 	bl	800ad14 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006e9e:	e7fe      	b.n	8006e9e <main+0xa6>
 8006ea0:	200000e4 	.word	0x200000e4
 8006ea4:	0800c080 	.word	0x0800c080
 8006ea8:	200001f4 	.word	0x200001f4
 8006eac:	20000128 	.word	0x20000128
 8006eb0:	0800c098 	.word	0x0800c098
 8006eb4:	0800c0a8 	.word	0x0800c0a8
 8006eb8:	200001a0 	.word	0x200001a0
 8006ebc:	0800c0b4 	.word	0x0800c0b4

08006ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b094      	sub	sp, #80	; 0x50
 8006ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006ec6:	f107 031c 	add.w	r3, r7, #28
 8006eca:	2234      	movs	r2, #52	; 0x34
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f003 fb4a 	bl	800a568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006ed4:	f107 0308 	add.w	r3, r7, #8
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	605a      	str	r2, [r3, #4]
 8006ede:	609a      	str	r2, [r3, #8]
 8006ee0:	60da      	str	r2, [r3, #12]
 8006ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	607b      	str	r3, [r7, #4]
 8006ee8:	4b2a      	ldr	r3, [pc, #168]	; (8006f94 <SystemClock_Config+0xd4>)
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	4a29      	ldr	r2, [pc, #164]	; (8006f94 <SystemClock_Config+0xd4>)
 8006eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8006ef4:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <SystemClock_Config+0xd4>)
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006f00:	2300      	movs	r3, #0
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <SystemClock_Config+0xd8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006f0c:	4a22      	ldr	r2, [pc, #136]	; (8006f98 <SystemClock_Config+0xd8>)
 8006f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	4b20      	ldr	r3, [pc, #128]	; (8006f98 <SystemClock_Config+0xd8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006f20:	2302      	movs	r3, #2
 8006f22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006f24:	2301      	movs	r3, #1
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006f28:	2310      	movs	r3, #16
 8006f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006f30:	2300      	movs	r3, #0
 8006f32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006f34:	2310      	movs	r3, #16
 8006f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006f38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006f3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8006f3e:	2304      	movs	r3, #4
 8006f40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006f42:	2302      	movs	r3, #2
 8006f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006f46:	2302      	movs	r3, #2
 8006f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f4a:	f107 031c 	add.w	r3, r7, #28
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f001 fdd8 	bl	8008b04 <HAL_RCC_OscConfig>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8006f5a:	f000 f901 	bl	8007160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f5e:	230f      	movs	r3, #15
 8006f60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f62:	2302      	movs	r3, #2
 8006f64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f66:	2300      	movs	r3, #0
 8006f68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006f74:	f107 0308 	add.w	r3, r7, #8
 8006f78:	2102      	movs	r1, #2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 fa78 	bl	8008470 <HAL_RCC_ClockConfig>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8006f86:	f000 f8eb 	bl	8007160 <Error_Handler>
  }
}
 8006f8a:	bf00      	nop
 8006f8c:	3750      	adds	r7, #80	; 0x50
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	40023800 	.word	0x40023800
 8006f98:	40007000 	.word	0x40007000

08006f9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006fa0:	4b17      	ldr	r3, [pc, #92]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fa2:	4a18      	ldr	r2, [pc, #96]	; (8007004 <MX_SPI2_Init+0x68>)
 8006fa4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006fa6:	4b16      	ldr	r3, [pc, #88]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006fac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006fae:	4b14      	ldr	r3, [pc, #80]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006fb4:	4b12      	ldr	r3, [pc, #72]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fba:	4b11      	ldr	r3, [pc, #68]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006fc0:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006fc6:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fcc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006fce:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006fda:	4b09      	ldr	r3, [pc, #36]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fe0:	4b07      	ldr	r3, [pc, #28]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006fe6:	4b06      	ldr	r3, [pc, #24]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fe8:	220a      	movs	r2, #10
 8006fea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006fec:	4804      	ldr	r0, [pc, #16]	; (8007000 <MX_SPI2_Init+0x64>)
 8006fee:	f002 f827 	bl	8009040 <HAL_SPI_Init>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006ff8:	f000 f8b2 	bl	8007160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006ffc:	bf00      	nop
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	2000008c 	.word	0x2000008c
 8007004:	40003800 	.word	0x40003800

08007008 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800700c:	4b11      	ldr	r3, [pc, #68]	; (8007054 <MX_USART2_UART_Init+0x4c>)
 800700e:	4a12      	ldr	r2, [pc, #72]	; (8007058 <MX_USART2_UART_Init+0x50>)
 8007010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007012:	4b10      	ldr	r3, [pc, #64]	; (8007054 <MX_USART2_UART_Init+0x4c>)
 8007014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800701a:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <MX_USART2_UART_Init+0x4c>)
 800701c:	2200      	movs	r2, #0
 800701e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007020:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <MX_USART2_UART_Init+0x4c>)
 8007022:	2200      	movs	r2, #0
 8007024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007026:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <MX_USART2_UART_Init+0x4c>)
 8007028:	2200      	movs	r2, #0
 800702a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800702c:	4b09      	ldr	r3, [pc, #36]	; (8007054 <MX_USART2_UART_Init+0x4c>)
 800702e:	220c      	movs	r2, #12
 8007030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007032:	4b08      	ldr	r3, [pc, #32]	; (8007054 <MX_USART2_UART_Init+0x4c>)
 8007034:	2200      	movs	r2, #0
 8007036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <MX_USART2_UART_Init+0x4c>)
 800703a:	2200      	movs	r2, #0
 800703c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800703e:	4805      	ldr	r0, [pc, #20]	; (8007054 <MX_USART2_UART_Init+0x4c>)
 8007040:	f002 fda6 	bl	8009b90 <HAL_UART_Init>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800704a:	f000 f889 	bl	8007160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800704e:	bf00      	nop
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	200000e4 	.word	0x200000e4
 8007058:	40004400 	.word	0x40004400

0800705c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08a      	sub	sp, #40	; 0x28
 8007060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007062:	f107 0314 	add.w	r3, r7, #20
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	605a      	str	r2, [r3, #4]
 800706c:	609a      	str	r2, [r3, #8]
 800706e:	60da      	str	r2, [r3, #12]
 8007070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007072:	2300      	movs	r3, #0
 8007074:	613b      	str	r3, [r7, #16]
 8007076:	4b37      	ldr	r3, [pc, #220]	; (8007154 <MX_GPIO_Init+0xf8>)
 8007078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707a:	4a36      	ldr	r2, [pc, #216]	; (8007154 <MX_GPIO_Init+0xf8>)
 800707c:	f043 0304 	orr.w	r3, r3, #4
 8007080:	6313      	str	r3, [r2, #48]	; 0x30
 8007082:	4b34      	ldr	r3, [pc, #208]	; (8007154 <MX_GPIO_Init+0xf8>)
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	4b30      	ldr	r3, [pc, #192]	; (8007154 <MX_GPIO_Init+0xf8>)
 8007094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007096:	4a2f      	ldr	r2, [pc, #188]	; (8007154 <MX_GPIO_Init+0xf8>)
 8007098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800709c:	6313      	str	r3, [r2, #48]	; 0x30
 800709e:	4b2d      	ldr	r3, [pc, #180]	; (8007154 <MX_GPIO_Init+0xf8>)
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80070aa:	2300      	movs	r3, #0
 80070ac:	60bb      	str	r3, [r7, #8]
 80070ae:	4b29      	ldr	r3, [pc, #164]	; (8007154 <MX_GPIO_Init+0xf8>)
 80070b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b2:	4a28      	ldr	r2, [pc, #160]	; (8007154 <MX_GPIO_Init+0xf8>)
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	6313      	str	r3, [r2, #48]	; 0x30
 80070ba:	4b26      	ldr	r3, [pc, #152]	; (8007154 <MX_GPIO_Init+0xf8>)
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	60bb      	str	r3, [r7, #8]
 80070c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80070c6:	2300      	movs	r3, #0
 80070c8:	607b      	str	r3, [r7, #4]
 80070ca:	4b22      	ldr	r3, [pc, #136]	; (8007154 <MX_GPIO_Init+0xf8>)
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	4a21      	ldr	r2, [pc, #132]	; (8007154 <MX_GPIO_Init+0xf8>)
 80070d0:	f043 0302 	orr.w	r3, r3, #2
 80070d4:	6313      	str	r3, [r2, #48]	; 0x30
 80070d6:	4b1f      	ldr	r3, [pc, #124]	; (8007154 <MX_GPIO_Init+0xf8>)
 80070d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	607b      	str	r3, [r7, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(__CS_GPIO_Port, __CS_Pin, GPIO_PIN_RESET);
 80070e2:	2200      	movs	r2, #0
 80070e4:	2101      	movs	r1, #1
 80070e6:	481c      	ldr	r0, [pc, #112]	; (8007158 <MX_GPIO_Init+0xfc>)
 80070e8:	f001 f9a8 	bl	800843c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80070ec:	2200      	movs	r2, #0
 80070ee:	2120      	movs	r1, #32
 80070f0:	481a      	ldr	r0, [pc, #104]	; (800715c <MX_GPIO_Init+0x100>)
 80070f2:	f001 f9a3 	bl	800843c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80070f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80070fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007102:	2300      	movs	r3, #0
 8007104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007106:	f107 0314 	add.w	r3, r7, #20
 800710a:	4619      	mov	r1, r3
 800710c:	4812      	ldr	r0, [pc, #72]	; (8007158 <MX_GPIO_Init+0xfc>)
 800710e:	f001 f801 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : __CS_Pin */
  GPIO_InitStruct.Pin = __CS_Pin;
 8007112:	2301      	movs	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007116:	2301      	movs	r3, #1
 8007118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800711a:	2301      	movs	r3, #1
 800711c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800711e:	2300      	movs	r3, #0
 8007120:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(__CS_GPIO_Port, &GPIO_InitStruct);
 8007122:	f107 0314 	add.w	r3, r7, #20
 8007126:	4619      	mov	r1, r3
 8007128:	480b      	ldr	r0, [pc, #44]	; (8007158 <MX_GPIO_Init+0xfc>)
 800712a:	f000 fff3 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800712e:	2320      	movs	r3, #32
 8007130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007132:	2301      	movs	r3, #1
 8007134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007136:	2300      	movs	r3, #0
 8007138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800713a:	2300      	movs	r3, #0
 800713c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800713e:	f107 0314 	add.w	r3, r7, #20
 8007142:	4619      	mov	r1, r3
 8007144:	4805      	ldr	r0, [pc, #20]	; (800715c <MX_GPIO_Init+0x100>)
 8007146:	f000 ffe5 	bl	8008114 <HAL_GPIO_Init>

}
 800714a:	bf00      	nop
 800714c:	3728      	adds	r7, #40	; 0x28
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40023800 	.word	0x40023800
 8007158:	40020800 	.word	0x40020800
 800715c:	40020000 	.word	0x40020000

08007160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007164:	b672      	cpsid	i
}
 8007166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007168:	e7fe      	b.n	8007168 <Error_Handler+0x8>
	...

0800716c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8007174:	4a07      	ldr	r2, [pc, #28]	; (8007194 <RetargetInit+0x28>)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800717a:	4b07      	ldr	r3, [pc, #28]	; (8007198 <RetargetInit+0x2c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6898      	ldr	r0, [r3, #8]
 8007180:	2300      	movs	r3, #0
 8007182:	2202      	movs	r2, #2
 8007184:	2100      	movs	r1, #0
 8007186:	f003 fded 	bl	800ad64 <setvbuf>
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20000540 	.word	0x20000540
 8007198:	2000000c 	.word	0x2000000c

0800719c <_isatty>:

int _isatty(int fd) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	db04      	blt.n	80071b4 <_isatty+0x18>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	dc01      	bgt.n	80071b4 <_isatty+0x18>
    return 1;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e005      	b.n	80071c0 <_isatty+0x24>

  errno = EBADF;
 80071b4:	f003 f96e 	bl	800a494 <__errno>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2209      	movs	r2, #9
 80071bc:	601a      	str	r2, [r3, #0]
  return 0;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <_write>:

int _write(int fd, char* ptr, int len) {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d002      	beq.n	80071e0 <_write+0x18>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d111      	bne.n	8007204 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80071e0:	4b0e      	ldr	r3, [pc, #56]	; (800721c <_write+0x54>)
 80071e2:	6818      	ldr	r0, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f04f 33ff 	mov.w	r3, #4294967295
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	f002 fd1c 	bl	8009c2a <HAL_UART_Transmit>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <_write+0x38>
      return len;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	e008      	b.n	8007212 <_write+0x4a>
    else
      return EIO;
 8007200:	2305      	movs	r3, #5
 8007202:	e006      	b.n	8007212 <_write+0x4a>
  }
  errno = EBADF;
 8007204:	f003 f946 	bl	800a494 <__errno>
 8007208:	4603      	mov	r3, r0
 800720a:	2209      	movs	r2, #9
 800720c:	601a      	str	r2, [r3, #0]
  return -1;
 800720e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20000540 	.word	0x20000540

08007220 <_close>:

int _close(int fd) {
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	db04      	blt.n	8007238 <_close+0x18>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b02      	cmp	r3, #2
 8007232:	dc01      	bgt.n	8007238 <_close+0x18>
    return 0;
 8007234:	2300      	movs	r3, #0
 8007236:	e006      	b.n	8007246 <_close+0x26>

  errno = EBADF;
 8007238:	f003 f92c 	bl	800a494 <__errno>
 800723c:	4603      	mov	r3, r0
 800723e:	2209      	movs	r2, #9
 8007240:	601a      	str	r2, [r3, #0]
  return -1;
 8007242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800725a:	f003 f91b 	bl	800a494 <__errno>
 800725e:	4603      	mov	r3, r0
 8007260:	2209      	movs	r2, #9
 8007262:	601a      	str	r2, [r3, #0]
  return -1;
 8007264:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <_read>:

int _read(int fd, char* ptr, int len) {
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d110      	bne.n	80072a4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8007282:	4b0e      	ldr	r3, [pc, #56]	; (80072bc <_read+0x4c>)
 8007284:	6818      	ldr	r0, [r3, #0]
 8007286:	f04f 33ff 	mov.w	r3, #4294967295
 800728a:	2201      	movs	r2, #1
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	f002 fd5e 	bl	8009d4e <HAL_UART_Receive>
 8007292:	4603      	mov	r3, r0
 8007294:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8007296:	7dfb      	ldrb	r3, [r7, #23]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <_read+0x30>
      return 1;
 800729c:	2301      	movs	r3, #1
 800729e:	e008      	b.n	80072b2 <_read+0x42>
    else
      return EIO;
 80072a0:	2305      	movs	r3, #5
 80072a2:	e006      	b.n	80072b2 <_read+0x42>
  }
  errno = EBADF;
 80072a4:	f003 f8f6 	bl	800a494 <__errno>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2209      	movs	r2, #9
 80072ac:	601a      	str	r2, [r3, #0]
  return -1;
 80072ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000540 	.word	0x20000540

080072c0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	db08      	blt.n	80072e2 <_fstat+0x22>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	dc05      	bgt.n	80072e2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072dc:	605a      	str	r2, [r3, #4]
    return 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	e005      	b.n	80072ee <_fstat+0x2e>
  }

  errno = EBADF;
 80072e2:	f003 f8d7 	bl	800a494 <__errno>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2209      	movs	r2, #9
 80072ea:	601a      	str	r2, [r3, #0]
  return 0;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072fe:	2300      	movs	r3, #0
 8007300:	607b      	str	r3, [r7, #4]
 8007302:	4b10      	ldr	r3, [pc, #64]	; (8007344 <HAL_MspInit+0x4c>)
 8007304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007306:	4a0f      	ldr	r2, [pc, #60]	; (8007344 <HAL_MspInit+0x4c>)
 8007308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800730c:	6453      	str	r3, [r2, #68]	; 0x44
 800730e:	4b0d      	ldr	r3, [pc, #52]	; (8007344 <HAL_MspInit+0x4c>)
 8007310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007316:	607b      	str	r3, [r7, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800731a:	2300      	movs	r3, #0
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	4b09      	ldr	r3, [pc, #36]	; (8007344 <HAL_MspInit+0x4c>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	4a08      	ldr	r2, [pc, #32]	; (8007344 <HAL_MspInit+0x4c>)
 8007324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007328:	6413      	str	r3, [r2, #64]	; 0x40
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_MspInit+0x4c>)
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007336:	2007      	movs	r0, #7
 8007338:	f000 feb8 	bl	80080ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40023800 	.word	0x40023800

08007348 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08a      	sub	sp, #40	; 0x28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007350:	f107 0314 	add.w	r3, r7, #20
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	605a      	str	r2, [r3, #4]
 800735a:	609a      	str	r2, [r3, #8]
 800735c:	60da      	str	r2, [r3, #12]
 800735e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a30      	ldr	r2, [pc, #192]	; (8007428 <HAL_SPI_MspInit+0xe0>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d15a      	bne.n	8007420 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800736a:	2300      	movs	r3, #0
 800736c:	613b      	str	r3, [r7, #16]
 800736e:	4b2f      	ldr	r3, [pc, #188]	; (800742c <HAL_SPI_MspInit+0xe4>)
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	4a2e      	ldr	r2, [pc, #184]	; (800742c <HAL_SPI_MspInit+0xe4>)
 8007374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007378:	6413      	str	r3, [r2, #64]	; 0x40
 800737a:	4b2c      	ldr	r3, [pc, #176]	; (800742c <HAL_SPI_MspInit+0xe4>)
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007382:	613b      	str	r3, [r7, #16]
 8007384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	4b28      	ldr	r3, [pc, #160]	; (800742c <HAL_SPI_MspInit+0xe4>)
 800738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738e:	4a27      	ldr	r2, [pc, #156]	; (800742c <HAL_SPI_MspInit+0xe4>)
 8007390:	f043 0304 	orr.w	r3, r3, #4
 8007394:	6313      	str	r3, [r2, #48]	; 0x30
 8007396:	4b25      	ldr	r3, [pc, #148]	; (800742c <HAL_SPI_MspInit+0xe4>)
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	f003 0304 	and.w	r3, r3, #4
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
 80073a6:	4b21      	ldr	r3, [pc, #132]	; (800742c <HAL_SPI_MspInit+0xe4>)
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	4a20      	ldr	r2, [pc, #128]	; (800742c <HAL_SPI_MspInit+0xe4>)
 80073ac:	f043 0302 	orr.w	r3, r3, #2
 80073b0:	6313      	str	r3, [r2, #48]	; 0x30
 80073b2:	4b1e      	ldr	r3, [pc, #120]	; (800742c <HAL_SPI_MspInit+0xe4>)
 80073b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	60bb      	str	r3, [r7, #8]
 80073bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80073be:	2302      	movs	r3, #2
 80073c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073c2:	2302      	movs	r3, #2
 80073c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073ca:	2303      	movs	r3, #3
 80073cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80073ce:	2307      	movs	r3, #7
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073d2:	f107 0314 	add.w	r3, r7, #20
 80073d6:	4619      	mov	r1, r3
 80073d8:	4815      	ldr	r0, [pc, #84]	; (8007430 <HAL_SPI_MspInit+0xe8>)
 80073da:	f000 fe9b 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80073de:	2304      	movs	r3, #4
 80073e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073e2:	2302      	movs	r3, #2
 80073e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073ea:	2303      	movs	r3, #3
 80073ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80073ee:	2305      	movs	r3, #5
 80073f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073f2:	f107 0314 	add.w	r3, r7, #20
 80073f6:	4619      	mov	r1, r3
 80073f8:	480d      	ldr	r0, [pc, #52]	; (8007430 <HAL_SPI_MspInit+0xe8>)
 80073fa:	f000 fe8b 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80073fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007404:	2302      	movs	r3, #2
 8007406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007408:	2300      	movs	r3, #0
 800740a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800740c:	2303      	movs	r3, #3
 800740e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007410:	2305      	movs	r3, #5
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007414:	f107 0314 	add.w	r3, r7, #20
 8007418:	4619      	mov	r1, r3
 800741a:	4806      	ldr	r0, [pc, #24]	; (8007434 <HAL_SPI_MspInit+0xec>)
 800741c:	f000 fe7a 	bl	8008114 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007420:	bf00      	nop
 8007422:	3728      	adds	r7, #40	; 0x28
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40003800 	.word	0x40003800
 800742c:	40023800 	.word	0x40023800
 8007430:	40020800 	.word	0x40020800
 8007434:	40020400 	.word	0x40020400

08007438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08a      	sub	sp, #40	; 0x28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007440:	f107 0314 	add.w	r3, r7, #20
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	605a      	str	r2, [r3, #4]
 800744a:	609a      	str	r2, [r3, #8]
 800744c:	60da      	str	r2, [r3, #12]
 800744e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a19      	ldr	r2, [pc, #100]	; (80074bc <HAL_UART_MspInit+0x84>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d12b      	bne.n	80074b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800745a:	2300      	movs	r3, #0
 800745c:	613b      	str	r3, [r7, #16]
 800745e:	4b18      	ldr	r3, [pc, #96]	; (80074c0 <HAL_UART_MspInit+0x88>)
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	4a17      	ldr	r2, [pc, #92]	; (80074c0 <HAL_UART_MspInit+0x88>)
 8007464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007468:	6413      	str	r3, [r2, #64]	; 0x40
 800746a:	4b15      	ldr	r3, [pc, #84]	; (80074c0 <HAL_UART_MspInit+0x88>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007476:	2300      	movs	r3, #0
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	4b11      	ldr	r3, [pc, #68]	; (80074c0 <HAL_UART_MspInit+0x88>)
 800747c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747e:	4a10      	ldr	r2, [pc, #64]	; (80074c0 <HAL_UART_MspInit+0x88>)
 8007480:	f043 0301 	orr.w	r3, r3, #1
 8007484:	6313      	str	r3, [r2, #48]	; 0x30
 8007486:	4b0e      	ldr	r3, [pc, #56]	; (80074c0 <HAL_UART_MspInit+0x88>)
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007492:	230c      	movs	r3, #12
 8007494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007496:	2302      	movs	r3, #2
 8007498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749a:	2300      	movs	r3, #0
 800749c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800749e:	2303      	movs	r3, #3
 80074a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80074a2:	2307      	movs	r3, #7
 80074a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074a6:	f107 0314 	add.w	r3, r7, #20
 80074aa:	4619      	mov	r1, r3
 80074ac:	4805      	ldr	r0, [pc, #20]	; (80074c4 <HAL_UART_MspInit+0x8c>)
 80074ae:	f000 fe31 	bl	8008114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80074b2:	bf00      	nop
 80074b4:	3728      	adds	r7, #40	; 0x28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	40004400 	.word	0x40004400
 80074c0:	40023800 	.word	0x40023800
 80074c4:	40020000 	.word	0x40020000

080074c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80074cc:	e7fe      	b.n	80074cc <NMI_Handler+0x4>

080074ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074ce:	b480      	push	{r7}
 80074d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074d2:	e7fe      	b.n	80074d2 <HardFault_Handler+0x4>

080074d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074d8:	e7fe      	b.n	80074d8 <MemManage_Handler+0x4>

080074da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074da:	b480      	push	{r7}
 80074dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074de:	e7fe      	b.n	80074de <BusFault_Handler+0x4>

080074e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074e4:	e7fe      	b.n	80074e4 <UsageFault_Handler+0x4>

080074e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074e6:	b480      	push	{r7}
 80074e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074ea:	bf00      	nop
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074f8:	bf00      	nop
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007502:	b480      	push	{r7}
 8007504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007506:	bf00      	nop
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007514:	f000 fcd4 	bl	8007ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007518:	bf00      	nop
 800751a:	bd80      	pop	{r7, pc}

0800751c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007524:	4a14      	ldr	r2, [pc, #80]	; (8007578 <_sbrk+0x5c>)
 8007526:	4b15      	ldr	r3, [pc, #84]	; (800757c <_sbrk+0x60>)
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007530:	4b13      	ldr	r3, [pc, #76]	; (8007580 <_sbrk+0x64>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007538:	4b11      	ldr	r3, [pc, #68]	; (8007580 <_sbrk+0x64>)
 800753a:	4a12      	ldr	r2, [pc, #72]	; (8007584 <_sbrk+0x68>)
 800753c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800753e:	4b10      	ldr	r3, [pc, #64]	; (8007580 <_sbrk+0x64>)
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4413      	add	r3, r2
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	429a      	cmp	r2, r3
 800754a:	d207      	bcs.n	800755c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800754c:	f002 ffa2 	bl	800a494 <__errno>
 8007550:	4603      	mov	r3, r0
 8007552:	220c      	movs	r2, #12
 8007554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007556:	f04f 33ff 	mov.w	r3, #4294967295
 800755a:	e009      	b.n	8007570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800755c:	4b08      	ldr	r3, [pc, #32]	; (8007580 <_sbrk+0x64>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007562:	4b07      	ldr	r3, [pc, #28]	; (8007580 <_sbrk+0x64>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	4a05      	ldr	r2, [pc, #20]	; (8007580 <_sbrk+0x64>)
 800756c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800756e:	68fb      	ldr	r3, [r7, #12]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	20020000 	.word	0x20020000
 800757c:	00000400 	.word	0x00000400
 8007580:	20000544 	.word	0x20000544
 8007584:	20000588 	.word	0x20000588

08007588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <SystemInit+0x20>)
 800758e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007592:	4a05      	ldr	r2, [pc, #20]	; (80075a8 <SystemInit+0x20>)
 8007594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800759c:	bf00      	nop
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	e000ed00 	.word	0xe000ed00

080075ac <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	4603      	mov	r3, r0
 80075b4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80075b6:	f107 020f 	add.w	r2, r7, #15
 80075ba:	1df9      	adds	r1, r7, #7
 80075bc:	2364      	movs	r3, #100	; 0x64
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	2301      	movs	r3, #1
 80075c2:	4804      	ldr	r0, [pc, #16]	; (80075d4 <W25qxx_Spi+0x28>)
 80075c4:	f002 f812 	bl	80095ec <HAL_SPI_TransmitReceive>
	return ret;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	2000008c 	.word	0x2000008c

080075d8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	2300      	movs	r3, #0
 80075e4:	60bb      	str	r3, [r7, #8]
 80075e6:	2300      	movs	r3, #0
 80075e8:	607b      	str	r3, [r7, #4]
 80075ea:	2300      	movs	r3, #0
 80075ec:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80075ee:	2200      	movs	r2, #0
 80075f0:	2101      	movs	r1, #1
 80075f2:	4813      	ldr	r0, [pc, #76]	; (8007640 <W25qxx_ReadID+0x68>)
 80075f4:	f000 ff22 	bl	800843c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80075f8:	209f      	movs	r0, #159	; 0x9f
 80075fa:	f7ff ffd7 	bl	80075ac <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80075fe:	20a5      	movs	r0, #165	; 0xa5
 8007600:	f7ff ffd4 	bl	80075ac <W25qxx_Spi>
 8007604:	4603      	mov	r3, r0
 8007606:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007608:	20a5      	movs	r0, #165	; 0xa5
 800760a:	f7ff ffcf 	bl	80075ac <W25qxx_Spi>
 800760e:	4603      	mov	r3, r0
 8007610:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007612:	20a5      	movs	r0, #165	; 0xa5
 8007614:	f7ff ffca 	bl	80075ac <W25qxx_Spi>
 8007618:	4603      	mov	r3, r0
 800761a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800761c:	2201      	movs	r2, #1
 800761e:	2101      	movs	r1, #1
 8007620:	4807      	ldr	r0, [pc, #28]	; (8007640 <W25qxx_ReadID+0x68>)
 8007622:	f000 ff0b 	bl	800843c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	041a      	lsls	r2, r3, #16
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	021b      	lsls	r3, r3, #8
 800762e:	4313      	orrs	r3, r2
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
	return Temp;
 8007636:	68fb      	ldr	r3, [r7, #12]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40020800 	.word	0x40020800

08007644 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8007644:	b590      	push	{r4, r7, lr}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800764a:	2200      	movs	r2, #0
 800764c:	2101      	movs	r1, #1
 800764e:	4816      	ldr	r0, [pc, #88]	; (80076a8 <W25qxx_ReadUniqID+0x64>)
 8007650:	f000 fef4 	bl	800843c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8007654:	204b      	movs	r0, #75	; 0x4b
 8007656:	f7ff ffa9 	bl	80075ac <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800765a:	2300      	movs	r3, #0
 800765c:	71fb      	strb	r3, [r7, #7]
 800765e:	e005      	b.n	800766c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007660:	20a5      	movs	r0, #165	; 0xa5
 8007662:	f7ff ffa3 	bl	80075ac <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	3301      	adds	r3, #1
 800766a:	71fb      	strb	r3, [r7, #7]
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	2b03      	cmp	r3, #3
 8007670:	d9f6      	bls.n	8007660 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8007672:	2300      	movs	r3, #0
 8007674:	71bb      	strb	r3, [r7, #6]
 8007676:	e00b      	b.n	8007690 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007678:	79bc      	ldrb	r4, [r7, #6]
 800767a:	20a5      	movs	r0, #165	; 0xa5
 800767c:	f7ff ff96 	bl	80075ac <W25qxx_Spi>
 8007680:	4603      	mov	r3, r0
 8007682:	461a      	mov	r2, r3
 8007684:	4b09      	ldr	r3, [pc, #36]	; (80076ac <W25qxx_ReadUniqID+0x68>)
 8007686:	4423      	add	r3, r4
 8007688:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800768a:	79bb      	ldrb	r3, [r7, #6]
 800768c:	3301      	adds	r3, #1
 800768e:	71bb      	strb	r3, [r7, #6]
 8007690:	79bb      	ldrb	r3, [r7, #6]
 8007692:	2b07      	cmp	r3, #7
 8007694:	d9f0      	bls.n	8007678 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8007696:	2201      	movs	r2, #1
 8007698:	2101      	movs	r1, #1
 800769a:	4803      	ldr	r0, [pc, #12]	; (80076a8 <W25qxx_ReadUniqID+0x64>)
 800769c:	f000 fece 	bl	800843c <HAL_GPIO_WritePin>
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd90      	pop	{r4, r7, pc}
 80076a8:	40020800 	.word	0x40020800
 80076ac:	20000548 	.word	0x20000548

080076b0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80076b4:	2200      	movs	r2, #0
 80076b6:	2101      	movs	r1, #1
 80076b8:	4807      	ldr	r0, [pc, #28]	; (80076d8 <W25qxx_WriteEnable+0x28>)
 80076ba:	f000 febf 	bl	800843c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80076be:	2006      	movs	r0, #6
 80076c0:	f7ff ff74 	bl	80075ac <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80076c4:	2201      	movs	r2, #1
 80076c6:	2101      	movs	r1, #1
 80076c8:	4803      	ldr	r0, [pc, #12]	; (80076d8 <W25qxx_WriteEnable+0x28>)
 80076ca:	f000 feb7 	bl	800843c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80076ce:	2001      	movs	r0, #1
 80076d0:	f000 fc16 	bl	8007f00 <HAL_Delay>
}
 80076d4:	bf00      	nop
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40020800 	.word	0x40020800

080076dc <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80076ea:	2200      	movs	r2, #0
 80076ec:	2101      	movs	r1, #1
 80076ee:	481c      	ldr	r0, [pc, #112]	; (8007760 <W25qxx_ReadStatusRegister+0x84>)
 80076f0:	f000 fea4 	bl	800843c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d10c      	bne.n	8007714 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80076fa:	2005      	movs	r0, #5
 80076fc:	f7ff ff56 	bl	80075ac <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007700:	20a5      	movs	r0, #165	; 0xa5
 8007702:	f7ff ff53 	bl	80075ac <W25qxx_Spi>
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800770a:	4a16      	ldr	r2, [pc, #88]	; (8007764 <W25qxx_ReadStatusRegister+0x88>)
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8007712:	e01b      	b.n	800774c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d10c      	bne.n	8007734 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800771a:	2035      	movs	r0, #53	; 0x35
 800771c:	f7ff ff46 	bl	80075ac <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007720:	20a5      	movs	r0, #165	; 0xa5
 8007722:	f7ff ff43 	bl	80075ac <W25qxx_Spi>
 8007726:	4603      	mov	r3, r0
 8007728:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800772a:	4a0e      	ldr	r2, [pc, #56]	; (8007764 <W25qxx_ReadStatusRegister+0x88>)
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8007732:	e00b      	b.n	800774c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8007734:	2015      	movs	r0, #21
 8007736:	f7ff ff39 	bl	80075ac <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800773a:	20a5      	movs	r0, #165	; 0xa5
 800773c:	f7ff ff36 	bl	80075ac <W25qxx_Spi>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8007744:	4a07      	ldr	r2, [pc, #28]	; (8007764 <W25qxx_ReadStatusRegister+0x88>)
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800774c:	2201      	movs	r2, #1
 800774e:	2101      	movs	r1, #1
 8007750:	4803      	ldr	r0, [pc, #12]	; (8007760 <W25qxx_ReadStatusRegister+0x84>)
 8007752:	f000 fe73 	bl	800843c <HAL_GPIO_WritePin>
	return status;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	40020800 	.word	0x40020800
 8007764:	20000548 	.word	0x20000548

08007768 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800776c:	2001      	movs	r0, #1
 800776e:	f000 fbc7 	bl	8007f00 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8007772:	2200      	movs	r2, #0
 8007774:	2101      	movs	r1, #1
 8007776:	480f      	ldr	r0, [pc, #60]	; (80077b4 <W25qxx_WaitForWriteEnd+0x4c>)
 8007778:	f000 fe60 	bl	800843c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800777c:	2005      	movs	r0, #5
 800777e:	f7ff ff15 	bl	80075ac <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007782:	20a5      	movs	r0, #165	; 0xa5
 8007784:	f7ff ff12 	bl	80075ac <W25qxx_Spi>
 8007788:	4603      	mov	r3, r0
 800778a:	461a      	mov	r2, r3
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <W25qxx_WaitForWriteEnd+0x50>)
 800778e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8007792:	2001      	movs	r0, #1
 8007794:	f000 fbb4 	bl	8007f00 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8007798:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <W25qxx_WaitForWriteEnd+0x50>)
 800779a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1ed      	bne.n	8007782 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80077a6:	2201      	movs	r2, #1
 80077a8:	2101      	movs	r1, #1
 80077aa:	4802      	ldr	r0, [pc, #8]	; (80077b4 <W25qxx_WaitForWriteEnd+0x4c>)
 80077ac:	f000 fe46 	bl	800843c <HAL_GPIO_WritePin>
}
 80077b0:	bf00      	nop
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	40020800 	.word	0x40020800
 80077b8:	20000548 	.word	0x20000548

080077bc <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80077c2:	4b65      	ldr	r3, [pc, #404]	; (8007958 <W25qxx_Init+0x19c>)
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80077ca:	e002      	b.n	80077d2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80077cc:	2001      	movs	r0, #1
 80077ce:	f000 fb97 	bl	8007f00 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80077d2:	f000 fb89 	bl	8007ee8 <HAL_GetTick>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b63      	cmp	r3, #99	; 0x63
 80077da:	d9f7      	bls.n	80077cc <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80077dc:	2201      	movs	r2, #1
 80077de:	2101      	movs	r1, #1
 80077e0:	485e      	ldr	r0, [pc, #376]	; (800795c <W25qxx_Init+0x1a0>)
 80077e2:	f000 fe2b 	bl	800843c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80077e6:	2064      	movs	r0, #100	; 0x64
 80077e8:	f000 fb8a 	bl	8007f00 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80077ec:	f7ff fef4 	bl	80075d8 <W25qxx_ReadID>
 80077f0:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	3b11      	subs	r3, #17
 80077f8:	2b0f      	cmp	r3, #15
 80077fa:	d86c      	bhi.n	80078d6 <W25qxx_Init+0x11a>
 80077fc:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <W25qxx_Init+0x48>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	080078c9 	.word	0x080078c9
 8007808:	080078bb 	.word	0x080078bb
 800780c:	080078ad 	.word	0x080078ad
 8007810:	0800789f 	.word	0x0800789f
 8007814:	08007891 	.word	0x08007891
 8007818:	08007883 	.word	0x08007883
 800781c:	08007875 	.word	0x08007875
 8007820:	08007865 	.word	0x08007865
 8007824:	08007855 	.word	0x08007855
 8007828:	080078d7 	.word	0x080078d7
 800782c:	080078d7 	.word	0x080078d7
 8007830:	080078d7 	.word	0x080078d7
 8007834:	080078d7 	.word	0x080078d7
 8007838:	080078d7 	.word	0x080078d7
 800783c:	080078d7 	.word	0x080078d7
 8007840:	08007845 	.word	0x08007845
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8007844:	4b44      	ldr	r3, [pc, #272]	; (8007958 <W25qxx_Init+0x19c>)
 8007846:	220a      	movs	r2, #10
 8007848:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800784a:	4b43      	ldr	r3, [pc, #268]	; (8007958 <W25qxx_Init+0x19c>)
 800784c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007850:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8007852:	e046      	b.n	80078e2 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8007854:	4b40      	ldr	r3, [pc, #256]	; (8007958 <W25qxx_Init+0x19c>)
 8007856:	2209      	movs	r2, #9
 8007858:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800785a:	4b3f      	ldr	r3, [pc, #252]	; (8007958 <W25qxx_Init+0x19c>)
 800785c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007860:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8007862:	e03e      	b.n	80078e2 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8007864:	4b3c      	ldr	r3, [pc, #240]	; (8007958 <W25qxx_Init+0x19c>)
 8007866:	2208      	movs	r2, #8
 8007868:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800786a:	4b3b      	ldr	r3, [pc, #236]	; (8007958 <W25qxx_Init+0x19c>)
 800786c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007870:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8007872:	e036      	b.n	80078e2 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8007874:	4b38      	ldr	r3, [pc, #224]	; (8007958 <W25qxx_Init+0x19c>)
 8007876:	2207      	movs	r2, #7
 8007878:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800787a:	4b37      	ldr	r3, [pc, #220]	; (8007958 <W25qxx_Init+0x19c>)
 800787c:	2280      	movs	r2, #128	; 0x80
 800787e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8007880:	e02f      	b.n	80078e2 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8007882:	4b35      	ldr	r3, [pc, #212]	; (8007958 <W25qxx_Init+0x19c>)
 8007884:	2206      	movs	r2, #6
 8007886:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8007888:	4b33      	ldr	r3, [pc, #204]	; (8007958 <W25qxx_Init+0x19c>)
 800788a:	2240      	movs	r2, #64	; 0x40
 800788c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800788e:	e028      	b.n	80078e2 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8007890:	4b31      	ldr	r3, [pc, #196]	; (8007958 <W25qxx_Init+0x19c>)
 8007892:	2205      	movs	r2, #5
 8007894:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8007896:	4b30      	ldr	r3, [pc, #192]	; (8007958 <W25qxx_Init+0x19c>)
 8007898:	2220      	movs	r2, #32
 800789a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800789c:	e021      	b.n	80078e2 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800789e:	4b2e      	ldr	r3, [pc, #184]	; (8007958 <W25qxx_Init+0x19c>)
 80078a0:	2204      	movs	r2, #4
 80078a2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80078a4:	4b2c      	ldr	r3, [pc, #176]	; (8007958 <W25qxx_Init+0x19c>)
 80078a6:	2210      	movs	r2, #16
 80078a8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 80078aa:	e01a      	b.n	80078e2 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80078ac:	4b2a      	ldr	r3, [pc, #168]	; (8007958 <W25qxx_Init+0x19c>)
 80078ae:	2203      	movs	r2, #3
 80078b0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80078b2:	4b29      	ldr	r3, [pc, #164]	; (8007958 <W25qxx_Init+0x19c>)
 80078b4:	2208      	movs	r2, #8
 80078b6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80078b8:	e013      	b.n	80078e2 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80078ba:	4b27      	ldr	r3, [pc, #156]	; (8007958 <W25qxx_Init+0x19c>)
 80078bc:	2202      	movs	r2, #2
 80078be:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80078c0:	4b25      	ldr	r3, [pc, #148]	; (8007958 <W25qxx_Init+0x19c>)
 80078c2:	2204      	movs	r2, #4
 80078c4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80078c6:	e00c      	b.n	80078e2 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80078c8:	4b23      	ldr	r3, [pc, #140]	; (8007958 <W25qxx_Init+0x19c>)
 80078ca:	2201      	movs	r2, #1
 80078cc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80078ce:	4b22      	ldr	r3, [pc, #136]	; (8007958 <W25qxx_Init+0x19c>)
 80078d0:	2202      	movs	r2, #2
 80078d2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80078d4:	e005      	b.n	80078e2 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80078d6:	4b20      	ldr	r3, [pc, #128]	; (8007958 <W25qxx_Init+0x19c>)
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80078de:	2300      	movs	r3, #0
 80078e0:	e036      	b.n	8007950 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 80078e2:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <W25qxx_Init+0x19c>)
 80078e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078e8:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80078ea:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <W25qxx_Init+0x19c>)
 80078ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80078f0:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80078f2:	4b19      	ldr	r3, [pc, #100]	; (8007958 <W25qxx_Init+0x19c>)
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	4a17      	ldr	r2, [pc, #92]	; (8007958 <W25qxx_Init+0x19c>)
 80078fa:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80078fc:	4b16      	ldr	r3, [pc, #88]	; (8007958 <W25qxx_Init+0x19c>)
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	4a15      	ldr	r2, [pc, #84]	; (8007958 <W25qxx_Init+0x19c>)
 8007902:	6912      	ldr	r2, [r2, #16]
 8007904:	fb02 f303 	mul.w	r3, r2, r3
 8007908:	4a13      	ldr	r2, [pc, #76]	; (8007958 <W25qxx_Init+0x19c>)
 800790a:	8952      	ldrh	r2, [r2, #10]
 800790c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007910:	4a11      	ldr	r2, [pc, #68]	; (8007958 <W25qxx_Init+0x19c>)
 8007912:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8007914:	4b10      	ldr	r3, [pc, #64]	; (8007958 <W25qxx_Init+0x19c>)
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	011b      	lsls	r3, r3, #4
 800791a:	4a0f      	ldr	r2, [pc, #60]	; (8007958 <W25qxx_Init+0x19c>)
 800791c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800791e:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <W25qxx_Init+0x19c>)
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	4a0d      	ldr	r2, [pc, #52]	; (8007958 <W25qxx_Init+0x19c>)
 8007924:	6912      	ldr	r2, [r2, #16]
 8007926:	fb02 f303 	mul.w	r3, r2, r3
 800792a:	0a9b      	lsrs	r3, r3, #10
 800792c:	4a0a      	ldr	r2, [pc, #40]	; (8007958 <W25qxx_Init+0x19c>)
 800792e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8007930:	f7ff fe88 	bl	8007644 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8007934:	2001      	movs	r0, #1
 8007936:	f7ff fed1 	bl	80076dc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800793a:	2002      	movs	r0, #2
 800793c:	f7ff fece 	bl	80076dc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8007940:	2003      	movs	r0, #3
 8007942:	f7ff fecb 	bl	80076dc <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8007946:	4b04      	ldr	r3, [pc, #16]	; (8007958 <W25qxx_Init+0x19c>)
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800794e:	2301      	movs	r3, #1
}
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	20000548 	.word	0x20000548
 800795c:	40020800 	.word	0x40020800

08007960 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8007968:	e002      	b.n	8007970 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800796a:	2001      	movs	r0, #1
 800796c:	f000 fac8 	bl	8007f00 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8007970:	4b25      	ldr	r3, [pc, #148]	; (8007a08 <W25qxx_EraseSector+0xa8>)
 8007972:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007976:	2b01      	cmp	r3, #1
 8007978:	d0f7      	beq.n	800796a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800797a:	4b23      	ldr	r3, [pc, #140]	; (8007a08 <W25qxx_EraseSector+0xa8>)
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8007982:	f7ff fef1 	bl	8007768 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8007986:	4b20      	ldr	r3, [pc, #128]	; (8007a08 <W25qxx_EraseSector+0xa8>)
 8007988:	691a      	ldr	r2, [r3, #16]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	fb02 f303 	mul.w	r3, r2, r3
 8007990:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8007992:	f7ff fe8d 	bl	80076b0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8007996:	2200      	movs	r2, #0
 8007998:	2101      	movs	r1, #1
 800799a:	481c      	ldr	r0, [pc, #112]	; (8007a0c <W25qxx_EraseSector+0xac>)
 800799c:	f000 fd4e 	bl	800843c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80079a0:	4b19      	ldr	r3, [pc, #100]	; (8007a08 <W25qxx_EraseSector+0xa8>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d909      	bls.n	80079bc <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 80079a8:	2021      	movs	r0, #33	; 0x21
 80079aa:	f7ff fdff 	bl	80075ac <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	0e1b      	lsrs	r3, r3, #24
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff fdf9 	bl	80075ac <W25qxx_Spi>
 80079ba:	e002      	b.n	80079c2 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 80079bc:	2020      	movs	r0, #32
 80079be:	f7ff fdf5 	bl	80075ac <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	0c1b      	lsrs	r3, r3, #16
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff fdef 	bl	80075ac <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	0a1b      	lsrs	r3, r3, #8
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff fde9 	bl	80075ac <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	4618      	mov	r0, r3
 80079e0:	f7ff fde4 	bl	80075ac <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80079e4:	2201      	movs	r2, #1
 80079e6:	2101      	movs	r1, #1
 80079e8:	4808      	ldr	r0, [pc, #32]	; (8007a0c <W25qxx_EraseSector+0xac>)
 80079ea:	f000 fd27 	bl	800843c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80079ee:	f7ff febb 	bl	8007768 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80079f2:	2001      	movs	r0, #1
 80079f4:	f000 fa84 	bl	8007f00 <HAL_Delay>
	w25qxx.Lock = 0;
 80079f8:	4b03      	ldr	r3, [pc, #12]	; (8007a08 <W25qxx_EraseSector+0xa8>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	20000548 	.word	0x20000548
 8007a0c:	40020800 	.word	0x40020800

08007a10 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8007a18:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <W25qxx_SectorToPage+0x28>)
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	fb02 f303 	mul.w	r3, r2, r3
 8007a22:	4a05      	ldr	r2, [pc, #20]	; (8007a38 <W25qxx_SectorToPage+0x28>)
 8007a24:	8952      	ldrh	r2, [r2, #10]
 8007a26:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	20000548 	.word	0x20000548

08007a3c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8007a4a:	e002      	b.n	8007a52 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	f000 fa57 	bl	8007f00 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8007a52:	4b39      	ldr	r3, [pc, #228]	; (8007b38 <W25qxx_WritePage+0xfc>)
 8007a54:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d0f7      	beq.n	8007a4c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8007a5c:	4b36      	ldr	r3, [pc, #216]	; (8007b38 <W25qxx_WritePage+0xfc>)
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	4a33      	ldr	r2, [pc, #204]	; (8007b38 <W25qxx_WritePage+0xfc>)
 8007a6c:	8952      	ldrh	r2, [r2, #10]
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d802      	bhi.n	8007a78 <W25qxx_WritePage+0x3c>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d105      	bne.n	8007a84 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007a78:	4b2f      	ldr	r3, [pc, #188]	; (8007b38 <W25qxx_WritePage+0xfc>)
 8007a7a:	895b      	ldrh	r3, [r3, #10]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	4413      	add	r3, r2
 8007a8a:	4a2b      	ldr	r2, [pc, #172]	; (8007b38 <W25qxx_WritePage+0xfc>)
 8007a8c:	8952      	ldrh	r2, [r2, #10]
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d905      	bls.n	8007a9e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007a92:	4b29      	ldr	r3, [pc, #164]	; (8007b38 <W25qxx_WritePage+0xfc>)
 8007a94:	895b      	ldrh	r3, [r3, #10]
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8007a9e:	f7ff fe63 	bl	8007768 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8007aa2:	f7ff fe05 	bl	80076b0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	4824      	ldr	r0, [pc, #144]	; (8007b3c <W25qxx_WritePage+0x100>)
 8007aac:	f000 fcc6 	bl	800843c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8007ab0:	4b21      	ldr	r3, [pc, #132]	; (8007b38 <W25qxx_WritePage+0xfc>)
 8007ab2:	895b      	ldrh	r3, [r3, #10]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	fb02 f303 	mul.w	r3, r2, r3
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	4413      	add	r3, r2
 8007ac0:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <W25qxx_WritePage+0xfc>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b08      	cmp	r3, #8
 8007ac8:	d909      	bls.n	8007ade <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8007aca:	2012      	movs	r0, #18
 8007acc:	f7ff fd6e 	bl	80075ac <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	0e1b      	lsrs	r3, r3, #24
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff fd68 	bl	80075ac <W25qxx_Spi>
 8007adc:	e002      	b.n	8007ae4 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8007ade:	2002      	movs	r0, #2
 8007ae0:	f7ff fd64 	bl	80075ac <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	0c1b      	lsrs	r3, r3, #16
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff fd5e 	bl	80075ac <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	0a1b      	lsrs	r3, r3, #8
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff fd58 	bl	80075ac <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff fd53 	bl	80075ac <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	2364      	movs	r3, #100	; 0x64
 8007b0c:	68f9      	ldr	r1, [r7, #12]
 8007b0e:	480c      	ldr	r0, [pc, #48]	; (8007b40 <W25qxx_WritePage+0x104>)
 8007b10:	f001 fb1f 	bl	8009152 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8007b14:	2201      	movs	r2, #1
 8007b16:	2101      	movs	r1, #1
 8007b18:	4808      	ldr	r0, [pc, #32]	; (8007b3c <W25qxx_WritePage+0x100>)
 8007b1a:	f000 fc8f 	bl	800843c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8007b1e:	f7ff fe23 	bl	8007768 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8007b22:	2001      	movs	r0, #1
 8007b24:	f000 f9ec 	bl	8007f00 <HAL_Delay>
	w25qxx.Lock = 0;
 8007b28:	4b03      	ldr	r3, [pc, #12]	; (8007b38 <W25qxx_WritePage+0xfc>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	20000548 	.word	0x20000548
 8007b3c:	40020800 	.word	0x40020800
 8007b40:	2000008c 	.word	0x2000008c

08007b44 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8007b52:	4b2c      	ldr	r3, [pc, #176]	; (8007c04 <W25qxx_WriteSector+0xc0>)
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d802      	bhi.n	8007b62 <W25qxx_WriteSector+0x1e>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d102      	bne.n	8007b68 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8007b62:	4b28      	ldr	r3, [pc, #160]	; (8007c04 <W25qxx_WriteSector+0xc0>)
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8007b68:	4b26      	ldr	r3, [pc, #152]	; (8007c04 <W25qxx_WriteSector+0xc0>)
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d243      	bcs.n	8007bfa <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	441a      	add	r2, r3
 8007b78:	4b22      	ldr	r3, [pc, #136]	; (8007c04 <W25qxx_WriteSector+0xc0>)
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d905      	bls.n	8007b8c <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8007b80:	4b20      	ldr	r3, [pc, #128]	; (8007c04 <W25qxx_WriteSector+0xc0>)
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	61bb      	str	r3, [r7, #24]
 8007b8a:	e001      	b.n	8007b90 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8007b90:	68b8      	ldr	r0, [r7, #8]
 8007b92:	f7ff ff3d 	bl	8007a10 <W25qxx_SectorToPage>
 8007b96:	4602      	mov	r2, r0
 8007b98:	4b1a      	ldr	r3, [pc, #104]	; (8007c04 <W25qxx_WriteSector+0xc0>)
 8007b9a:	895b      	ldrh	r3, [r3, #10]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ba4:	4413      	add	r3, r2
 8007ba6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8007ba8:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <W25qxx_WriteSector+0xc0>)
 8007baa:	895b      	ldrh	r3, [r3, #10]
 8007bac:	461a      	mov	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bb4:	fb01 f202 	mul.w	r2, r1, r2
 8007bb8:	1a9b      	subs	r3, r3, r2
 8007bba:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	69f9      	ldr	r1, [r7, #28]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f7ff ff3a 	bl	8007a3c <W25qxx_WritePage>
		StartPage++;
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8007bce:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <W25qxx_WriteSector+0xc0>)
 8007bd0:	895b      	ldrh	r3, [r3, #10]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	1a9a      	subs	r2, r3, r2
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	4413      	add	r3, r2
 8007bdc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <W25qxx_WriteSector+0xc0>)
 8007be0:	895b      	ldrh	r3, [r3, #10]
 8007be2:	461a      	mov	r2, r3
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	4413      	add	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dce1      	bgt.n	8007bbc <W25qxx_WriteSector+0x78>
 8007bf8:	e000      	b.n	8007bfc <W25qxx_WriteSector+0xb8>
		return;
 8007bfa:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8007bfc:	3720      	adds	r7, #32
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	20000548 	.word	0x20000548

08007c08 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8007c16:	e002      	b.n	8007c1e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8007c18:	2001      	movs	r0, #1
 8007c1a:	f000 f971 	bl	8007f00 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8007c1e:	4b36      	ldr	r3, [pc, #216]	; (8007cf8 <W25qxx_ReadPage+0xf0>)
 8007c20:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d0f7      	beq.n	8007c18 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8007c28:	4b33      	ldr	r3, [pc, #204]	; (8007cf8 <W25qxx_ReadPage+0xf0>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8007c30:	4b31      	ldr	r3, [pc, #196]	; (8007cf8 <W25qxx_ReadPage+0xf0>)
 8007c32:	895b      	ldrh	r3, [r3, #10]
 8007c34:	461a      	mov	r2, r3
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d802      	bhi.n	8007c42 <W25qxx_ReadPage+0x3a>
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d102      	bne.n	8007c48 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8007c42:	4b2d      	ldr	r3, [pc, #180]	; (8007cf8 <W25qxx_ReadPage+0xf0>)
 8007c44:	895b      	ldrh	r3, [r3, #10]
 8007c46:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	4a2a      	ldr	r2, [pc, #168]	; (8007cf8 <W25qxx_ReadPage+0xf0>)
 8007c50:	8952      	ldrh	r2, [r2, #10]
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d905      	bls.n	8007c62 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007c56:	4b28      	ldr	r3, [pc, #160]	; (8007cf8 <W25qxx_ReadPage+0xf0>)
 8007c58:	895b      	ldrh	r3, [r3, #10]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8007c62:	4b25      	ldr	r3, [pc, #148]	; (8007cf8 <W25qxx_ReadPage+0xf0>)
 8007c64:	895b      	ldrh	r3, [r3, #10]
 8007c66:	461a      	mov	r2, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	fb02 f303 	mul.w	r3, r2, r3
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	4413      	add	r3, r2
 8007c72:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8007c74:	2200      	movs	r2, #0
 8007c76:	2101      	movs	r1, #1
 8007c78:	4820      	ldr	r0, [pc, #128]	; (8007cfc <W25qxx_ReadPage+0xf4>)
 8007c7a:	f000 fbdf 	bl	800843c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8007c7e:	4b1e      	ldr	r3, [pc, #120]	; (8007cf8 <W25qxx_ReadPage+0xf0>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b08      	cmp	r3, #8
 8007c84:	d909      	bls.n	8007c9a <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8007c86:	200c      	movs	r0, #12
 8007c88:	f7ff fc90 	bl	80075ac <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	0e1b      	lsrs	r3, r3, #24
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff fc8a 	bl	80075ac <W25qxx_Spi>
 8007c98:	e002      	b.n	8007ca0 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8007c9a:	200b      	movs	r0, #11
 8007c9c:	f7ff fc86 	bl	80075ac <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	0c1b      	lsrs	r3, r3, #16
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff fc80 	bl	80075ac <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	0a1b      	lsrs	r3, r3, #8
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fc7a 	bl	80075ac <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7ff fc75 	bl	80075ac <W25qxx_Spi>
	W25qxx_Spi(0);
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	f7ff fc72 	bl	80075ac <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	2364      	movs	r3, #100	; 0x64
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	480b      	ldr	r0, [pc, #44]	; (8007d00 <W25qxx_ReadPage+0xf8>)
 8007cd2:	f001 fb7a 	bl	80093ca <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	2101      	movs	r1, #1
 8007cda:	4808      	ldr	r0, [pc, #32]	; (8007cfc <W25qxx_ReadPage+0xf4>)
 8007cdc:	f000 fbae 	bl	800843c <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	f000 f90d 	bl	8007f00 <HAL_Delay>
	w25qxx.Lock = 0;
 8007ce6:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <W25qxx_ReadPage+0xf0>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8007cee:	bf00      	nop
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000548 	.word	0x20000548
 8007cfc:	40020800 	.word	0x40020800
 8007d00:	2000008c 	.word	0x2000008c

08007d04 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8007d12:	4b2c      	ldr	r3, [pc, #176]	; (8007dc4 <W25qxx_ReadSector+0xc0>)
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d802      	bhi.n	8007d22 <W25qxx_ReadSector+0x1e>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d102      	bne.n	8007d28 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8007d22:	4b28      	ldr	r3, [pc, #160]	; (8007dc4 <W25qxx_ReadSector+0xc0>)
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8007d28:	4b26      	ldr	r3, [pc, #152]	; (8007dc4 <W25qxx_ReadSector+0xc0>)
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d243      	bcs.n	8007dba <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	441a      	add	r2, r3
 8007d38:	4b22      	ldr	r3, [pc, #136]	; (8007dc4 <W25qxx_ReadSector+0xc0>)
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d905      	bls.n	8007d4c <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8007d40:	4b20      	ldr	r3, [pc, #128]	; (8007dc4 <W25qxx_ReadSector+0xc0>)
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	e001      	b.n	8007d50 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8007d50:	68b8      	ldr	r0, [r7, #8]
 8007d52:	f7ff fe5d 	bl	8007a10 <W25qxx_SectorToPage>
 8007d56:	4602      	mov	r2, r0
 8007d58:	4b1a      	ldr	r3, [pc, #104]	; (8007dc4 <W25qxx_ReadSector+0xc0>)
 8007d5a:	895b      	ldrh	r3, [r3, #10]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d64:	4413      	add	r3, r2
 8007d66:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8007d68:	4b16      	ldr	r3, [pc, #88]	; (8007dc4 <W25qxx_ReadSector+0xc0>)
 8007d6a:	895b      	ldrh	r3, [r3, #10]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d74:	fb01 f202 	mul.w	r2, r1, r2
 8007d78:	1a9b      	subs	r3, r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	69f9      	ldr	r1, [r7, #28]
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7ff ff40 	bl	8007c08 <W25qxx_ReadPage>
		StartPage++;
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8007d8e:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <W25qxx_ReadSector+0xc0>)
 8007d90:	895b      	ldrh	r3, [r3, #10]
 8007d92:	461a      	mov	r2, r3
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	1a9a      	subs	r2, r3, r2
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8007d9e:	4b09      	ldr	r3, [pc, #36]	; (8007dc4 <W25qxx_ReadSector+0xc0>)
 8007da0:	895b      	ldrh	r3, [r3, #10]
 8007da2:	461a      	mov	r2, r3
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4413      	add	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	dce1      	bgt.n	8007d7c <W25qxx_ReadSector+0x78>
 8007db8:	e000      	b.n	8007dbc <W25qxx_ReadSector+0xb8>
		return;
 8007dba:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8007dbc:	3720      	adds	r7, #32
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20000548 	.word	0x20000548

08007dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007dcc:	480d      	ldr	r0, [pc, #52]	; (8007e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007dce:	490e      	ldr	r1, [pc, #56]	; (8007e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007dd0:	4a0e      	ldr	r2, [pc, #56]	; (8007e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007dd4:	e002      	b.n	8007ddc <LoopCopyDataInit>

08007dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007dda:	3304      	adds	r3, #4

08007ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007de0:	d3f9      	bcc.n	8007dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007de2:	4a0b      	ldr	r2, [pc, #44]	; (8007e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007de4:	4c0b      	ldr	r4, [pc, #44]	; (8007e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007de8:	e001      	b.n	8007dee <LoopFillZerobss>

08007dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007dec:	3204      	adds	r2, #4

08007dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007df0:	d3fb      	bcc.n	8007dea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007df2:	f7ff fbc9 	bl	8007588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007df6:	f002 fb65 	bl	800a4c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007dfa:	f7fe fffd 	bl	8006df8 <main>
  bx  lr    
 8007dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007e08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8007e0c:	0800c330 	.word	0x0800c330
  ldr r2, =_sbss
 8007e10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8007e14:	20000584 	.word	0x20000584

08007e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007e18:	e7fe      	b.n	8007e18 <ADC_IRQHandler>
	...

08007e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e20:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <HAL_Init+0x40>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a0d      	ldr	r2, [pc, #52]	; (8007e5c <HAL_Init+0x40>)
 8007e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007e2c:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <HAL_Init+0x40>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a0a      	ldr	r2, [pc, #40]	; (8007e5c <HAL_Init+0x40>)
 8007e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e38:	4b08      	ldr	r3, [pc, #32]	; (8007e5c <HAL_Init+0x40>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a07      	ldr	r2, [pc, #28]	; (8007e5c <HAL_Init+0x40>)
 8007e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e44:	2003      	movs	r0, #3
 8007e46:	f000 f931 	bl	80080ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	f000 f808 	bl	8007e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e50:	f7ff fa52 	bl	80072f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40023c00 	.word	0x40023c00

08007e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e68:	4b12      	ldr	r3, [pc, #72]	; (8007eb4 <HAL_InitTick+0x54>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <HAL_InitTick+0x58>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	4619      	mov	r1, r3
 8007e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f93b 	bl	80080fa <HAL_SYSTICK_Config>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e00e      	b.n	8007eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b0f      	cmp	r3, #15
 8007e92:	d80a      	bhi.n	8007eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e94:	2200      	movs	r2, #0
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	f000 f911 	bl	80080c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007ea0:	4a06      	ldr	r2, [pc, #24]	; (8007ebc <HAL_InitTick+0x5c>)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e000      	b.n	8007eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000000 	.word	0x20000000
 8007eb8:	20000008 	.word	0x20000008
 8007ebc:	20000004 	.word	0x20000004

08007ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ec4:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <HAL_IncTick+0x20>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <HAL_IncTick+0x24>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4413      	add	r3, r2
 8007ed0:	4a04      	ldr	r2, [pc, #16]	; (8007ee4 <HAL_IncTick+0x24>)
 8007ed2:	6013      	str	r3, [r2, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	20000008 	.word	0x20000008
 8007ee4:	20000570 	.word	0x20000570

08007ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  return uwTick;
 8007eec:	4b03      	ldr	r3, [pc, #12]	; (8007efc <HAL_GetTick+0x14>)
 8007eee:	681b      	ldr	r3, [r3, #0]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000570 	.word	0x20000570

08007f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007f08:	f7ff ffee 	bl	8007ee8 <HAL_GetTick>
 8007f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f18:	d005      	beq.n	8007f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007f1a:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <HAL_Delay+0x44>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007f26:	bf00      	nop
 8007f28:	f7ff ffde 	bl	8007ee8 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d8f7      	bhi.n	8007f28 <HAL_Delay+0x28>
  {
  }
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	20000008 	.word	0x20000008

08007f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f58:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <__NVIC_SetPriorityGrouping+0x44>)
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f64:	4013      	ands	r3, r2
 8007f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f7a:	4a04      	ldr	r2, [pc, #16]	; (8007f8c <__NVIC_SetPriorityGrouping+0x44>)
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	60d3      	str	r3, [r2, #12]
}
 8007f80:	bf00      	nop
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	e000ed00 	.word	0xe000ed00

08007f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f94:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	0a1b      	lsrs	r3, r3, #8
 8007f9a:	f003 0307 	and.w	r3, r3, #7
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	e000ed00 	.word	0xe000ed00

08007fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	db0a      	blt.n	8007fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	490c      	ldr	r1, [pc, #48]	; (8007ff8 <__NVIC_SetPriority+0x4c>)
 8007fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fca:	0112      	lsls	r2, r2, #4
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	440b      	add	r3, r1
 8007fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007fd4:	e00a      	b.n	8007fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	4908      	ldr	r1, [pc, #32]	; (8007ffc <__NVIC_SetPriority+0x50>)
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	3b04      	subs	r3, #4
 8007fe4:	0112      	lsls	r2, r2, #4
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	440b      	add	r3, r1
 8007fea:	761a      	strb	r2, [r3, #24]
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	e000e100 	.word	0xe000e100
 8007ffc:	e000ed00 	.word	0xe000ed00

08008000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008000:	b480      	push	{r7}
 8008002:	b089      	sub	sp, #36	; 0x24
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	f1c3 0307 	rsb	r3, r3, #7
 800801a:	2b04      	cmp	r3, #4
 800801c:	bf28      	it	cs
 800801e:	2304      	movcs	r3, #4
 8008020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	3304      	adds	r3, #4
 8008026:	2b06      	cmp	r3, #6
 8008028:	d902      	bls.n	8008030 <NVIC_EncodePriority+0x30>
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	3b03      	subs	r3, #3
 800802e:	e000      	b.n	8008032 <NVIC_EncodePriority+0x32>
 8008030:	2300      	movs	r3, #0
 8008032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008034:	f04f 32ff 	mov.w	r2, #4294967295
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	fa02 f303 	lsl.w	r3, r2, r3
 800803e:	43da      	mvns	r2, r3
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	401a      	ands	r2, r3
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008048:	f04f 31ff 	mov.w	r1, #4294967295
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	fa01 f303 	lsl.w	r3, r1, r3
 8008052:	43d9      	mvns	r1, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008058:	4313      	orrs	r3, r2
         );
}
 800805a:	4618      	mov	r0, r3
 800805c:	3724      	adds	r7, #36	; 0x24
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
	...

08008068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3b01      	subs	r3, #1
 8008074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008078:	d301      	bcc.n	800807e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800807a:	2301      	movs	r3, #1
 800807c:	e00f      	b.n	800809e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800807e:	4a0a      	ldr	r2, [pc, #40]	; (80080a8 <SysTick_Config+0x40>)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3b01      	subs	r3, #1
 8008084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008086:	210f      	movs	r1, #15
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	f7ff ff8e 	bl	8007fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008090:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <SysTick_Config+0x40>)
 8008092:	2200      	movs	r2, #0
 8008094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008096:	4b04      	ldr	r3, [pc, #16]	; (80080a8 <SysTick_Config+0x40>)
 8008098:	2207      	movs	r2, #7
 800809a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	e000e010 	.word	0xe000e010

080080ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff ff47 	bl	8007f48 <__NVIC_SetPriorityGrouping>
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b086      	sub	sp, #24
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	4603      	mov	r3, r0
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080d4:	f7ff ff5c 	bl	8007f90 <__NVIC_GetPriorityGrouping>
 80080d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	68b9      	ldr	r1, [r7, #8]
 80080de:	6978      	ldr	r0, [r7, #20]
 80080e0:	f7ff ff8e 	bl	8008000 <NVIC_EncodePriority>
 80080e4:	4602      	mov	r2, r0
 80080e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ea:	4611      	mov	r1, r2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff ff5d 	bl	8007fac <__NVIC_SetPriority>
}
 80080f2:	bf00      	nop
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff ffb0 	bl	8008068 <SysTick_Config>
 8008108:	4603      	mov	r3, r0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008114:	b480      	push	{r7}
 8008116:	b089      	sub	sp, #36	; 0x24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008122:	2300      	movs	r3, #0
 8008124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008126:	2300      	movs	r3, #0
 8008128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800812a:	2300      	movs	r3, #0
 800812c:	61fb      	str	r3, [r7, #28]
 800812e:	e165      	b.n	80083fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008130:	2201      	movs	r2, #1
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	fa02 f303 	lsl.w	r3, r2, r3
 8008138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4013      	ands	r3, r2
 8008142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	429a      	cmp	r2, r3
 800814a:	f040 8154 	bne.w	80083f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	2b01      	cmp	r3, #1
 8008158:	d005      	beq.n	8008166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008162:	2b02      	cmp	r3, #2
 8008164:	d130      	bne.n	80081c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	2203      	movs	r2, #3
 8008172:	fa02 f303 	lsl.w	r3, r2, r3
 8008176:	43db      	mvns	r3, r3
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	4013      	ands	r3, r2
 800817c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	fa02 f303 	lsl.w	r3, r2, r3
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	4313      	orrs	r3, r2
 800818e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800819c:	2201      	movs	r2, #1
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	fa02 f303 	lsl.w	r3, r2, r3
 80081a4:	43db      	mvns	r3, r3
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	4013      	ands	r3, r2
 80081aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	091b      	lsrs	r3, r3, #4
 80081b2:	f003 0201 	and.w	r2, r3, #1
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	4313      	orrs	r3, r2
 80081c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f003 0303 	and.w	r3, r3, #3
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d017      	beq.n	8008204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	2203      	movs	r2, #3
 80081e0:	fa02 f303 	lsl.w	r3, r2, r3
 80081e4:	43db      	mvns	r3, r3
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	4013      	ands	r3, r2
 80081ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	fa02 f303 	lsl.w	r3, r2, r3
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	2b02      	cmp	r3, #2
 800820e:	d123      	bne.n	8008258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	08da      	lsrs	r2, r3, #3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3208      	adds	r2, #8
 8008218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	220f      	movs	r2, #15
 8008228:	fa02 f303 	lsl.w	r3, r2, r3
 800822c:	43db      	mvns	r3, r3
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	4013      	ands	r3, r2
 8008232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	f003 0307 	and.w	r3, r3, #7
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	fa02 f303 	lsl.w	r3, r2, r3
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	4313      	orrs	r3, r2
 8008248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	08da      	lsrs	r2, r3, #3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	3208      	adds	r2, #8
 8008252:	69b9      	ldr	r1, [r7, #24]
 8008254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	2203      	movs	r2, #3
 8008264:	fa02 f303 	lsl.w	r3, r2, r3
 8008268:	43db      	mvns	r3, r3
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	4013      	ands	r3, r2
 800826e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f003 0203 	and.w	r2, r3, #3
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	fa02 f303 	lsl.w	r3, r2, r3
 8008280:	69ba      	ldr	r2, [r7, #24]
 8008282:	4313      	orrs	r3, r2
 8008284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 80ae 	beq.w	80083f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	4b5d      	ldr	r3, [pc, #372]	; (8008414 <HAL_GPIO_Init+0x300>)
 80082a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a2:	4a5c      	ldr	r2, [pc, #368]	; (8008414 <HAL_GPIO_Init+0x300>)
 80082a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082a8:	6453      	str	r3, [r2, #68]	; 0x44
 80082aa:	4b5a      	ldr	r3, [pc, #360]	; (8008414 <HAL_GPIO_Init+0x300>)
 80082ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082b6:	4a58      	ldr	r2, [pc, #352]	; (8008418 <HAL_GPIO_Init+0x304>)
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	089b      	lsrs	r3, r3, #2
 80082bc:	3302      	adds	r3, #2
 80082be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	220f      	movs	r2, #15
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	43db      	mvns	r3, r3
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	4013      	ands	r3, r2
 80082d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a4f      	ldr	r2, [pc, #316]	; (800841c <HAL_GPIO_Init+0x308>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d025      	beq.n	800832e <HAL_GPIO_Init+0x21a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a4e      	ldr	r2, [pc, #312]	; (8008420 <HAL_GPIO_Init+0x30c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d01f      	beq.n	800832a <HAL_GPIO_Init+0x216>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a4d      	ldr	r2, [pc, #308]	; (8008424 <HAL_GPIO_Init+0x310>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d019      	beq.n	8008326 <HAL_GPIO_Init+0x212>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a4c      	ldr	r2, [pc, #304]	; (8008428 <HAL_GPIO_Init+0x314>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d013      	beq.n	8008322 <HAL_GPIO_Init+0x20e>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a4b      	ldr	r2, [pc, #300]	; (800842c <HAL_GPIO_Init+0x318>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00d      	beq.n	800831e <HAL_GPIO_Init+0x20a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a4a      	ldr	r2, [pc, #296]	; (8008430 <HAL_GPIO_Init+0x31c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d007      	beq.n	800831a <HAL_GPIO_Init+0x206>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a49      	ldr	r2, [pc, #292]	; (8008434 <HAL_GPIO_Init+0x320>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d101      	bne.n	8008316 <HAL_GPIO_Init+0x202>
 8008312:	2306      	movs	r3, #6
 8008314:	e00c      	b.n	8008330 <HAL_GPIO_Init+0x21c>
 8008316:	2307      	movs	r3, #7
 8008318:	e00a      	b.n	8008330 <HAL_GPIO_Init+0x21c>
 800831a:	2305      	movs	r3, #5
 800831c:	e008      	b.n	8008330 <HAL_GPIO_Init+0x21c>
 800831e:	2304      	movs	r3, #4
 8008320:	e006      	b.n	8008330 <HAL_GPIO_Init+0x21c>
 8008322:	2303      	movs	r3, #3
 8008324:	e004      	b.n	8008330 <HAL_GPIO_Init+0x21c>
 8008326:	2302      	movs	r3, #2
 8008328:	e002      	b.n	8008330 <HAL_GPIO_Init+0x21c>
 800832a:	2301      	movs	r3, #1
 800832c:	e000      	b.n	8008330 <HAL_GPIO_Init+0x21c>
 800832e:	2300      	movs	r3, #0
 8008330:	69fa      	ldr	r2, [r7, #28]
 8008332:	f002 0203 	and.w	r2, r2, #3
 8008336:	0092      	lsls	r2, r2, #2
 8008338:	4093      	lsls	r3, r2
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	4313      	orrs	r3, r2
 800833e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008340:	4935      	ldr	r1, [pc, #212]	; (8008418 <HAL_GPIO_Init+0x304>)
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	089b      	lsrs	r3, r3, #2
 8008346:	3302      	adds	r3, #2
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800834e:	4b3a      	ldr	r3, [pc, #232]	; (8008438 <HAL_GPIO_Init+0x324>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	43db      	mvns	r3, r3
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	4013      	ands	r3, r2
 800835c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008372:	4a31      	ldr	r2, [pc, #196]	; (8008438 <HAL_GPIO_Init+0x324>)
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008378:	4b2f      	ldr	r3, [pc, #188]	; (8008438 <HAL_GPIO_Init+0x324>)
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	43db      	mvns	r3, r3
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	4013      	ands	r3, r2
 8008386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	4313      	orrs	r3, r2
 800839a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800839c:	4a26      	ldr	r2, [pc, #152]	; (8008438 <HAL_GPIO_Init+0x324>)
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80083a2:	4b25      	ldr	r3, [pc, #148]	; (8008438 <HAL_GPIO_Init+0x324>)
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	43db      	mvns	r3, r3
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	4013      	ands	r3, r2
 80083b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80083c6:	4a1c      	ldr	r2, [pc, #112]	; (8008438 <HAL_GPIO_Init+0x324>)
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80083cc:	4b1a      	ldr	r3, [pc, #104]	; (8008438 <HAL_GPIO_Init+0x324>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	43db      	mvns	r3, r3
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	4013      	ands	r3, r2
 80083da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80083f0:	4a11      	ldr	r2, [pc, #68]	; (8008438 <HAL_GPIO_Init+0x324>)
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	3301      	adds	r3, #1
 80083fa:	61fb      	str	r3, [r7, #28]
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	2b0f      	cmp	r3, #15
 8008400:	f67f ae96 	bls.w	8008130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	3724      	adds	r7, #36	; 0x24
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40023800 	.word	0x40023800
 8008418:	40013800 	.word	0x40013800
 800841c:	40020000 	.word	0x40020000
 8008420:	40020400 	.word	0x40020400
 8008424:	40020800 	.word	0x40020800
 8008428:	40020c00 	.word	0x40020c00
 800842c:	40021000 	.word	0x40021000
 8008430:	40021400 	.word	0x40021400
 8008434:	40021800 	.word	0x40021800
 8008438:	40013c00 	.word	0x40013c00

0800843c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	807b      	strh	r3, [r7, #2]
 8008448:	4613      	mov	r3, r2
 800844a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800844c:	787b      	ldrb	r3, [r7, #1]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008452:	887a      	ldrh	r2, [r7, #2]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008458:	e003      	b.n	8008462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800845a:	887b      	ldrh	r3, [r7, #2]
 800845c:	041a      	lsls	r2, r3, #16
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	619a      	str	r2, [r3, #24]
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
	...

08008470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e0cc      	b.n	800861e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008484:	4b68      	ldr	r3, [pc, #416]	; (8008628 <HAL_RCC_ClockConfig+0x1b8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 030f 	and.w	r3, r3, #15
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d90c      	bls.n	80084ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008492:	4b65      	ldr	r3, [pc, #404]	; (8008628 <HAL_RCC_ClockConfig+0x1b8>)
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800849a:	4b63      	ldr	r3, [pc, #396]	; (8008628 <HAL_RCC_ClockConfig+0x1b8>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 030f 	and.w	r3, r3, #15
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d001      	beq.n	80084ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e0b8      	b.n	800861e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d020      	beq.n	80084fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d005      	beq.n	80084d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084c4:	4b59      	ldr	r3, [pc, #356]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	4a58      	ldr	r2, [pc, #352]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 80084ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0308 	and.w	r3, r3, #8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084dc:	4b53      	ldr	r3, [pc, #332]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	4a52      	ldr	r2, [pc, #328]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 80084e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084e8:	4b50      	ldr	r3, [pc, #320]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	494d      	ldr	r1, [pc, #308]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d044      	beq.n	8008590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d107      	bne.n	800851e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800850e:	4b47      	ldr	r3, [pc, #284]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d119      	bne.n	800854e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e07f      	b.n	800861e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d003      	beq.n	800852e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800852a:	2b03      	cmp	r3, #3
 800852c:	d107      	bne.n	800853e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800852e:	4b3f      	ldr	r3, [pc, #252]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d109      	bne.n	800854e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e06f      	b.n	800861e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800853e:	4b3b      	ldr	r3, [pc, #236]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e067      	b.n	800861e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800854e:	4b37      	ldr	r3, [pc, #220]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f023 0203 	bic.w	r2, r3, #3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	4934      	ldr	r1, [pc, #208]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 800855c:	4313      	orrs	r3, r2
 800855e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008560:	f7ff fcc2 	bl	8007ee8 <HAL_GetTick>
 8008564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008566:	e00a      	b.n	800857e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008568:	f7ff fcbe 	bl	8007ee8 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	f241 3288 	movw	r2, #5000	; 0x1388
 8008576:	4293      	cmp	r3, r2
 8008578:	d901      	bls.n	800857e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e04f      	b.n	800861e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800857e:	4b2b      	ldr	r3, [pc, #172]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f003 020c 	and.w	r2, r3, #12
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	429a      	cmp	r2, r3
 800858e:	d1eb      	bne.n	8008568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008590:	4b25      	ldr	r3, [pc, #148]	; (8008628 <HAL_RCC_ClockConfig+0x1b8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d20c      	bcs.n	80085b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800859e:	4b22      	ldr	r3, [pc, #136]	; (8008628 <HAL_RCC_ClockConfig+0x1b8>)
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	b2d2      	uxtb	r2, r2
 80085a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085a6:	4b20      	ldr	r3, [pc, #128]	; (8008628 <HAL_RCC_ClockConfig+0x1b8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d001      	beq.n	80085b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e032      	b.n	800861e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d008      	beq.n	80085d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085c4:	4b19      	ldr	r3, [pc, #100]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	4916      	ldr	r1, [pc, #88]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d009      	beq.n	80085f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085e2:	4b12      	ldr	r3, [pc, #72]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	490e      	ldr	r1, [pc, #56]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085f6:	f000 f855 	bl	80086a4 <HAL_RCC_GetSysClockFreq>
 80085fa:	4602      	mov	r2, r0
 80085fc:	4b0b      	ldr	r3, [pc, #44]	; (800862c <HAL_RCC_ClockConfig+0x1bc>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	091b      	lsrs	r3, r3, #4
 8008602:	f003 030f 	and.w	r3, r3, #15
 8008606:	490a      	ldr	r1, [pc, #40]	; (8008630 <HAL_RCC_ClockConfig+0x1c0>)
 8008608:	5ccb      	ldrb	r3, [r1, r3]
 800860a:	fa22 f303 	lsr.w	r3, r2, r3
 800860e:	4a09      	ldr	r2, [pc, #36]	; (8008634 <HAL_RCC_ClockConfig+0x1c4>)
 8008610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008612:	4b09      	ldr	r3, [pc, #36]	; (8008638 <HAL_RCC_ClockConfig+0x1c8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff fc22 	bl	8007e60 <HAL_InitTick>

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	40023c00 	.word	0x40023c00
 800862c:	40023800 	.word	0x40023800
 8008630:	0800c234 	.word	0x0800c234
 8008634:	20000000 	.word	0x20000000
 8008638:	20000004 	.word	0x20000004

0800863c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008640:	4b03      	ldr	r3, [pc, #12]	; (8008650 <HAL_RCC_GetHCLKFreq+0x14>)
 8008642:	681b      	ldr	r3, [r3, #0]
}
 8008644:	4618      	mov	r0, r3
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20000000 	.word	0x20000000

08008654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008658:	f7ff fff0 	bl	800863c <HAL_RCC_GetHCLKFreq>
 800865c:	4602      	mov	r2, r0
 800865e:	4b05      	ldr	r3, [pc, #20]	; (8008674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	0a9b      	lsrs	r3, r3, #10
 8008664:	f003 0307 	and.w	r3, r3, #7
 8008668:	4903      	ldr	r1, [pc, #12]	; (8008678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800866a:	5ccb      	ldrb	r3, [r1, r3]
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008670:	4618      	mov	r0, r3
 8008672:	bd80      	pop	{r7, pc}
 8008674:	40023800 	.word	0x40023800
 8008678:	0800c244 	.word	0x0800c244

0800867c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008680:	f7ff ffdc 	bl	800863c <HAL_RCC_GetHCLKFreq>
 8008684:	4602      	mov	r2, r0
 8008686:	4b05      	ldr	r3, [pc, #20]	; (800869c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	0b5b      	lsrs	r3, r3, #13
 800868c:	f003 0307 	and.w	r3, r3, #7
 8008690:	4903      	ldr	r1, [pc, #12]	; (80086a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008692:	5ccb      	ldrb	r3, [r1, r3]
 8008694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008698:	4618      	mov	r0, r3
 800869a:	bd80      	pop	{r7, pc}
 800869c:	40023800 	.word	0x40023800
 80086a0:	0800c244 	.word	0x0800c244

080086a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086a8:	b0ae      	sub	sp, #184	; 0xb8
 80086aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086ca:	4bcb      	ldr	r3, [pc, #812]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 030c 	and.w	r3, r3, #12
 80086d2:	2b0c      	cmp	r3, #12
 80086d4:	f200 8206 	bhi.w	8008ae4 <HAL_RCC_GetSysClockFreq+0x440>
 80086d8:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80086da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086de:	bf00      	nop
 80086e0:	08008715 	.word	0x08008715
 80086e4:	08008ae5 	.word	0x08008ae5
 80086e8:	08008ae5 	.word	0x08008ae5
 80086ec:	08008ae5 	.word	0x08008ae5
 80086f0:	0800871d 	.word	0x0800871d
 80086f4:	08008ae5 	.word	0x08008ae5
 80086f8:	08008ae5 	.word	0x08008ae5
 80086fc:	08008ae5 	.word	0x08008ae5
 8008700:	08008725 	.word	0x08008725
 8008704:	08008ae5 	.word	0x08008ae5
 8008708:	08008ae5 	.word	0x08008ae5
 800870c:	08008ae5 	.word	0x08008ae5
 8008710:	08008915 	.word	0x08008915
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008714:	4bb9      	ldr	r3, [pc, #740]	; (80089fc <HAL_RCC_GetSysClockFreq+0x358>)
 8008716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800871a:	e1e7      	b.n	8008aec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800871c:	4bb8      	ldr	r3, [pc, #736]	; (8008a00 <HAL_RCC_GetSysClockFreq+0x35c>)
 800871e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008722:	e1e3      	b.n	8008aec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008724:	4bb4      	ldr	r3, [pc, #720]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800872c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008730:	4bb1      	ldr	r3, [pc, #708]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d071      	beq.n	8008820 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800873c:	4bae      	ldr	r3, [pc, #696]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	099b      	lsrs	r3, r3, #6
 8008742:	2200      	movs	r2, #0
 8008744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008748:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800874c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008754:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008758:	2300      	movs	r3, #0
 800875a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800875e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008762:	4622      	mov	r2, r4
 8008764:	462b      	mov	r3, r5
 8008766:	f04f 0000 	mov.w	r0, #0
 800876a:	f04f 0100 	mov.w	r1, #0
 800876e:	0159      	lsls	r1, r3, #5
 8008770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008774:	0150      	lsls	r0, r2, #5
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4621      	mov	r1, r4
 800877c:	1a51      	subs	r1, r2, r1
 800877e:	6439      	str	r1, [r7, #64]	; 0x40
 8008780:	4629      	mov	r1, r5
 8008782:	eb63 0301 	sbc.w	r3, r3, r1
 8008786:	647b      	str	r3, [r7, #68]	; 0x44
 8008788:	f04f 0200 	mov.w	r2, #0
 800878c:	f04f 0300 	mov.w	r3, #0
 8008790:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008794:	4649      	mov	r1, r9
 8008796:	018b      	lsls	r3, r1, #6
 8008798:	4641      	mov	r1, r8
 800879a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800879e:	4641      	mov	r1, r8
 80087a0:	018a      	lsls	r2, r1, #6
 80087a2:	4641      	mov	r1, r8
 80087a4:	1a51      	subs	r1, r2, r1
 80087a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80087a8:	4649      	mov	r1, r9
 80087aa:	eb63 0301 	sbc.w	r3, r3, r1
 80087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087b0:	f04f 0200 	mov.w	r2, #0
 80087b4:	f04f 0300 	mov.w	r3, #0
 80087b8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80087bc:	4649      	mov	r1, r9
 80087be:	00cb      	lsls	r3, r1, #3
 80087c0:	4641      	mov	r1, r8
 80087c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087c6:	4641      	mov	r1, r8
 80087c8:	00ca      	lsls	r2, r1, #3
 80087ca:	4610      	mov	r0, r2
 80087cc:	4619      	mov	r1, r3
 80087ce:	4603      	mov	r3, r0
 80087d0:	4622      	mov	r2, r4
 80087d2:	189b      	adds	r3, r3, r2
 80087d4:	633b      	str	r3, [r7, #48]	; 0x30
 80087d6:	462b      	mov	r3, r5
 80087d8:	460a      	mov	r2, r1
 80087da:	eb42 0303 	adc.w	r3, r2, r3
 80087de:	637b      	str	r3, [r7, #52]	; 0x34
 80087e0:	f04f 0200 	mov.w	r2, #0
 80087e4:	f04f 0300 	mov.w	r3, #0
 80087e8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80087ec:	4629      	mov	r1, r5
 80087ee:	024b      	lsls	r3, r1, #9
 80087f0:	4621      	mov	r1, r4
 80087f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80087f6:	4621      	mov	r1, r4
 80087f8:	024a      	lsls	r2, r1, #9
 80087fa:	4610      	mov	r0, r2
 80087fc:	4619      	mov	r1, r3
 80087fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008802:	2200      	movs	r2, #0
 8008804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800880c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008810:	f7f7 fd56 	bl	80002c0 <__aeabi_uldivmod>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4613      	mov	r3, r2
 800881a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800881e:	e067      	b.n	80088f0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008820:	4b75      	ldr	r3, [pc, #468]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	099b      	lsrs	r3, r3, #6
 8008826:	2200      	movs	r2, #0
 8008828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800882c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008830:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008838:	67bb      	str	r3, [r7, #120]	; 0x78
 800883a:	2300      	movs	r3, #0
 800883c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800883e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008842:	4622      	mov	r2, r4
 8008844:	462b      	mov	r3, r5
 8008846:	f04f 0000 	mov.w	r0, #0
 800884a:	f04f 0100 	mov.w	r1, #0
 800884e:	0159      	lsls	r1, r3, #5
 8008850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008854:	0150      	lsls	r0, r2, #5
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4621      	mov	r1, r4
 800885c:	1a51      	subs	r1, r2, r1
 800885e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008860:	4629      	mov	r1, r5
 8008862:	eb63 0301 	sbc.w	r3, r3, r1
 8008866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008874:	4649      	mov	r1, r9
 8008876:	018b      	lsls	r3, r1, #6
 8008878:	4641      	mov	r1, r8
 800887a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800887e:	4641      	mov	r1, r8
 8008880:	018a      	lsls	r2, r1, #6
 8008882:	4641      	mov	r1, r8
 8008884:	ebb2 0a01 	subs.w	sl, r2, r1
 8008888:	4649      	mov	r1, r9
 800888a:	eb63 0b01 	sbc.w	fp, r3, r1
 800888e:	f04f 0200 	mov.w	r2, #0
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800889a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800889e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088a2:	4692      	mov	sl, r2
 80088a4:	469b      	mov	fp, r3
 80088a6:	4623      	mov	r3, r4
 80088a8:	eb1a 0303 	adds.w	r3, sl, r3
 80088ac:	623b      	str	r3, [r7, #32]
 80088ae:	462b      	mov	r3, r5
 80088b0:	eb4b 0303 	adc.w	r3, fp, r3
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
 80088b6:	f04f 0200 	mov.w	r2, #0
 80088ba:	f04f 0300 	mov.w	r3, #0
 80088be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80088c2:	4629      	mov	r1, r5
 80088c4:	028b      	lsls	r3, r1, #10
 80088c6:	4621      	mov	r1, r4
 80088c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088cc:	4621      	mov	r1, r4
 80088ce:	028a      	lsls	r2, r1, #10
 80088d0:	4610      	mov	r0, r2
 80088d2:	4619      	mov	r1, r3
 80088d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088d8:	2200      	movs	r2, #0
 80088da:	673b      	str	r3, [r7, #112]	; 0x70
 80088dc:	677a      	str	r2, [r7, #116]	; 0x74
 80088de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80088e2:	f7f7 fced 	bl	80002c0 <__aeabi_uldivmod>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	4613      	mov	r3, r2
 80088ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088f0:	4b41      	ldr	r3, [pc, #260]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	0c1b      	lsrs	r3, r3, #16
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	3301      	adds	r3, #1
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800890a:	fbb2 f3f3 	udiv	r3, r2, r3
 800890e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008912:	e0eb      	b.n	8008aec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008914:	4b38      	ldr	r3, [pc, #224]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800891c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008920:	4b35      	ldr	r3, [pc, #212]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d06b      	beq.n	8008a04 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800892c:	4b32      	ldr	r3, [pc, #200]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	099b      	lsrs	r3, r3, #6
 8008932:	2200      	movs	r2, #0
 8008934:	66bb      	str	r3, [r7, #104]	; 0x68
 8008936:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800893a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893e:	663b      	str	r3, [r7, #96]	; 0x60
 8008940:	2300      	movs	r3, #0
 8008942:	667b      	str	r3, [r7, #100]	; 0x64
 8008944:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008948:	4622      	mov	r2, r4
 800894a:	462b      	mov	r3, r5
 800894c:	f04f 0000 	mov.w	r0, #0
 8008950:	f04f 0100 	mov.w	r1, #0
 8008954:	0159      	lsls	r1, r3, #5
 8008956:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800895a:	0150      	lsls	r0, r2, #5
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	4621      	mov	r1, r4
 8008962:	1a51      	subs	r1, r2, r1
 8008964:	61b9      	str	r1, [r7, #24]
 8008966:	4629      	mov	r1, r5
 8008968:	eb63 0301 	sbc.w	r3, r3, r1
 800896c:	61fb      	str	r3, [r7, #28]
 800896e:	f04f 0200 	mov.w	r2, #0
 8008972:	f04f 0300 	mov.w	r3, #0
 8008976:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800897a:	4659      	mov	r1, fp
 800897c:	018b      	lsls	r3, r1, #6
 800897e:	4651      	mov	r1, sl
 8008980:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008984:	4651      	mov	r1, sl
 8008986:	018a      	lsls	r2, r1, #6
 8008988:	4651      	mov	r1, sl
 800898a:	ebb2 0801 	subs.w	r8, r2, r1
 800898e:	4659      	mov	r1, fp
 8008990:	eb63 0901 	sbc.w	r9, r3, r1
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089a8:	4690      	mov	r8, r2
 80089aa:	4699      	mov	r9, r3
 80089ac:	4623      	mov	r3, r4
 80089ae:	eb18 0303 	adds.w	r3, r8, r3
 80089b2:	613b      	str	r3, [r7, #16]
 80089b4:	462b      	mov	r3, r5
 80089b6:	eb49 0303 	adc.w	r3, r9, r3
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	f04f 0200 	mov.w	r2, #0
 80089c0:	f04f 0300 	mov.w	r3, #0
 80089c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80089c8:	4629      	mov	r1, r5
 80089ca:	024b      	lsls	r3, r1, #9
 80089cc:	4621      	mov	r1, r4
 80089ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80089d2:	4621      	mov	r1, r4
 80089d4:	024a      	lsls	r2, r1, #9
 80089d6:	4610      	mov	r0, r2
 80089d8:	4619      	mov	r1, r3
 80089da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089de:	2200      	movs	r2, #0
 80089e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80089e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80089e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80089e8:	f7f7 fc6a 	bl	80002c0 <__aeabi_uldivmod>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4613      	mov	r3, r2
 80089f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089f6:	e065      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x420>
 80089f8:	40023800 	.word	0x40023800
 80089fc:	00f42400 	.word	0x00f42400
 8008a00:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a04:	4b3d      	ldr	r3, [pc, #244]	; (8008afc <HAL_RCC_GetSysClockFreq+0x458>)
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	099b      	lsrs	r3, r3, #6
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	4611      	mov	r1, r2
 8008a10:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008a14:	653b      	str	r3, [r7, #80]	; 0x50
 8008a16:	2300      	movs	r3, #0
 8008a18:	657b      	str	r3, [r7, #84]	; 0x54
 8008a1a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008a1e:	4642      	mov	r2, r8
 8008a20:	464b      	mov	r3, r9
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f04f 0100 	mov.w	r1, #0
 8008a2a:	0159      	lsls	r1, r3, #5
 8008a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a30:	0150      	lsls	r0, r2, #5
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4641      	mov	r1, r8
 8008a38:	1a51      	subs	r1, r2, r1
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	4649      	mov	r1, r9
 8008a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	f04f 0300 	mov.w	r3, #0
 8008a4c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008a50:	4659      	mov	r1, fp
 8008a52:	018b      	lsls	r3, r1, #6
 8008a54:	4651      	mov	r1, sl
 8008a56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a5a:	4651      	mov	r1, sl
 8008a5c:	018a      	lsls	r2, r1, #6
 8008a5e:	4651      	mov	r1, sl
 8008a60:	1a54      	subs	r4, r2, r1
 8008a62:	4659      	mov	r1, fp
 8008a64:	eb63 0501 	sbc.w	r5, r3, r1
 8008a68:	f04f 0200 	mov.w	r2, #0
 8008a6c:	f04f 0300 	mov.w	r3, #0
 8008a70:	00eb      	lsls	r3, r5, #3
 8008a72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a76:	00e2      	lsls	r2, r4, #3
 8008a78:	4614      	mov	r4, r2
 8008a7a:	461d      	mov	r5, r3
 8008a7c:	4643      	mov	r3, r8
 8008a7e:	18e3      	adds	r3, r4, r3
 8008a80:	603b      	str	r3, [r7, #0]
 8008a82:	464b      	mov	r3, r9
 8008a84:	eb45 0303 	adc.w	r3, r5, r3
 8008a88:	607b      	str	r3, [r7, #4]
 8008a8a:	f04f 0200 	mov.w	r2, #0
 8008a8e:	f04f 0300 	mov.w	r3, #0
 8008a92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a96:	4629      	mov	r1, r5
 8008a98:	028b      	lsls	r3, r1, #10
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	028a      	lsls	r2, r1, #10
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008aac:	2200      	movs	r2, #0
 8008aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ab0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008ab2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ab6:	f7f7 fc03 	bl	80002c0 <__aeabi_uldivmod>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4613      	mov	r3, r2
 8008ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008ac4:	4b0d      	ldr	r3, [pc, #52]	; (8008afc <HAL_RCC_GetSysClockFreq+0x458>)
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	0f1b      	lsrs	r3, r3, #28
 8008aca:	f003 0307 	and.w	r3, r3, #7
 8008ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008ad2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ad6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008ae2:	e003      	b.n	8008aec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008aea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008aec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	37b8      	adds	r7, #184	; 0xb8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008afa:	bf00      	nop
 8008afc:	40023800 	.word	0x40023800
 8008b00:	00f42400 	.word	0x00f42400

08008b04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e28d      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 8083 	beq.w	8008c2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008b24:	4b94      	ldr	r3, [pc, #592]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f003 030c 	and.w	r3, r3, #12
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	d019      	beq.n	8008b64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008b30:	4b91      	ldr	r3, [pc, #580]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d106      	bne.n	8008b4a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008b3c:	4b8e      	ldr	r3, [pc, #568]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b48:	d00c      	beq.n	8008b64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b4a:	4b8b      	ldr	r3, [pc, #556]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008b52:	2b0c      	cmp	r3, #12
 8008b54:	d112      	bne.n	8008b7c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b56:	4b88      	ldr	r3, [pc, #544]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b62:	d10b      	bne.n	8008b7c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b64:	4b84      	ldr	r3, [pc, #528]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d05b      	beq.n	8008c28 <HAL_RCC_OscConfig+0x124>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d157      	bne.n	8008c28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e25a      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b84:	d106      	bne.n	8008b94 <HAL_RCC_OscConfig+0x90>
 8008b86:	4b7c      	ldr	r3, [pc, #496]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a7b      	ldr	r2, [pc, #492]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	e01d      	b.n	8008bd0 <HAL_RCC_OscConfig+0xcc>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b9c:	d10c      	bne.n	8008bb8 <HAL_RCC_OscConfig+0xb4>
 8008b9e:	4b76      	ldr	r3, [pc, #472]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a75      	ldr	r2, [pc, #468]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	4b73      	ldr	r3, [pc, #460]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a72      	ldr	r2, [pc, #456]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	e00b      	b.n	8008bd0 <HAL_RCC_OscConfig+0xcc>
 8008bb8:	4b6f      	ldr	r3, [pc, #444]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a6e      	ldr	r2, [pc, #440]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	4b6c      	ldr	r3, [pc, #432]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a6b      	ldr	r2, [pc, #428]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d013      	beq.n	8008c00 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd8:	f7ff f986 	bl	8007ee8 <HAL_GetTick>
 8008bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bde:	e008      	b.n	8008bf2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008be0:	f7ff f982 	bl	8007ee8 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	2b64      	cmp	r3, #100	; 0x64
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e21f      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bf2:	4b61      	ldr	r3, [pc, #388]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0f0      	beq.n	8008be0 <HAL_RCC_OscConfig+0xdc>
 8008bfe:	e014      	b.n	8008c2a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c00:	f7ff f972 	bl	8007ee8 <HAL_GetTick>
 8008c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c06:	e008      	b.n	8008c1a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c08:	f7ff f96e 	bl	8007ee8 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	2b64      	cmp	r3, #100	; 0x64
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e20b      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c1a:	4b57      	ldr	r3, [pc, #348]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1f0      	bne.n	8008c08 <HAL_RCC_OscConfig+0x104>
 8008c26:	e000      	b.n	8008c2a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0302 	and.w	r3, r3, #2
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d06f      	beq.n	8008d16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008c36:	4b50      	ldr	r3, [pc, #320]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 030c 	and.w	r3, r3, #12
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d017      	beq.n	8008c72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008c42:	4b4d      	ldr	r3, [pc, #308]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008c4a:	2b08      	cmp	r3, #8
 8008c4c:	d105      	bne.n	8008c5a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008c4e:	4b4a      	ldr	r3, [pc, #296]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00b      	beq.n	8008c72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c5a:	4b47      	ldr	r3, [pc, #284]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008c62:	2b0c      	cmp	r3, #12
 8008c64:	d11c      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c66:	4b44      	ldr	r3, [pc, #272]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d116      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c72:	4b41      	ldr	r3, [pc, #260]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d005      	beq.n	8008c8a <HAL_RCC_OscConfig+0x186>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d001      	beq.n	8008c8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e1d3      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c8a:	4b3b      	ldr	r3, [pc, #236]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	4937      	ldr	r1, [pc, #220]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c9e:	e03a      	b.n	8008d16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d020      	beq.n	8008cea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ca8:	4b34      	ldr	r3, [pc, #208]	; (8008d7c <HAL_RCC_OscConfig+0x278>)
 8008caa:	2201      	movs	r2, #1
 8008cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cae:	f7ff f91b 	bl	8007ee8 <HAL_GetTick>
 8008cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cb4:	e008      	b.n	8008cc8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cb6:	f7ff f917 	bl	8007ee8 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e1b4      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cc8:	4b2b      	ldr	r3, [pc, #172]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0f0      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cd4:	4b28      	ldr	r3, [pc, #160]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	00db      	lsls	r3, r3, #3
 8008ce2:	4925      	ldr	r1, [pc, #148]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	600b      	str	r3, [r1, #0]
 8008ce8:	e015      	b.n	8008d16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cea:	4b24      	ldr	r3, [pc, #144]	; (8008d7c <HAL_RCC_OscConfig+0x278>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf0:	f7ff f8fa 	bl	8007ee8 <HAL_GetTick>
 8008cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cf8:	f7ff f8f6 	bl	8007ee8 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e193      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d0a:	4b1b      	ldr	r3, [pc, #108]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1f0      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0308 	and.w	r3, r3, #8
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d036      	beq.n	8008d90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d016      	beq.n	8008d58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d2a:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <HAL_RCC_OscConfig+0x27c>)
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d30:	f7ff f8da 	bl	8007ee8 <HAL_GetTick>
 8008d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d38:	f7ff f8d6 	bl	8007ee8 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e173      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d4a:	4b0b      	ldr	r3, [pc, #44]	; (8008d78 <HAL_RCC_OscConfig+0x274>)
 8008d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0f0      	beq.n	8008d38 <HAL_RCC_OscConfig+0x234>
 8008d56:	e01b      	b.n	8008d90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d58:	4b09      	ldr	r3, [pc, #36]	; (8008d80 <HAL_RCC_OscConfig+0x27c>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d5e:	f7ff f8c3 	bl	8007ee8 <HAL_GetTick>
 8008d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d64:	e00e      	b.n	8008d84 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d66:	f7ff f8bf 	bl	8007ee8 <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d907      	bls.n	8008d84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e15c      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
 8008d78:	40023800 	.word	0x40023800
 8008d7c:	42470000 	.word	0x42470000
 8008d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d84:	4b8a      	ldr	r3, [pc, #552]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d88:	f003 0302 	and.w	r3, r3, #2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1ea      	bne.n	8008d66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 8097 	beq.w	8008ecc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008da2:	4b83      	ldr	r3, [pc, #524]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10f      	bne.n	8008dce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dae:	2300      	movs	r3, #0
 8008db0:	60bb      	str	r3, [r7, #8]
 8008db2:	4b7f      	ldr	r3, [pc, #508]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db6:	4a7e      	ldr	r2, [pc, #504]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8008dbe:	4b7c      	ldr	r3, [pc, #496]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dc6:	60bb      	str	r3, [r7, #8]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dce:	4b79      	ldr	r3, [pc, #484]	; (8008fb4 <HAL_RCC_OscConfig+0x4b0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d118      	bne.n	8008e0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dda:	4b76      	ldr	r3, [pc, #472]	; (8008fb4 <HAL_RCC_OscConfig+0x4b0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a75      	ldr	r2, [pc, #468]	; (8008fb4 <HAL_RCC_OscConfig+0x4b0>)
 8008de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008de6:	f7ff f87f 	bl	8007ee8 <HAL_GetTick>
 8008dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dec:	e008      	b.n	8008e00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dee:	f7ff f87b 	bl	8007ee8 <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d901      	bls.n	8008e00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e118      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e00:	4b6c      	ldr	r3, [pc, #432]	; (8008fb4 <HAL_RCC_OscConfig+0x4b0>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0f0      	beq.n	8008dee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d106      	bne.n	8008e22 <HAL_RCC_OscConfig+0x31e>
 8008e14:	4b66      	ldr	r3, [pc, #408]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e18:	4a65      	ldr	r2, [pc, #404]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008e1a:	f043 0301 	orr.w	r3, r3, #1
 8008e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e20:	e01c      	b.n	8008e5c <HAL_RCC_OscConfig+0x358>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	2b05      	cmp	r3, #5
 8008e28:	d10c      	bne.n	8008e44 <HAL_RCC_OscConfig+0x340>
 8008e2a:	4b61      	ldr	r3, [pc, #388]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2e:	4a60      	ldr	r2, [pc, #384]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008e30:	f043 0304 	orr.w	r3, r3, #4
 8008e34:	6713      	str	r3, [r2, #112]	; 0x70
 8008e36:	4b5e      	ldr	r3, [pc, #376]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e3a:	4a5d      	ldr	r2, [pc, #372]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008e3c:	f043 0301 	orr.w	r3, r3, #1
 8008e40:	6713      	str	r3, [r2, #112]	; 0x70
 8008e42:	e00b      	b.n	8008e5c <HAL_RCC_OscConfig+0x358>
 8008e44:	4b5a      	ldr	r3, [pc, #360]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e48:	4a59      	ldr	r2, [pc, #356]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008e4a:	f023 0301 	bic.w	r3, r3, #1
 8008e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e50:	4b57      	ldr	r3, [pc, #348]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e54:	4a56      	ldr	r2, [pc, #344]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008e56:	f023 0304 	bic.w	r3, r3, #4
 8008e5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d015      	beq.n	8008e90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e64:	f7ff f840 	bl	8007ee8 <HAL_GetTick>
 8008e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e6a:	e00a      	b.n	8008e82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e6c:	f7ff f83c 	bl	8007ee8 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e0d7      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e82:	4b4b      	ldr	r3, [pc, #300]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0ee      	beq.n	8008e6c <HAL_RCC_OscConfig+0x368>
 8008e8e:	e014      	b.n	8008eba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e90:	f7ff f82a 	bl	8007ee8 <HAL_GetTick>
 8008e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e96:	e00a      	b.n	8008eae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e98:	f7ff f826 	bl	8007ee8 <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d901      	bls.n	8008eae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e0c1      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eae:	4b40      	ldr	r3, [pc, #256]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb2:	f003 0302 	and.w	r3, r3, #2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1ee      	bne.n	8008e98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d105      	bne.n	8008ecc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ec0:	4b3b      	ldr	r3, [pc, #236]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec4:	4a3a      	ldr	r2, [pc, #232]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 80ad 	beq.w	8009030 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ed6:	4b36      	ldr	r3, [pc, #216]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f003 030c 	and.w	r3, r3, #12
 8008ede:	2b08      	cmp	r3, #8
 8008ee0:	d060      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d145      	bne.n	8008f76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eea:	4b33      	ldr	r3, [pc, #204]	; (8008fb8 <HAL_RCC_OscConfig+0x4b4>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef0:	f7fe fffa 	bl	8007ee8 <HAL_GetTick>
 8008ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ef6:	e008      	b.n	8008f0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ef8:	f7fe fff6 	bl	8007ee8 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d901      	bls.n	8008f0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e093      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f0a:	4b29      	ldr	r3, [pc, #164]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1f0      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	69da      	ldr	r2, [r3, #28]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	019b      	lsls	r3, r3, #6
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2c:	085b      	lsrs	r3, r3, #1
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	041b      	lsls	r3, r3, #16
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f38:	061b      	lsls	r3, r3, #24
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f40:	071b      	lsls	r3, r3, #28
 8008f42:	491b      	ldr	r1, [pc, #108]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008f44:	4313      	orrs	r3, r2
 8008f46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f48:	4b1b      	ldr	r3, [pc, #108]	; (8008fb8 <HAL_RCC_OscConfig+0x4b4>)
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f4e:	f7fe ffcb 	bl	8007ee8 <HAL_GetTick>
 8008f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f54:	e008      	b.n	8008f68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f56:	f7fe ffc7 	bl	8007ee8 <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d901      	bls.n	8008f68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e064      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f68:	4b11      	ldr	r3, [pc, #68]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d0f0      	beq.n	8008f56 <HAL_RCC_OscConfig+0x452>
 8008f74:	e05c      	b.n	8009030 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f76:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <HAL_RCC_OscConfig+0x4b4>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7c:	f7fe ffb4 	bl	8007ee8 <HAL_GetTick>
 8008f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f84:	f7fe ffb0 	bl	8007ee8 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e04d      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f96:	4b06      	ldr	r3, [pc, #24]	; (8008fb0 <HAL_RCC_OscConfig+0x4ac>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f0      	bne.n	8008f84 <HAL_RCC_OscConfig+0x480>
 8008fa2:	e045      	b.n	8009030 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d107      	bne.n	8008fbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e040      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
 8008fb0:	40023800 	.word	0x40023800
 8008fb4:	40007000 	.word	0x40007000
 8008fb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fbc:	4b1f      	ldr	r3, [pc, #124]	; (800903c <HAL_RCC_OscConfig+0x538>)
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d030      	beq.n	800902c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d129      	bne.n	800902c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d122      	bne.n	800902c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008fec:	4013      	ands	r3, r2
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d119      	bne.n	800902c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009002:	085b      	lsrs	r3, r3, #1
 8009004:	3b01      	subs	r3, #1
 8009006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009008:	429a      	cmp	r2, r3
 800900a:	d10f      	bne.n	800902c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009018:	429a      	cmp	r2, r3
 800901a:	d107      	bne.n	800902c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009026:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009028:	429a      	cmp	r2, r3
 800902a:	d001      	beq.n	8009030 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	40023800 	.word	0x40023800

08009040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e07b      	b.n	800914a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	2b00      	cmp	r3, #0
 8009058:	d108      	bne.n	800906c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009062:	d009      	beq.n	8009078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	61da      	str	r2, [r3, #28]
 800906a:	e005      	b.n	8009078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d106      	bne.n	8009098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7fe f958 	bl	8007348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	f003 0302 	and.w	r3, r3, #2
 80090d4:	431a      	orrs	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	431a      	orrs	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fc:	ea42 0103 	orr.w	r1, r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009104:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	0c1b      	lsrs	r3, r3, #16
 8009116:	f003 0104 	and.w	r1, r3, #4
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911e:	f003 0210 	and.w	r2, r3, #16
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	69da      	ldr	r2, [r3, #28]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009138:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b088      	sub	sp, #32
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	603b      	str	r3, [r7, #0]
 800915e:	4613      	mov	r3, r2
 8009160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800916c:	2b01      	cmp	r3, #1
 800916e:	d101      	bne.n	8009174 <HAL_SPI_Transmit+0x22>
 8009170:	2302      	movs	r3, #2
 8009172:	e126      	b.n	80093c2 <HAL_SPI_Transmit+0x270>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800917c:	f7fe feb4 	bl	8007ee8 <HAL_GetTick>
 8009180:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009182:	88fb      	ldrh	r3, [r7, #6]
 8009184:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b01      	cmp	r3, #1
 8009190:	d002      	beq.n	8009198 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009192:	2302      	movs	r3, #2
 8009194:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009196:	e10b      	b.n	80093b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <HAL_SPI_Transmit+0x52>
 800919e:	88fb      	ldrh	r3, [r7, #6]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d102      	bne.n	80091aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091a8:	e102      	b.n	80093b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2203      	movs	r2, #3
 80091ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	88fa      	ldrh	r2, [r7, #6]
 80091c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	88fa      	ldrh	r2, [r7, #6]
 80091c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091f0:	d10f      	bne.n	8009212 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009210:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921c:	2b40      	cmp	r3, #64	; 0x40
 800921e:	d007      	beq.n	8009230 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800922e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009238:	d14b      	bne.n	80092d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <HAL_SPI_Transmit+0xf6>
 8009242:	8afb      	ldrh	r3, [r7, #22]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d13e      	bne.n	80092c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924c:	881a      	ldrh	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009258:	1c9a      	adds	r2, r3, #2
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009262:	b29b      	uxth	r3, r3
 8009264:	3b01      	subs	r3, #1
 8009266:	b29a      	uxth	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800926c:	e02b      	b.n	80092c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b02      	cmp	r3, #2
 800927a:	d112      	bne.n	80092a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009280:	881a      	ldrh	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928c:	1c9a      	adds	r2, r3, #2
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009296:	b29b      	uxth	r3, r3
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	86da      	strh	r2, [r3, #54]	; 0x36
 80092a0:	e011      	b.n	80092c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092a2:	f7fe fe21 	bl	8007ee8 <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d803      	bhi.n	80092ba <HAL_SPI_Transmit+0x168>
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d102      	bne.n	80092c0 <HAL_SPI_Transmit+0x16e>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d102      	bne.n	80092c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80092c4:	e074      	b.n	80093b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1ce      	bne.n	800926e <HAL_SPI_Transmit+0x11c>
 80092d0:	e04c      	b.n	800936c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <HAL_SPI_Transmit+0x18e>
 80092da:	8afb      	ldrh	r3, [r7, #22]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d140      	bne.n	8009362 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	330c      	adds	r3, #12
 80092ea:	7812      	ldrb	r2, [r2, #0]
 80092ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	3b01      	subs	r3, #1
 8009300:	b29a      	uxth	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009306:	e02c      	b.n	8009362 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b02      	cmp	r3, #2
 8009314:	d113      	bne.n	800933e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	330c      	adds	r3, #12
 8009320:	7812      	ldrb	r2, [r2, #0]
 8009322:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009332:	b29b      	uxth	r3, r3
 8009334:	3b01      	subs	r3, #1
 8009336:	b29a      	uxth	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	86da      	strh	r2, [r3, #54]	; 0x36
 800933c:	e011      	b.n	8009362 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800933e:	f7fe fdd3 	bl	8007ee8 <HAL_GetTick>
 8009342:	4602      	mov	r2, r0
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	429a      	cmp	r2, r3
 800934c:	d803      	bhi.n	8009356 <HAL_SPI_Transmit+0x204>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009354:	d102      	bne.n	800935c <HAL_SPI_Transmit+0x20a>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d102      	bne.n	8009362 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009360:	e026      	b.n	80093b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009366:	b29b      	uxth	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1cd      	bne.n	8009308 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fbcb 	bl	8009b0c <SPI_EndRxTxTransaction>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2220      	movs	r2, #32
 8009380:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10a      	bne.n	80093a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800938a:	2300      	movs	r3, #0
 800938c:	613b      	str	r3, [r7, #16]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	613b      	str	r3, [r7, #16]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	613b      	str	r3, [r7, #16]
 800939e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	77fb      	strb	r3, [r7, #31]
 80093ac:	e000      	b.n	80093b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80093ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80093c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3720      	adds	r7, #32
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b088      	sub	sp, #32
 80093ce:	af02      	add	r7, sp, #8
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	603b      	str	r3, [r7, #0]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093e6:	d112      	bne.n	800940e <HAL_SPI_Receive+0x44>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10e      	bne.n	800940e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2204      	movs	r2, #4
 80093f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80093f8:	88fa      	ldrh	r2, [r7, #6]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	4613      	mov	r3, r2
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 f8f1 	bl	80095ec <HAL_SPI_TransmitReceive>
 800940a:	4603      	mov	r3, r0
 800940c:	e0ea      	b.n	80095e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009414:	2b01      	cmp	r3, #1
 8009416:	d101      	bne.n	800941c <HAL_SPI_Receive+0x52>
 8009418:	2302      	movs	r3, #2
 800941a:	e0e3      	b.n	80095e4 <HAL_SPI_Receive+0x21a>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009424:	f7fe fd60 	bl	8007ee8 <HAL_GetTick>
 8009428:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b01      	cmp	r3, #1
 8009434:	d002      	beq.n	800943c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009436:	2302      	movs	r3, #2
 8009438:	75fb      	strb	r3, [r7, #23]
    goto error;
 800943a:	e0ca      	b.n	80095d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d002      	beq.n	8009448 <HAL_SPI_Receive+0x7e>
 8009442:	88fb      	ldrh	r3, [r7, #6]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800944c:	e0c1      	b.n	80095d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2204      	movs	r2, #4
 8009452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	88fa      	ldrh	r2, [r7, #6]
 8009466:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	88fa      	ldrh	r2, [r7, #6]
 800946c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009494:	d10f      	bne.n	80094b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80094b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c0:	2b40      	cmp	r3, #64	; 0x40
 80094c2:	d007      	beq.n	80094d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d162      	bne.n	80095a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80094dc:	e02e      	b.n	800953c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d115      	bne.n	8009518 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f103 020c 	add.w	r2, r3, #12
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	7812      	ldrb	r2, [r2, #0]
 80094fa:	b2d2      	uxtb	r2, r2
 80094fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800950c:	b29b      	uxth	r3, r3
 800950e:	3b01      	subs	r3, #1
 8009510:	b29a      	uxth	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009516:	e011      	b.n	800953c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009518:	f7fe fce6 	bl	8007ee8 <HAL_GetTick>
 800951c:	4602      	mov	r2, r0
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d803      	bhi.n	8009530 <HAL_SPI_Receive+0x166>
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952e:	d102      	bne.n	8009536 <HAL_SPI_Receive+0x16c>
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	75fb      	strb	r3, [r7, #23]
          goto error;
 800953a:	e04a      	b.n	80095d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009540:	b29b      	uxth	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1cb      	bne.n	80094de <HAL_SPI_Receive+0x114>
 8009546:	e031      	b.n	80095ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	2b01      	cmp	r3, #1
 8009554:	d113      	bne.n	800957e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68da      	ldr	r2, [r3, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009560:	b292      	uxth	r2, r2
 8009562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009568:	1c9a      	adds	r2, r3, #2
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009572:	b29b      	uxth	r3, r3
 8009574:	3b01      	subs	r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800957c:	e011      	b.n	80095a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800957e:	f7fe fcb3 	bl	8007ee8 <HAL_GetTick>
 8009582:	4602      	mov	r2, r0
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	d803      	bhi.n	8009596 <HAL_SPI_Receive+0x1cc>
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009594:	d102      	bne.n	800959c <HAL_SPI_Receive+0x1d2>
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d102      	bne.n	80095a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80095a0:	e017      	b.n	80095d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1cd      	bne.n	8009548 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 fa45 	bl	8009a40 <SPI_EndRxTransaction>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2220      	movs	r2, #32
 80095c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d002      	beq.n	80095d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	75fb      	strb	r3, [r7, #23]
 80095ce:	e000      	b.n	80095d2 <HAL_SPI_Receive+0x208>
  }

error :
 80095d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08c      	sub	sp, #48	; 0x30
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095fa:	2301      	movs	r3, #1
 80095fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800960a:	2b01      	cmp	r3, #1
 800960c:	d101      	bne.n	8009612 <HAL_SPI_TransmitReceive+0x26>
 800960e:	2302      	movs	r3, #2
 8009610:	e18a      	b.n	8009928 <HAL_SPI_TransmitReceive+0x33c>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800961a:	f7fe fc65 	bl	8007ee8 <HAL_GetTick>
 800961e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009630:	887b      	ldrh	r3, [r7, #2]
 8009632:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009638:	2b01      	cmp	r3, #1
 800963a:	d00f      	beq.n	800965c <HAL_SPI_TransmitReceive+0x70>
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009642:	d107      	bne.n	8009654 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d103      	bne.n	8009654 <HAL_SPI_TransmitReceive+0x68>
 800964c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009650:	2b04      	cmp	r3, #4
 8009652:	d003      	beq.n	800965c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009654:	2302      	movs	r3, #2
 8009656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800965a:	e15b      	b.n	8009914 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d005      	beq.n	800966e <HAL_SPI_TransmitReceive+0x82>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <HAL_SPI_TransmitReceive+0x82>
 8009668:	887b      	ldrh	r3, [r7, #2]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d103      	bne.n	8009676 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009674:	e14e      	b.n	8009914 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b04      	cmp	r3, #4
 8009680:	d003      	beq.n	800968a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2205      	movs	r2, #5
 8009686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	887a      	ldrh	r2, [r7, #2]
 800969a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	887a      	ldrh	r2, [r7, #2]
 80096a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	887a      	ldrh	r2, [r7, #2]
 80096ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	887a      	ldrh	r2, [r7, #2]
 80096b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ca:	2b40      	cmp	r3, #64	; 0x40
 80096cc:	d007      	beq.n	80096de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096e6:	d178      	bne.n	80097da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d002      	beq.n	80096f6 <HAL_SPI_TransmitReceive+0x10a>
 80096f0:	8b7b      	ldrh	r3, [r7, #26]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d166      	bne.n	80097c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fa:	881a      	ldrh	r2, [r3, #0]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009706:	1c9a      	adds	r2, r3, #2
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009710:	b29b      	uxth	r3, r3
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800971a:	e053      	b.n	80097c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b02      	cmp	r3, #2
 8009728:	d11b      	bne.n	8009762 <HAL_SPI_TransmitReceive+0x176>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800972e:	b29b      	uxth	r3, r3
 8009730:	2b00      	cmp	r3, #0
 8009732:	d016      	beq.n	8009762 <HAL_SPI_TransmitReceive+0x176>
 8009734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009736:	2b01      	cmp	r3, #1
 8009738:	d113      	bne.n	8009762 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973e:	881a      	ldrh	r2, [r3, #0]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974a:	1c9a      	adds	r2, r3, #2
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009754:	b29b      	uxth	r3, r3
 8009756:	3b01      	subs	r3, #1
 8009758:	b29a      	uxth	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800975e:	2300      	movs	r3, #0
 8009760:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b01      	cmp	r3, #1
 800976e:	d119      	bne.n	80097a4 <HAL_SPI_TransmitReceive+0x1b8>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009774:	b29b      	uxth	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	d014      	beq.n	80097a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68da      	ldr	r2, [r3, #12]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009784:	b292      	uxth	r2, r2
 8009786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978c:	1c9a      	adds	r2, r3, #2
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009796:	b29b      	uxth	r3, r3
 8009798:	3b01      	subs	r3, #1
 800979a:	b29a      	uxth	r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097a0:	2301      	movs	r3, #1
 80097a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80097a4:	f7fe fba0 	bl	8007ee8 <HAL_GetTick>
 80097a8:	4602      	mov	r2, r0
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d807      	bhi.n	80097c4 <HAL_SPI_TransmitReceive+0x1d8>
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ba:	d003      	beq.n	80097c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80097c2:	e0a7      	b.n	8009914 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1a6      	bne.n	800971c <HAL_SPI_TransmitReceive+0x130>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1a1      	bne.n	800971c <HAL_SPI_TransmitReceive+0x130>
 80097d8:	e07c      	b.n	80098d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <HAL_SPI_TransmitReceive+0x1fc>
 80097e2:	8b7b      	ldrh	r3, [r7, #26]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d16b      	bne.n	80098c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	330c      	adds	r3, #12
 80097f2:	7812      	ldrb	r2, [r2, #0]
 80097f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800980e:	e057      	b.n	80098c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b02      	cmp	r3, #2
 800981c:	d11c      	bne.n	8009858 <HAL_SPI_TransmitReceive+0x26c>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009822:	b29b      	uxth	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	d017      	beq.n	8009858 <HAL_SPI_TransmitReceive+0x26c>
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	2b01      	cmp	r3, #1
 800982c:	d114      	bne.n	8009858 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	330c      	adds	r3, #12
 8009838:	7812      	ldrb	r2, [r2, #0]
 800983a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800984a:	b29b      	uxth	r3, r3
 800984c:	3b01      	subs	r3, #1
 800984e:	b29a      	uxth	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b01      	cmp	r3, #1
 8009864:	d119      	bne.n	800989a <HAL_SPI_TransmitReceive+0x2ae>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800986a:	b29b      	uxth	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d014      	beq.n	800989a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68da      	ldr	r2, [r3, #12]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987a:	b2d2      	uxtb	r2, r2
 800987c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800988c:	b29b      	uxth	r3, r3
 800988e:	3b01      	subs	r3, #1
 8009890:	b29a      	uxth	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009896:	2301      	movs	r3, #1
 8009898:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800989a:	f7fe fb25 	bl	8007ee8 <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d803      	bhi.n	80098b2 <HAL_SPI_TransmitReceive+0x2c6>
 80098aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b0:	d102      	bne.n	80098b8 <HAL_SPI_TransmitReceive+0x2cc>
 80098b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d103      	bne.n	80098c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80098b8:	2303      	movs	r3, #3
 80098ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80098be:	e029      	b.n	8009914 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1a2      	bne.n	8009810 <HAL_SPI_TransmitReceive+0x224>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d19d      	bne.n	8009810 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 f917 	bl	8009b0c <SPI_EndRxTxTransaction>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d006      	beq.n	80098f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2220      	movs	r2, #32
 80098ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80098f0:	e010      	b.n	8009914 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10b      	bne.n	8009912 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098fa:	2300      	movs	r3, #0
 80098fc:	617b      	str	r3, [r7, #20]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	e000      	b.n	8009914 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009912:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009924:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009928:	4618      	mov	r0, r3
 800992a:	3730      	adds	r7, #48	; 0x30
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b088      	sub	sp, #32
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	4613      	mov	r3, r2
 800993e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009940:	f7fe fad2 	bl	8007ee8 <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009948:	1a9b      	subs	r3, r3, r2
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	4413      	add	r3, r2
 800994e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009950:	f7fe faca 	bl	8007ee8 <HAL_GetTick>
 8009954:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009956:	4b39      	ldr	r3, [pc, #228]	; (8009a3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	015b      	lsls	r3, r3, #5
 800995c:	0d1b      	lsrs	r3, r3, #20
 800995e:	69fa      	ldr	r2, [r7, #28]
 8009960:	fb02 f303 	mul.w	r3, r2, r3
 8009964:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009966:	e054      	b.n	8009a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996e:	d050      	beq.n	8009a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009970:	f7fe faba 	bl	8007ee8 <HAL_GetTick>
 8009974:	4602      	mov	r2, r0
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	69fa      	ldr	r2, [r7, #28]
 800997c:	429a      	cmp	r2, r3
 800997e:	d902      	bls.n	8009986 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d13d      	bne.n	8009a02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009994:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800999e:	d111      	bne.n	80099c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099a8:	d004      	beq.n	80099b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099b2:	d107      	bne.n	80099c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099cc:	d10f      	bne.n	80099ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e017      	b.n	8009a32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689a      	ldr	r2, [r3, #8]
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	bf0c      	ite	eq
 8009a22:	2301      	moveq	r3, #1
 8009a24:	2300      	movne	r3, #0
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	461a      	mov	r2, r3
 8009a2a:	79fb      	ldrb	r3, [r7, #7]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d19b      	bne.n	8009968 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3720      	adds	r7, #32
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000000 	.word	0x20000000

08009a40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af02      	add	r7, sp, #8
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a54:	d111      	bne.n	8009a7a <SPI_EndRxTransaction+0x3a>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a5e:	d004      	beq.n	8009a6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a68:	d107      	bne.n	8009a7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a82:	d12a      	bne.n	8009ada <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a8c:	d012      	beq.n	8009ab4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2200      	movs	r2, #0
 8009a96:	2180      	movs	r1, #128	; 0x80
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f7ff ff49 	bl	8009930 <SPI_WaitFlagStateUntilTimeout>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d02d      	beq.n	8009b00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa8:	f043 0220 	orr.w	r2, r3, #32
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e026      	b.n	8009b02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2200      	movs	r2, #0
 8009abc:	2101      	movs	r1, #1
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7ff ff36 	bl	8009930 <SPI_WaitFlagStateUntilTimeout>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d01a      	beq.n	8009b00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ace:	f043 0220 	orr.w	r2, r3, #32
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e013      	b.n	8009b02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2101      	movs	r1, #1
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7ff ff23 	bl	8009930 <SPI_WaitFlagStateUntilTimeout>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d007      	beq.n	8009b00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af4:	f043 0220 	orr.w	r2, r3, #32
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009afc:	2303      	movs	r3, #3
 8009afe:	e000      	b.n	8009b02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b18:	4b1b      	ldr	r3, [pc, #108]	; (8009b88 <SPI_EndRxTxTransaction+0x7c>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a1b      	ldr	r2, [pc, #108]	; (8009b8c <SPI_EndRxTxTransaction+0x80>)
 8009b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b22:	0d5b      	lsrs	r3, r3, #21
 8009b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b28:	fb02 f303 	mul.w	r3, r2, r3
 8009b2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b36:	d112      	bne.n	8009b5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2180      	movs	r1, #128	; 0x80
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff fef4 	bl	8009930 <SPI_WaitFlagStateUntilTimeout>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d016      	beq.n	8009b7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b52:	f043 0220 	orr.w	r2, r3, #32
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e00f      	b.n	8009b7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00a      	beq.n	8009b7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b74:	2b80      	cmp	r3, #128	; 0x80
 8009b76:	d0f2      	beq.n	8009b5e <SPI_EndRxTxTransaction+0x52>
 8009b78:	e000      	b.n	8009b7c <SPI_EndRxTxTransaction+0x70>
        break;
 8009b7a:	bf00      	nop
  }

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20000000 	.word	0x20000000
 8009b8c:	165e9f81 	.word	0x165e9f81

08009b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d101      	bne.n	8009ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e03f      	b.n	8009c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d106      	bne.n	8009bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7fd fc3e 	bl	8007438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2224      	movs	r2, #36	; 0x24
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68da      	ldr	r2, [r3, #12]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f9cb 	bl	8009f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	691a      	ldr	r2, [r3, #16]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	695a      	ldr	r2, [r3, #20]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68da      	ldr	r2, [r3, #12]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2220      	movs	r2, #32
 8009c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b08a      	sub	sp, #40	; 0x28
 8009c2e:	af02      	add	r7, sp, #8
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	603b      	str	r3, [r7, #0]
 8009c36:	4613      	mov	r3, r2
 8009c38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b20      	cmp	r3, #32
 8009c48:	d17c      	bne.n	8009d44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <HAL_UART_Transmit+0x2c>
 8009c50:	88fb      	ldrh	r3, [r7, #6]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e075      	b.n	8009d46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d101      	bne.n	8009c68 <HAL_UART_Transmit+0x3e>
 8009c64:	2302      	movs	r3, #2
 8009c66:	e06e      	b.n	8009d46 <HAL_UART_Transmit+0x11c>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2221      	movs	r2, #33	; 0x21
 8009c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c7e:	f7fe f933 	bl	8007ee8 <HAL_GetTick>
 8009c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	88fa      	ldrh	r2, [r7, #6]
 8009c88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	88fa      	ldrh	r2, [r7, #6]
 8009c8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c98:	d108      	bne.n	8009cac <HAL_UART_Transmit+0x82>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d104      	bne.n	8009cac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	61bb      	str	r3, [r7, #24]
 8009caa:	e003      	b.n	8009cb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009cbc:	e02a      	b.n	8009d14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2180      	movs	r1, #128	; 0x80
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f000 f8e2 	bl	8009e92 <UART_WaitOnFlagUntilTimeout>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e036      	b.n	8009d46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10b      	bne.n	8009cf6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	881b      	ldrh	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	3302      	adds	r3, #2
 8009cf2:	61bb      	str	r3, [r7, #24]
 8009cf4:	e007      	b.n	8009d06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	781a      	ldrb	r2, [r3, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	3301      	adds	r3, #1
 8009d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1cf      	bne.n	8009cbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2200      	movs	r2, #0
 8009d26:	2140      	movs	r1, #64	; 0x40
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 f8b2 	bl	8009e92 <UART_WaitOnFlagUntilTimeout>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d34:	2303      	movs	r3, #3
 8009d36:	e006      	b.n	8009d46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	e000      	b.n	8009d46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d44:	2302      	movs	r3, #2
  }
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3720      	adds	r7, #32
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b08a      	sub	sp, #40	; 0x28
 8009d52:	af02      	add	r7, sp, #8
 8009d54:	60f8      	str	r0, [r7, #12]
 8009d56:	60b9      	str	r1, [r7, #8]
 8009d58:	603b      	str	r3, [r7, #0]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b20      	cmp	r3, #32
 8009d6c:	f040 808c 	bne.w	8009e88 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d002      	beq.n	8009d7c <HAL_UART_Receive+0x2e>
 8009d76:	88fb      	ldrh	r3, [r7, #6]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e084      	b.n	8009e8a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d101      	bne.n	8009d8e <HAL_UART_Receive+0x40>
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	e07d      	b.n	8009e8a <HAL_UART_Receive+0x13c>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2222      	movs	r2, #34	; 0x22
 8009da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009daa:	f7fe f89d 	bl	8007ee8 <HAL_GetTick>
 8009dae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	88fa      	ldrh	r2, [r7, #6]
 8009db4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	88fa      	ldrh	r2, [r7, #6]
 8009dba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dc4:	d108      	bne.n	8009dd8 <HAL_UART_Receive+0x8a>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d104      	bne.n	8009dd8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	61bb      	str	r3, [r7, #24]
 8009dd6:	e003      	b.n	8009de0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009de8:	e043      	b.n	8009e72 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2200      	movs	r2, #0
 8009df2:	2120      	movs	r1, #32
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 f84c 	bl	8009e92 <UART_WaitOnFlagUntilTimeout>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e042      	b.n	8009e8a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10c      	bne.n	8009e24 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	3302      	adds	r3, #2
 8009e20:	61bb      	str	r3, [r7, #24]
 8009e22:	e01f      	b.n	8009e64 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e2c:	d007      	beq.n	8009e3e <HAL_UART_Receive+0xf0>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10a      	bne.n	8009e4c <HAL_UART_Receive+0xfe>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	701a      	strb	r2, [r3, #0]
 8009e4a:	e008      	b.n	8009e5e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	3301      	adds	r3, #1
 8009e62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1b6      	bne.n	8009dea <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	e000      	b.n	8009e8a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009e88:	2302      	movs	r3, #2
  }
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3720      	adds	r7, #32
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b090      	sub	sp, #64	; 0x40
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	60f8      	str	r0, [r7, #12]
 8009e9a:	60b9      	str	r1, [r7, #8]
 8009e9c:	603b      	str	r3, [r7, #0]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ea2:	e050      	b.n	8009f46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eaa:	d04c      	beq.n	8009f46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d007      	beq.n	8009ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009eb2:	f7fe f819 	bl	8007ee8 <HAL_GetTick>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d241      	bcs.n	8009f46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	330c      	adds	r3, #12
 8009ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ecc:	e853 3f00 	ldrex	r3, [r3]
 8009ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	330c      	adds	r3, #12
 8009ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ee2:	637a      	str	r2, [r7, #52]	; 0x34
 8009ee4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eea:	e841 2300 	strex	r3, r2, [r1]
 8009eee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e5      	bne.n	8009ec2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3314      	adds	r3, #20
 8009efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	e853 3f00 	ldrex	r3, [r3]
 8009f04:	613b      	str	r3, [r7, #16]
   return(result);
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	f023 0301 	bic.w	r3, r3, #1
 8009f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3314      	adds	r3, #20
 8009f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f16:	623a      	str	r2, [r7, #32]
 8009f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	69f9      	ldr	r1, [r7, #28]
 8009f1c:	6a3a      	ldr	r2, [r7, #32]
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e5      	bne.n	8009ef6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e00f      	b.n	8009f66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	4013      	ands	r3, r2
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	bf0c      	ite	eq
 8009f56:	2301      	moveq	r3, #1
 8009f58:	2300      	movne	r3, #0
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	79fb      	ldrb	r3, [r7, #7]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d09f      	beq.n	8009ea4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3740      	adds	r7, #64	; 0x40
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f74:	b0c0      	sub	sp, #256	; 0x100
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f8c:	68d9      	ldr	r1, [r3, #12]
 8009f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	ea40 0301 	orr.w	r3, r0, r1
 8009f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	431a      	orrs	r2, r3
 8009fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009fc8:	f021 010c 	bic.w	r1, r1, #12
 8009fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fd6:	430b      	orrs	r3, r1
 8009fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fea:	6999      	ldr	r1, [r3, #24]
 8009fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	ea40 0301 	orr.w	r3, r0, r1
 8009ff6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4b8f      	ldr	r3, [pc, #572]	; (800a23c <UART_SetConfig+0x2cc>)
 800a000:	429a      	cmp	r2, r3
 800a002:	d005      	beq.n	800a010 <UART_SetConfig+0xa0>
 800a004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	4b8d      	ldr	r3, [pc, #564]	; (800a240 <UART_SetConfig+0x2d0>)
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d104      	bne.n	800a01a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a010:	f7fe fb34 	bl	800867c <HAL_RCC_GetPCLK2Freq>
 800a014:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a018:	e003      	b.n	800a022 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a01a:	f7fe fb1b 	bl	8008654 <HAL_RCC_GetPCLK1Freq>
 800a01e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a02c:	f040 810c 	bne.w	800a248 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a034:	2200      	movs	r2, #0
 800a036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a03a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a03e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a042:	4622      	mov	r2, r4
 800a044:	462b      	mov	r3, r5
 800a046:	1891      	adds	r1, r2, r2
 800a048:	65b9      	str	r1, [r7, #88]	; 0x58
 800a04a:	415b      	adcs	r3, r3
 800a04c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a04e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a052:	4621      	mov	r1, r4
 800a054:	eb12 0801 	adds.w	r8, r2, r1
 800a058:	4629      	mov	r1, r5
 800a05a:	eb43 0901 	adc.w	r9, r3, r1
 800a05e:	f04f 0200 	mov.w	r2, #0
 800a062:	f04f 0300 	mov.w	r3, #0
 800a066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a06a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a06e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a072:	4690      	mov	r8, r2
 800a074:	4699      	mov	r9, r3
 800a076:	4623      	mov	r3, r4
 800a078:	eb18 0303 	adds.w	r3, r8, r3
 800a07c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a080:	462b      	mov	r3, r5
 800a082:	eb49 0303 	adc.w	r3, r9, r3
 800a086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a096:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a09a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a09e:	460b      	mov	r3, r1
 800a0a0:	18db      	adds	r3, r3, r3
 800a0a2:	653b      	str	r3, [r7, #80]	; 0x50
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	eb42 0303 	adc.w	r3, r2, r3
 800a0aa:	657b      	str	r3, [r7, #84]	; 0x54
 800a0ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a0b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a0b4:	f7f6 f904 	bl	80002c0 <__aeabi_uldivmod>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4b61      	ldr	r3, [pc, #388]	; (800a244 <UART_SetConfig+0x2d4>)
 800a0be:	fba3 2302 	umull	r2, r3, r3, r2
 800a0c2:	095b      	lsrs	r3, r3, #5
 800a0c4:	011c      	lsls	r4, r3, #4
 800a0c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a0d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a0d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a0d8:	4642      	mov	r2, r8
 800a0da:	464b      	mov	r3, r9
 800a0dc:	1891      	adds	r1, r2, r2
 800a0de:	64b9      	str	r1, [r7, #72]	; 0x48
 800a0e0:	415b      	adcs	r3, r3
 800a0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a0e8:	4641      	mov	r1, r8
 800a0ea:	eb12 0a01 	adds.w	sl, r2, r1
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	eb43 0b01 	adc.w	fp, r3, r1
 800a0f4:	f04f 0200 	mov.w	r2, #0
 800a0f8:	f04f 0300 	mov.w	r3, #0
 800a0fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a100:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a108:	4692      	mov	sl, r2
 800a10a:	469b      	mov	fp, r3
 800a10c:	4643      	mov	r3, r8
 800a10e:	eb1a 0303 	adds.w	r3, sl, r3
 800a112:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a116:	464b      	mov	r3, r9
 800a118:	eb4b 0303 	adc.w	r3, fp, r3
 800a11c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a12c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a134:	460b      	mov	r3, r1
 800a136:	18db      	adds	r3, r3, r3
 800a138:	643b      	str	r3, [r7, #64]	; 0x40
 800a13a:	4613      	mov	r3, r2
 800a13c:	eb42 0303 	adc.w	r3, r2, r3
 800a140:	647b      	str	r3, [r7, #68]	; 0x44
 800a142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a14a:	f7f6 f8b9 	bl	80002c0 <__aeabi_uldivmod>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	4611      	mov	r1, r2
 800a154:	4b3b      	ldr	r3, [pc, #236]	; (800a244 <UART_SetConfig+0x2d4>)
 800a156:	fba3 2301 	umull	r2, r3, r3, r1
 800a15a:	095b      	lsrs	r3, r3, #5
 800a15c:	2264      	movs	r2, #100	; 0x64
 800a15e:	fb02 f303 	mul.w	r3, r2, r3
 800a162:	1acb      	subs	r3, r1, r3
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a16a:	4b36      	ldr	r3, [pc, #216]	; (800a244 <UART_SetConfig+0x2d4>)
 800a16c:	fba3 2302 	umull	r2, r3, r3, r2
 800a170:	095b      	lsrs	r3, r3, #5
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a178:	441c      	add	r4, r3
 800a17a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a184:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a188:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a18c:	4642      	mov	r2, r8
 800a18e:	464b      	mov	r3, r9
 800a190:	1891      	adds	r1, r2, r2
 800a192:	63b9      	str	r1, [r7, #56]	; 0x38
 800a194:	415b      	adcs	r3, r3
 800a196:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a19c:	4641      	mov	r1, r8
 800a19e:	1851      	adds	r1, r2, r1
 800a1a0:	6339      	str	r1, [r7, #48]	; 0x30
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	414b      	adcs	r3, r1
 800a1a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a1a8:	f04f 0200 	mov.w	r2, #0
 800a1ac:	f04f 0300 	mov.w	r3, #0
 800a1b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a1b4:	4659      	mov	r1, fp
 800a1b6:	00cb      	lsls	r3, r1, #3
 800a1b8:	4651      	mov	r1, sl
 800a1ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1be:	4651      	mov	r1, sl
 800a1c0:	00ca      	lsls	r2, r1, #3
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	4642      	mov	r2, r8
 800a1ca:	189b      	adds	r3, r3, r2
 800a1cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1d0:	464b      	mov	r3, r9
 800a1d2:	460a      	mov	r2, r1
 800a1d4:	eb42 0303 	adc.w	r3, r2, r3
 800a1d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a1e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a1ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	18db      	adds	r3, r3, r3
 800a1f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	eb42 0303 	adc.w	r3, r2, r3
 800a1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a202:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a206:	f7f6 f85b 	bl	80002c0 <__aeabi_uldivmod>
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4b0d      	ldr	r3, [pc, #52]	; (800a244 <UART_SetConfig+0x2d4>)
 800a210:	fba3 1302 	umull	r1, r3, r3, r2
 800a214:	095b      	lsrs	r3, r3, #5
 800a216:	2164      	movs	r1, #100	; 0x64
 800a218:	fb01 f303 	mul.w	r3, r1, r3
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	3332      	adds	r3, #50	; 0x32
 800a222:	4a08      	ldr	r2, [pc, #32]	; (800a244 <UART_SetConfig+0x2d4>)
 800a224:	fba2 2303 	umull	r2, r3, r2, r3
 800a228:	095b      	lsrs	r3, r3, #5
 800a22a:	f003 0207 	and.w	r2, r3, #7
 800a22e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4422      	add	r2, r4
 800a236:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a238:	e105      	b.n	800a446 <UART_SetConfig+0x4d6>
 800a23a:	bf00      	nop
 800a23c:	40011000 	.word	0x40011000
 800a240:	40011400 	.word	0x40011400
 800a244:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a24c:	2200      	movs	r2, #0
 800a24e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a252:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a25a:	4642      	mov	r2, r8
 800a25c:	464b      	mov	r3, r9
 800a25e:	1891      	adds	r1, r2, r2
 800a260:	6239      	str	r1, [r7, #32]
 800a262:	415b      	adcs	r3, r3
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
 800a266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a26a:	4641      	mov	r1, r8
 800a26c:	1854      	adds	r4, r2, r1
 800a26e:	4649      	mov	r1, r9
 800a270:	eb43 0501 	adc.w	r5, r3, r1
 800a274:	f04f 0200 	mov.w	r2, #0
 800a278:	f04f 0300 	mov.w	r3, #0
 800a27c:	00eb      	lsls	r3, r5, #3
 800a27e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a282:	00e2      	lsls	r2, r4, #3
 800a284:	4614      	mov	r4, r2
 800a286:	461d      	mov	r5, r3
 800a288:	4643      	mov	r3, r8
 800a28a:	18e3      	adds	r3, r4, r3
 800a28c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a290:	464b      	mov	r3, r9
 800a292:	eb45 0303 	adc.w	r3, r5, r3
 800a296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a29a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a2aa:	f04f 0200 	mov.w	r2, #0
 800a2ae:	f04f 0300 	mov.w	r3, #0
 800a2b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	008b      	lsls	r3, r1, #2
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	008a      	lsls	r2, r1, #2
 800a2c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a2c8:	f7f5 fffa 	bl	80002c0 <__aeabi_uldivmod>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4b60      	ldr	r3, [pc, #384]	; (800a454 <UART_SetConfig+0x4e4>)
 800a2d2:	fba3 2302 	umull	r2, r3, r3, r2
 800a2d6:	095b      	lsrs	r3, r3, #5
 800a2d8:	011c      	lsls	r4, r3, #4
 800a2da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a2e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a2e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a2ec:	4642      	mov	r2, r8
 800a2ee:	464b      	mov	r3, r9
 800a2f0:	1891      	adds	r1, r2, r2
 800a2f2:	61b9      	str	r1, [r7, #24]
 800a2f4:	415b      	adcs	r3, r3
 800a2f6:	61fb      	str	r3, [r7, #28]
 800a2f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2fc:	4641      	mov	r1, r8
 800a2fe:	1851      	adds	r1, r2, r1
 800a300:	6139      	str	r1, [r7, #16]
 800a302:	4649      	mov	r1, r9
 800a304:	414b      	adcs	r3, r1
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	f04f 0200 	mov.w	r2, #0
 800a30c:	f04f 0300 	mov.w	r3, #0
 800a310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a314:	4659      	mov	r1, fp
 800a316:	00cb      	lsls	r3, r1, #3
 800a318:	4651      	mov	r1, sl
 800a31a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a31e:	4651      	mov	r1, sl
 800a320:	00ca      	lsls	r2, r1, #3
 800a322:	4610      	mov	r0, r2
 800a324:	4619      	mov	r1, r3
 800a326:	4603      	mov	r3, r0
 800a328:	4642      	mov	r2, r8
 800a32a:	189b      	adds	r3, r3, r2
 800a32c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a330:	464b      	mov	r3, r9
 800a332:	460a      	mov	r2, r1
 800a334:	eb42 0303 	adc.w	r3, r2, r3
 800a338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a33c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	67bb      	str	r3, [r7, #120]	; 0x78
 800a346:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a348:	f04f 0200 	mov.w	r2, #0
 800a34c:	f04f 0300 	mov.w	r3, #0
 800a350:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a354:	4649      	mov	r1, r9
 800a356:	008b      	lsls	r3, r1, #2
 800a358:	4641      	mov	r1, r8
 800a35a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a35e:	4641      	mov	r1, r8
 800a360:	008a      	lsls	r2, r1, #2
 800a362:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a366:	f7f5 ffab 	bl	80002c0 <__aeabi_uldivmod>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4b39      	ldr	r3, [pc, #228]	; (800a454 <UART_SetConfig+0x4e4>)
 800a370:	fba3 1302 	umull	r1, r3, r3, r2
 800a374:	095b      	lsrs	r3, r3, #5
 800a376:	2164      	movs	r1, #100	; 0x64
 800a378:	fb01 f303 	mul.w	r3, r1, r3
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	3332      	adds	r3, #50	; 0x32
 800a382:	4a34      	ldr	r2, [pc, #208]	; (800a454 <UART_SetConfig+0x4e4>)
 800a384:	fba2 2303 	umull	r2, r3, r2, r3
 800a388:	095b      	lsrs	r3, r3, #5
 800a38a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a38e:	441c      	add	r4, r3
 800a390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a394:	2200      	movs	r2, #0
 800a396:	673b      	str	r3, [r7, #112]	; 0x70
 800a398:	677a      	str	r2, [r7, #116]	; 0x74
 800a39a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a39e:	4642      	mov	r2, r8
 800a3a0:	464b      	mov	r3, r9
 800a3a2:	1891      	adds	r1, r2, r2
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	415b      	adcs	r3, r3
 800a3a8:	60fb      	str	r3, [r7, #12]
 800a3aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3ae:	4641      	mov	r1, r8
 800a3b0:	1851      	adds	r1, r2, r1
 800a3b2:	6039      	str	r1, [r7, #0]
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	414b      	adcs	r3, r1
 800a3b8:	607b      	str	r3, [r7, #4]
 800a3ba:	f04f 0200 	mov.w	r2, #0
 800a3be:	f04f 0300 	mov.w	r3, #0
 800a3c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a3c6:	4659      	mov	r1, fp
 800a3c8:	00cb      	lsls	r3, r1, #3
 800a3ca:	4651      	mov	r1, sl
 800a3cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3d0:	4651      	mov	r1, sl
 800a3d2:	00ca      	lsls	r2, r1, #3
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4603      	mov	r3, r0
 800a3da:	4642      	mov	r2, r8
 800a3dc:	189b      	adds	r3, r3, r2
 800a3de:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3e0:	464b      	mov	r3, r9
 800a3e2:	460a      	mov	r2, r1
 800a3e4:	eb42 0303 	adc.w	r3, r2, r3
 800a3e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	663b      	str	r3, [r7, #96]	; 0x60
 800a3f4:	667a      	str	r2, [r7, #100]	; 0x64
 800a3f6:	f04f 0200 	mov.w	r2, #0
 800a3fa:	f04f 0300 	mov.w	r3, #0
 800a3fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a402:	4649      	mov	r1, r9
 800a404:	008b      	lsls	r3, r1, #2
 800a406:	4641      	mov	r1, r8
 800a408:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a40c:	4641      	mov	r1, r8
 800a40e:	008a      	lsls	r2, r1, #2
 800a410:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a414:	f7f5 ff54 	bl	80002c0 <__aeabi_uldivmod>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4b0d      	ldr	r3, [pc, #52]	; (800a454 <UART_SetConfig+0x4e4>)
 800a41e:	fba3 1302 	umull	r1, r3, r3, r2
 800a422:	095b      	lsrs	r3, r3, #5
 800a424:	2164      	movs	r1, #100	; 0x64
 800a426:	fb01 f303 	mul.w	r3, r1, r3
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	011b      	lsls	r3, r3, #4
 800a42e:	3332      	adds	r3, #50	; 0x32
 800a430:	4a08      	ldr	r2, [pc, #32]	; (800a454 <UART_SetConfig+0x4e4>)
 800a432:	fba2 2303 	umull	r2, r3, r2, r3
 800a436:	095b      	lsrs	r3, r3, #5
 800a438:	f003 020f 	and.w	r2, r3, #15
 800a43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4422      	add	r2, r4
 800a444:	609a      	str	r2, [r3, #8]
}
 800a446:	bf00      	nop
 800a448:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a44c:	46bd      	mov	sp, r7
 800a44e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a452:	bf00      	nop
 800a454:	51eb851f 	.word	0x51eb851f

0800a458 <__assert_func>:
 800a458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a45a:	4614      	mov	r4, r2
 800a45c:	461a      	mov	r2, r3
 800a45e:	4b09      	ldr	r3, [pc, #36]	; (800a484 <__assert_func+0x2c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4605      	mov	r5, r0
 800a464:	68d8      	ldr	r0, [r3, #12]
 800a466:	b14c      	cbz	r4, 800a47c <__assert_func+0x24>
 800a468:	4b07      	ldr	r3, [pc, #28]	; (800a488 <__assert_func+0x30>)
 800a46a:	9100      	str	r1, [sp, #0]
 800a46c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a470:	4906      	ldr	r1, [pc, #24]	; (800a48c <__assert_func+0x34>)
 800a472:	462b      	mov	r3, r5
 800a474:	f000 f814 	bl	800a4a0 <fiprintf>
 800a478:	f000 fe28 	bl	800b0cc <abort>
 800a47c:	4b04      	ldr	r3, [pc, #16]	; (800a490 <__assert_func+0x38>)
 800a47e:	461c      	mov	r4, r3
 800a480:	e7f3      	b.n	800a46a <__assert_func+0x12>
 800a482:	bf00      	nop
 800a484:	2000000c 	.word	0x2000000c
 800a488:	0800c24c 	.word	0x0800c24c
 800a48c:	0800c259 	.word	0x0800c259
 800a490:	0800c287 	.word	0x0800c287

0800a494 <__errno>:
 800a494:	4b01      	ldr	r3, [pc, #4]	; (800a49c <__errno+0x8>)
 800a496:	6818      	ldr	r0, [r3, #0]
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	2000000c 	.word	0x2000000c

0800a4a0 <fiprintf>:
 800a4a0:	b40e      	push	{r1, r2, r3}
 800a4a2:	b503      	push	{r0, r1, lr}
 800a4a4:	4601      	mov	r1, r0
 800a4a6:	ab03      	add	r3, sp, #12
 800a4a8:	4805      	ldr	r0, [pc, #20]	; (800a4c0 <fiprintf+0x20>)
 800a4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ae:	6800      	ldr	r0, [r0, #0]
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	f000 f96b 	bl	800a78c <_vfiprintf_r>
 800a4b6:	b002      	add	sp, #8
 800a4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4bc:	b003      	add	sp, #12
 800a4be:	4770      	bx	lr
 800a4c0:	2000000c 	.word	0x2000000c

0800a4c4 <__libc_init_array>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	4d0d      	ldr	r5, [pc, #52]	; (800a4fc <__libc_init_array+0x38>)
 800a4c8:	4c0d      	ldr	r4, [pc, #52]	; (800a500 <__libc_init_array+0x3c>)
 800a4ca:	1b64      	subs	r4, r4, r5
 800a4cc:	10a4      	asrs	r4, r4, #2
 800a4ce:	2600      	movs	r6, #0
 800a4d0:	42a6      	cmp	r6, r4
 800a4d2:	d109      	bne.n	800a4e8 <__libc_init_array+0x24>
 800a4d4:	4d0b      	ldr	r5, [pc, #44]	; (800a504 <__libc_init_array+0x40>)
 800a4d6:	4c0c      	ldr	r4, [pc, #48]	; (800a508 <__libc_init_array+0x44>)
 800a4d8:	f001 f92e 	bl	800b738 <_init>
 800a4dc:	1b64      	subs	r4, r4, r5
 800a4de:	10a4      	asrs	r4, r4, #2
 800a4e0:	2600      	movs	r6, #0
 800a4e2:	42a6      	cmp	r6, r4
 800a4e4:	d105      	bne.n	800a4f2 <__libc_init_array+0x2e>
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}
 800a4e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ec:	4798      	blx	r3
 800a4ee:	3601      	adds	r6, #1
 800a4f0:	e7ee      	b.n	800a4d0 <__libc_init_array+0xc>
 800a4f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f6:	4798      	blx	r3
 800a4f8:	3601      	adds	r6, #1
 800a4fa:	e7f2      	b.n	800a4e2 <__libc_init_array+0x1e>
 800a4fc:	0800c328 	.word	0x0800c328
 800a500:	0800c328 	.word	0x0800c328
 800a504:	0800c328 	.word	0x0800c328
 800a508:	0800c32c 	.word	0x0800c32c

0800a50c <malloc>:
 800a50c:	4b02      	ldr	r3, [pc, #8]	; (800a518 <malloc+0xc>)
 800a50e:	4601      	mov	r1, r0
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	f000 b89d 	b.w	800a650 <_malloc_r>
 800a516:	bf00      	nop
 800a518:	2000000c 	.word	0x2000000c

0800a51c <free>:
 800a51c:	4b02      	ldr	r3, [pc, #8]	; (800a528 <free+0xc>)
 800a51e:	4601      	mov	r1, r0
 800a520:	6818      	ldr	r0, [r3, #0]
 800a522:	f000 b829 	b.w	800a578 <_free_r>
 800a526:	bf00      	nop
 800a528:	2000000c 	.word	0x2000000c

0800a52c <memcmp>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	3901      	subs	r1, #1
 800a530:	4402      	add	r2, r0
 800a532:	4290      	cmp	r0, r2
 800a534:	d101      	bne.n	800a53a <memcmp+0xe>
 800a536:	2000      	movs	r0, #0
 800a538:	e005      	b.n	800a546 <memcmp+0x1a>
 800a53a:	7803      	ldrb	r3, [r0, #0]
 800a53c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a540:	42a3      	cmp	r3, r4
 800a542:	d001      	beq.n	800a548 <memcmp+0x1c>
 800a544:	1b18      	subs	r0, r3, r4
 800a546:	bd10      	pop	{r4, pc}
 800a548:	3001      	adds	r0, #1
 800a54a:	e7f2      	b.n	800a532 <memcmp+0x6>

0800a54c <memcpy>:
 800a54c:	440a      	add	r2, r1
 800a54e:	4291      	cmp	r1, r2
 800a550:	f100 33ff 	add.w	r3, r0, #4294967295
 800a554:	d100      	bne.n	800a558 <memcpy+0xc>
 800a556:	4770      	bx	lr
 800a558:	b510      	push	{r4, lr}
 800a55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a55e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a562:	4291      	cmp	r1, r2
 800a564:	d1f9      	bne.n	800a55a <memcpy+0xe>
 800a566:	bd10      	pop	{r4, pc}

0800a568 <memset>:
 800a568:	4402      	add	r2, r0
 800a56a:	4603      	mov	r3, r0
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d100      	bne.n	800a572 <memset+0xa>
 800a570:	4770      	bx	lr
 800a572:	f803 1b01 	strb.w	r1, [r3], #1
 800a576:	e7f9      	b.n	800a56c <memset+0x4>

0800a578 <_free_r>:
 800a578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a57a:	2900      	cmp	r1, #0
 800a57c:	d044      	beq.n	800a608 <_free_r+0x90>
 800a57e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a582:	9001      	str	r0, [sp, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	f1a1 0404 	sub.w	r4, r1, #4
 800a58a:	bfb8      	it	lt
 800a58c:	18e4      	addlt	r4, r4, r3
 800a58e:	f000 ffc5 	bl	800b51c <__malloc_lock>
 800a592:	4a1e      	ldr	r2, [pc, #120]	; (800a60c <_free_r+0x94>)
 800a594:	9801      	ldr	r0, [sp, #4]
 800a596:	6813      	ldr	r3, [r2, #0]
 800a598:	b933      	cbnz	r3, 800a5a8 <_free_r+0x30>
 800a59a:	6063      	str	r3, [r4, #4]
 800a59c:	6014      	str	r4, [r2, #0]
 800a59e:	b003      	add	sp, #12
 800a5a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5a4:	f000 bfc0 	b.w	800b528 <__malloc_unlock>
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	d908      	bls.n	800a5be <_free_r+0x46>
 800a5ac:	6825      	ldr	r5, [r4, #0]
 800a5ae:	1961      	adds	r1, r4, r5
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf01      	itttt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	1949      	addeq	r1, r1, r5
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	e7ed      	b.n	800a59a <_free_r+0x22>
 800a5be:	461a      	mov	r2, r3
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	b10b      	cbz	r3, 800a5c8 <_free_r+0x50>
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	d9fa      	bls.n	800a5be <_free_r+0x46>
 800a5c8:	6811      	ldr	r1, [r2, #0]
 800a5ca:	1855      	adds	r5, r2, r1
 800a5cc:	42a5      	cmp	r5, r4
 800a5ce:	d10b      	bne.n	800a5e8 <_free_r+0x70>
 800a5d0:	6824      	ldr	r4, [r4, #0]
 800a5d2:	4421      	add	r1, r4
 800a5d4:	1854      	adds	r4, r2, r1
 800a5d6:	42a3      	cmp	r3, r4
 800a5d8:	6011      	str	r1, [r2, #0]
 800a5da:	d1e0      	bne.n	800a59e <_free_r+0x26>
 800a5dc:	681c      	ldr	r4, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	6053      	str	r3, [r2, #4]
 800a5e2:	4421      	add	r1, r4
 800a5e4:	6011      	str	r1, [r2, #0]
 800a5e6:	e7da      	b.n	800a59e <_free_r+0x26>
 800a5e8:	d902      	bls.n	800a5f0 <_free_r+0x78>
 800a5ea:	230c      	movs	r3, #12
 800a5ec:	6003      	str	r3, [r0, #0]
 800a5ee:	e7d6      	b.n	800a59e <_free_r+0x26>
 800a5f0:	6825      	ldr	r5, [r4, #0]
 800a5f2:	1961      	adds	r1, r4, r5
 800a5f4:	428b      	cmp	r3, r1
 800a5f6:	bf04      	itt	eq
 800a5f8:	6819      	ldreq	r1, [r3, #0]
 800a5fa:	685b      	ldreq	r3, [r3, #4]
 800a5fc:	6063      	str	r3, [r4, #4]
 800a5fe:	bf04      	itt	eq
 800a600:	1949      	addeq	r1, r1, r5
 800a602:	6021      	streq	r1, [r4, #0]
 800a604:	6054      	str	r4, [r2, #4]
 800a606:	e7ca      	b.n	800a59e <_free_r+0x26>
 800a608:	b003      	add	sp, #12
 800a60a:	bd30      	pop	{r4, r5, pc}
 800a60c:	20000574 	.word	0x20000574

0800a610 <sbrk_aligned>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	4e0e      	ldr	r6, [pc, #56]	; (800a64c <sbrk_aligned+0x3c>)
 800a614:	460c      	mov	r4, r1
 800a616:	6831      	ldr	r1, [r6, #0]
 800a618:	4605      	mov	r5, r0
 800a61a:	b911      	cbnz	r1, 800a622 <sbrk_aligned+0x12>
 800a61c:	f000 fb92 	bl	800ad44 <_sbrk_r>
 800a620:	6030      	str	r0, [r6, #0]
 800a622:	4621      	mov	r1, r4
 800a624:	4628      	mov	r0, r5
 800a626:	f000 fb8d 	bl	800ad44 <_sbrk_r>
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	d00a      	beq.n	800a644 <sbrk_aligned+0x34>
 800a62e:	1cc4      	adds	r4, r0, #3
 800a630:	f024 0403 	bic.w	r4, r4, #3
 800a634:	42a0      	cmp	r0, r4
 800a636:	d007      	beq.n	800a648 <sbrk_aligned+0x38>
 800a638:	1a21      	subs	r1, r4, r0
 800a63a:	4628      	mov	r0, r5
 800a63c:	f000 fb82 	bl	800ad44 <_sbrk_r>
 800a640:	3001      	adds	r0, #1
 800a642:	d101      	bne.n	800a648 <sbrk_aligned+0x38>
 800a644:	f04f 34ff 	mov.w	r4, #4294967295
 800a648:	4620      	mov	r0, r4
 800a64a:	bd70      	pop	{r4, r5, r6, pc}
 800a64c:	20000578 	.word	0x20000578

0800a650 <_malloc_r>:
 800a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a654:	1ccd      	adds	r5, r1, #3
 800a656:	f025 0503 	bic.w	r5, r5, #3
 800a65a:	3508      	adds	r5, #8
 800a65c:	2d0c      	cmp	r5, #12
 800a65e:	bf38      	it	cc
 800a660:	250c      	movcc	r5, #12
 800a662:	2d00      	cmp	r5, #0
 800a664:	4607      	mov	r7, r0
 800a666:	db01      	blt.n	800a66c <_malloc_r+0x1c>
 800a668:	42a9      	cmp	r1, r5
 800a66a:	d905      	bls.n	800a678 <_malloc_r+0x28>
 800a66c:	230c      	movs	r3, #12
 800a66e:	603b      	str	r3, [r7, #0]
 800a670:	2600      	movs	r6, #0
 800a672:	4630      	mov	r0, r6
 800a674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a678:	4e2e      	ldr	r6, [pc, #184]	; (800a734 <_malloc_r+0xe4>)
 800a67a:	f000 ff4f 	bl	800b51c <__malloc_lock>
 800a67e:	6833      	ldr	r3, [r6, #0]
 800a680:	461c      	mov	r4, r3
 800a682:	bb34      	cbnz	r4, 800a6d2 <_malloc_r+0x82>
 800a684:	4629      	mov	r1, r5
 800a686:	4638      	mov	r0, r7
 800a688:	f7ff ffc2 	bl	800a610 <sbrk_aligned>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	4604      	mov	r4, r0
 800a690:	d14d      	bne.n	800a72e <_malloc_r+0xde>
 800a692:	6834      	ldr	r4, [r6, #0]
 800a694:	4626      	mov	r6, r4
 800a696:	2e00      	cmp	r6, #0
 800a698:	d140      	bne.n	800a71c <_malloc_r+0xcc>
 800a69a:	6823      	ldr	r3, [r4, #0]
 800a69c:	4631      	mov	r1, r6
 800a69e:	4638      	mov	r0, r7
 800a6a0:	eb04 0803 	add.w	r8, r4, r3
 800a6a4:	f000 fb4e 	bl	800ad44 <_sbrk_r>
 800a6a8:	4580      	cmp	r8, r0
 800a6aa:	d13a      	bne.n	800a722 <_malloc_r+0xd2>
 800a6ac:	6821      	ldr	r1, [r4, #0]
 800a6ae:	3503      	adds	r5, #3
 800a6b0:	1a6d      	subs	r5, r5, r1
 800a6b2:	f025 0503 	bic.w	r5, r5, #3
 800a6b6:	3508      	adds	r5, #8
 800a6b8:	2d0c      	cmp	r5, #12
 800a6ba:	bf38      	it	cc
 800a6bc:	250c      	movcc	r5, #12
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f7ff ffa5 	bl	800a610 <sbrk_aligned>
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	d02b      	beq.n	800a722 <_malloc_r+0xd2>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	442b      	add	r3, r5
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	e00e      	b.n	800a6f0 <_malloc_r+0xa0>
 800a6d2:	6822      	ldr	r2, [r4, #0]
 800a6d4:	1b52      	subs	r2, r2, r5
 800a6d6:	d41e      	bmi.n	800a716 <_malloc_r+0xc6>
 800a6d8:	2a0b      	cmp	r2, #11
 800a6da:	d916      	bls.n	800a70a <_malloc_r+0xba>
 800a6dc:	1961      	adds	r1, r4, r5
 800a6de:	42a3      	cmp	r3, r4
 800a6e0:	6025      	str	r5, [r4, #0]
 800a6e2:	bf18      	it	ne
 800a6e4:	6059      	strne	r1, [r3, #4]
 800a6e6:	6863      	ldr	r3, [r4, #4]
 800a6e8:	bf08      	it	eq
 800a6ea:	6031      	streq	r1, [r6, #0]
 800a6ec:	5162      	str	r2, [r4, r5]
 800a6ee:	604b      	str	r3, [r1, #4]
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	f104 060b 	add.w	r6, r4, #11
 800a6f6:	f000 ff17 	bl	800b528 <__malloc_unlock>
 800a6fa:	f026 0607 	bic.w	r6, r6, #7
 800a6fe:	1d23      	adds	r3, r4, #4
 800a700:	1af2      	subs	r2, r6, r3
 800a702:	d0b6      	beq.n	800a672 <_malloc_r+0x22>
 800a704:	1b9b      	subs	r3, r3, r6
 800a706:	50a3      	str	r3, [r4, r2]
 800a708:	e7b3      	b.n	800a672 <_malloc_r+0x22>
 800a70a:	6862      	ldr	r2, [r4, #4]
 800a70c:	42a3      	cmp	r3, r4
 800a70e:	bf0c      	ite	eq
 800a710:	6032      	streq	r2, [r6, #0]
 800a712:	605a      	strne	r2, [r3, #4]
 800a714:	e7ec      	b.n	800a6f0 <_malloc_r+0xa0>
 800a716:	4623      	mov	r3, r4
 800a718:	6864      	ldr	r4, [r4, #4]
 800a71a:	e7b2      	b.n	800a682 <_malloc_r+0x32>
 800a71c:	4634      	mov	r4, r6
 800a71e:	6876      	ldr	r6, [r6, #4]
 800a720:	e7b9      	b.n	800a696 <_malloc_r+0x46>
 800a722:	230c      	movs	r3, #12
 800a724:	603b      	str	r3, [r7, #0]
 800a726:	4638      	mov	r0, r7
 800a728:	f000 fefe 	bl	800b528 <__malloc_unlock>
 800a72c:	e7a1      	b.n	800a672 <_malloc_r+0x22>
 800a72e:	6025      	str	r5, [r4, #0]
 800a730:	e7de      	b.n	800a6f0 <_malloc_r+0xa0>
 800a732:	bf00      	nop
 800a734:	20000574 	.word	0x20000574

0800a738 <__sfputc_r>:
 800a738:	6893      	ldr	r3, [r2, #8]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	b410      	push	{r4}
 800a740:	6093      	str	r3, [r2, #8]
 800a742:	da08      	bge.n	800a756 <__sfputc_r+0x1e>
 800a744:	6994      	ldr	r4, [r2, #24]
 800a746:	42a3      	cmp	r3, r4
 800a748:	db01      	blt.n	800a74e <__sfputc_r+0x16>
 800a74a:	290a      	cmp	r1, #10
 800a74c:	d103      	bne.n	800a756 <__sfputc_r+0x1e>
 800a74e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a752:	f000 bbfb 	b.w	800af4c <__swbuf_r>
 800a756:	6813      	ldr	r3, [r2, #0]
 800a758:	1c58      	adds	r0, r3, #1
 800a75a:	6010      	str	r0, [r2, #0]
 800a75c:	7019      	strb	r1, [r3, #0]
 800a75e:	4608      	mov	r0, r1
 800a760:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <__sfputs_r>:
 800a766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a768:	4606      	mov	r6, r0
 800a76a:	460f      	mov	r7, r1
 800a76c:	4614      	mov	r4, r2
 800a76e:	18d5      	adds	r5, r2, r3
 800a770:	42ac      	cmp	r4, r5
 800a772:	d101      	bne.n	800a778 <__sfputs_r+0x12>
 800a774:	2000      	movs	r0, #0
 800a776:	e007      	b.n	800a788 <__sfputs_r+0x22>
 800a778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77c:	463a      	mov	r2, r7
 800a77e:	4630      	mov	r0, r6
 800a780:	f7ff ffda 	bl	800a738 <__sfputc_r>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d1f3      	bne.n	800a770 <__sfputs_r+0xa>
 800a788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a78c <_vfiprintf_r>:
 800a78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a790:	460d      	mov	r5, r1
 800a792:	b09d      	sub	sp, #116	; 0x74
 800a794:	4614      	mov	r4, r2
 800a796:	4698      	mov	r8, r3
 800a798:	4606      	mov	r6, r0
 800a79a:	b118      	cbz	r0, 800a7a4 <_vfiprintf_r+0x18>
 800a79c:	6983      	ldr	r3, [r0, #24]
 800a79e:	b90b      	cbnz	r3, 800a7a4 <_vfiprintf_r+0x18>
 800a7a0:	f000 fdb6 	bl	800b310 <__sinit>
 800a7a4:	4b89      	ldr	r3, [pc, #548]	; (800a9cc <_vfiprintf_r+0x240>)
 800a7a6:	429d      	cmp	r5, r3
 800a7a8:	d11b      	bne.n	800a7e2 <_vfiprintf_r+0x56>
 800a7aa:	6875      	ldr	r5, [r6, #4]
 800a7ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ae:	07d9      	lsls	r1, r3, #31
 800a7b0:	d405      	bmi.n	800a7be <_vfiprintf_r+0x32>
 800a7b2:	89ab      	ldrh	r3, [r5, #12]
 800a7b4:	059a      	lsls	r2, r3, #22
 800a7b6:	d402      	bmi.n	800a7be <_vfiprintf_r+0x32>
 800a7b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7ba:	f000 fe47 	bl	800b44c <__retarget_lock_acquire_recursive>
 800a7be:	89ab      	ldrh	r3, [r5, #12]
 800a7c0:	071b      	lsls	r3, r3, #28
 800a7c2:	d501      	bpl.n	800a7c8 <_vfiprintf_r+0x3c>
 800a7c4:	692b      	ldr	r3, [r5, #16]
 800a7c6:	b9eb      	cbnz	r3, 800a804 <_vfiprintf_r+0x78>
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f000 fc10 	bl	800aff0 <__swsetup_r>
 800a7d0:	b1c0      	cbz	r0, 800a804 <_vfiprintf_r+0x78>
 800a7d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7d4:	07dc      	lsls	r4, r3, #31
 800a7d6:	d50e      	bpl.n	800a7f6 <_vfiprintf_r+0x6a>
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7dc:	b01d      	add	sp, #116	; 0x74
 800a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e2:	4b7b      	ldr	r3, [pc, #492]	; (800a9d0 <_vfiprintf_r+0x244>)
 800a7e4:	429d      	cmp	r5, r3
 800a7e6:	d101      	bne.n	800a7ec <_vfiprintf_r+0x60>
 800a7e8:	68b5      	ldr	r5, [r6, #8]
 800a7ea:	e7df      	b.n	800a7ac <_vfiprintf_r+0x20>
 800a7ec:	4b79      	ldr	r3, [pc, #484]	; (800a9d4 <_vfiprintf_r+0x248>)
 800a7ee:	429d      	cmp	r5, r3
 800a7f0:	bf08      	it	eq
 800a7f2:	68f5      	ldreq	r5, [r6, #12]
 800a7f4:	e7da      	b.n	800a7ac <_vfiprintf_r+0x20>
 800a7f6:	89ab      	ldrh	r3, [r5, #12]
 800a7f8:	0598      	lsls	r0, r3, #22
 800a7fa:	d4ed      	bmi.n	800a7d8 <_vfiprintf_r+0x4c>
 800a7fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7fe:	f000 fe26 	bl	800b44e <__retarget_lock_release_recursive>
 800a802:	e7e9      	b.n	800a7d8 <_vfiprintf_r+0x4c>
 800a804:	2300      	movs	r3, #0
 800a806:	9309      	str	r3, [sp, #36]	; 0x24
 800a808:	2320      	movs	r3, #32
 800a80a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a80e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a812:	2330      	movs	r3, #48	; 0x30
 800a814:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a9d8 <_vfiprintf_r+0x24c>
 800a818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a81c:	f04f 0901 	mov.w	r9, #1
 800a820:	4623      	mov	r3, r4
 800a822:	469a      	mov	sl, r3
 800a824:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a828:	b10a      	cbz	r2, 800a82e <_vfiprintf_r+0xa2>
 800a82a:	2a25      	cmp	r2, #37	; 0x25
 800a82c:	d1f9      	bne.n	800a822 <_vfiprintf_r+0x96>
 800a82e:	ebba 0b04 	subs.w	fp, sl, r4
 800a832:	d00b      	beq.n	800a84c <_vfiprintf_r+0xc0>
 800a834:	465b      	mov	r3, fp
 800a836:	4622      	mov	r2, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	4630      	mov	r0, r6
 800a83c:	f7ff ff93 	bl	800a766 <__sfputs_r>
 800a840:	3001      	adds	r0, #1
 800a842:	f000 80aa 	beq.w	800a99a <_vfiprintf_r+0x20e>
 800a846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a848:	445a      	add	r2, fp
 800a84a:	9209      	str	r2, [sp, #36]	; 0x24
 800a84c:	f89a 3000 	ldrb.w	r3, [sl]
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 80a2 	beq.w	800a99a <_vfiprintf_r+0x20e>
 800a856:	2300      	movs	r3, #0
 800a858:	f04f 32ff 	mov.w	r2, #4294967295
 800a85c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a860:	f10a 0a01 	add.w	sl, sl, #1
 800a864:	9304      	str	r3, [sp, #16]
 800a866:	9307      	str	r3, [sp, #28]
 800a868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a86c:	931a      	str	r3, [sp, #104]	; 0x68
 800a86e:	4654      	mov	r4, sl
 800a870:	2205      	movs	r2, #5
 800a872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a876:	4858      	ldr	r0, [pc, #352]	; (800a9d8 <_vfiprintf_r+0x24c>)
 800a878:	f7f5 fcd2 	bl	8000220 <memchr>
 800a87c:	9a04      	ldr	r2, [sp, #16]
 800a87e:	b9d8      	cbnz	r0, 800a8b8 <_vfiprintf_r+0x12c>
 800a880:	06d1      	lsls	r1, r2, #27
 800a882:	bf44      	itt	mi
 800a884:	2320      	movmi	r3, #32
 800a886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a88a:	0713      	lsls	r3, r2, #28
 800a88c:	bf44      	itt	mi
 800a88e:	232b      	movmi	r3, #43	; 0x2b
 800a890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a894:	f89a 3000 	ldrb.w	r3, [sl]
 800a898:	2b2a      	cmp	r3, #42	; 0x2a
 800a89a:	d015      	beq.n	800a8c8 <_vfiprintf_r+0x13c>
 800a89c:	9a07      	ldr	r2, [sp, #28]
 800a89e:	4654      	mov	r4, sl
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	f04f 0c0a 	mov.w	ip, #10
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ac:	3b30      	subs	r3, #48	; 0x30
 800a8ae:	2b09      	cmp	r3, #9
 800a8b0:	d94e      	bls.n	800a950 <_vfiprintf_r+0x1c4>
 800a8b2:	b1b0      	cbz	r0, 800a8e2 <_vfiprintf_r+0x156>
 800a8b4:	9207      	str	r2, [sp, #28]
 800a8b6:	e014      	b.n	800a8e2 <_vfiprintf_r+0x156>
 800a8b8:	eba0 0308 	sub.w	r3, r0, r8
 800a8bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	9304      	str	r3, [sp, #16]
 800a8c4:	46a2      	mov	sl, r4
 800a8c6:	e7d2      	b.n	800a86e <_vfiprintf_r+0xe2>
 800a8c8:	9b03      	ldr	r3, [sp, #12]
 800a8ca:	1d19      	adds	r1, r3, #4
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	9103      	str	r1, [sp, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	bfbb      	ittet	lt
 800a8d4:	425b      	neglt	r3, r3
 800a8d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a8da:	9307      	strge	r3, [sp, #28]
 800a8dc:	9307      	strlt	r3, [sp, #28]
 800a8de:	bfb8      	it	lt
 800a8e0:	9204      	strlt	r2, [sp, #16]
 800a8e2:	7823      	ldrb	r3, [r4, #0]
 800a8e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a8e6:	d10c      	bne.n	800a902 <_vfiprintf_r+0x176>
 800a8e8:	7863      	ldrb	r3, [r4, #1]
 800a8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ec:	d135      	bne.n	800a95a <_vfiprintf_r+0x1ce>
 800a8ee:	9b03      	ldr	r3, [sp, #12]
 800a8f0:	1d1a      	adds	r2, r3, #4
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	9203      	str	r2, [sp, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	bfb8      	it	lt
 800a8fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8fe:	3402      	adds	r4, #2
 800a900:	9305      	str	r3, [sp, #20]
 800a902:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a9e8 <_vfiprintf_r+0x25c>
 800a906:	7821      	ldrb	r1, [r4, #0]
 800a908:	2203      	movs	r2, #3
 800a90a:	4650      	mov	r0, sl
 800a90c:	f7f5 fc88 	bl	8000220 <memchr>
 800a910:	b140      	cbz	r0, 800a924 <_vfiprintf_r+0x198>
 800a912:	2340      	movs	r3, #64	; 0x40
 800a914:	eba0 000a 	sub.w	r0, r0, sl
 800a918:	fa03 f000 	lsl.w	r0, r3, r0
 800a91c:	9b04      	ldr	r3, [sp, #16]
 800a91e:	4303      	orrs	r3, r0
 800a920:	3401      	adds	r4, #1
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a928:	482c      	ldr	r0, [pc, #176]	; (800a9dc <_vfiprintf_r+0x250>)
 800a92a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a92e:	2206      	movs	r2, #6
 800a930:	f7f5 fc76 	bl	8000220 <memchr>
 800a934:	2800      	cmp	r0, #0
 800a936:	d03f      	beq.n	800a9b8 <_vfiprintf_r+0x22c>
 800a938:	4b29      	ldr	r3, [pc, #164]	; (800a9e0 <_vfiprintf_r+0x254>)
 800a93a:	bb1b      	cbnz	r3, 800a984 <_vfiprintf_r+0x1f8>
 800a93c:	9b03      	ldr	r3, [sp, #12]
 800a93e:	3307      	adds	r3, #7
 800a940:	f023 0307 	bic.w	r3, r3, #7
 800a944:	3308      	adds	r3, #8
 800a946:	9303      	str	r3, [sp, #12]
 800a948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a94a:	443b      	add	r3, r7
 800a94c:	9309      	str	r3, [sp, #36]	; 0x24
 800a94e:	e767      	b.n	800a820 <_vfiprintf_r+0x94>
 800a950:	fb0c 3202 	mla	r2, ip, r2, r3
 800a954:	460c      	mov	r4, r1
 800a956:	2001      	movs	r0, #1
 800a958:	e7a5      	b.n	800a8a6 <_vfiprintf_r+0x11a>
 800a95a:	2300      	movs	r3, #0
 800a95c:	3401      	adds	r4, #1
 800a95e:	9305      	str	r3, [sp, #20]
 800a960:	4619      	mov	r1, r3
 800a962:	f04f 0c0a 	mov.w	ip, #10
 800a966:	4620      	mov	r0, r4
 800a968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a96c:	3a30      	subs	r2, #48	; 0x30
 800a96e:	2a09      	cmp	r2, #9
 800a970:	d903      	bls.n	800a97a <_vfiprintf_r+0x1ee>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0c5      	beq.n	800a902 <_vfiprintf_r+0x176>
 800a976:	9105      	str	r1, [sp, #20]
 800a978:	e7c3      	b.n	800a902 <_vfiprintf_r+0x176>
 800a97a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a97e:	4604      	mov	r4, r0
 800a980:	2301      	movs	r3, #1
 800a982:	e7f0      	b.n	800a966 <_vfiprintf_r+0x1da>
 800a984:	ab03      	add	r3, sp, #12
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	462a      	mov	r2, r5
 800a98a:	4b16      	ldr	r3, [pc, #88]	; (800a9e4 <_vfiprintf_r+0x258>)
 800a98c:	a904      	add	r1, sp, #16
 800a98e:	4630      	mov	r0, r6
 800a990:	f3af 8000 	nop.w
 800a994:	4607      	mov	r7, r0
 800a996:	1c78      	adds	r0, r7, #1
 800a998:	d1d6      	bne.n	800a948 <_vfiprintf_r+0x1bc>
 800a99a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a99c:	07d9      	lsls	r1, r3, #31
 800a99e:	d405      	bmi.n	800a9ac <_vfiprintf_r+0x220>
 800a9a0:	89ab      	ldrh	r3, [r5, #12]
 800a9a2:	059a      	lsls	r2, r3, #22
 800a9a4:	d402      	bmi.n	800a9ac <_vfiprintf_r+0x220>
 800a9a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9a8:	f000 fd51 	bl	800b44e <__retarget_lock_release_recursive>
 800a9ac:	89ab      	ldrh	r3, [r5, #12]
 800a9ae:	065b      	lsls	r3, r3, #25
 800a9b0:	f53f af12 	bmi.w	800a7d8 <_vfiprintf_r+0x4c>
 800a9b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9b6:	e711      	b.n	800a7dc <_vfiprintf_r+0x50>
 800a9b8:	ab03      	add	r3, sp, #12
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	462a      	mov	r2, r5
 800a9be:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <_vfiprintf_r+0x258>)
 800a9c0:	a904      	add	r1, sp, #16
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f000 f880 	bl	800aac8 <_printf_i>
 800a9c8:	e7e4      	b.n	800a994 <_vfiprintf_r+0x208>
 800a9ca:	bf00      	nop
 800a9cc:	0800c2e0 	.word	0x0800c2e0
 800a9d0:	0800c300 	.word	0x0800c300
 800a9d4:	0800c2c0 	.word	0x0800c2c0
 800a9d8:	0800c28c 	.word	0x0800c28c
 800a9dc:	0800c296 	.word	0x0800c296
 800a9e0:	00000000 	.word	0x00000000
 800a9e4:	0800a767 	.word	0x0800a767
 800a9e8:	0800c292 	.word	0x0800c292

0800a9ec <_printf_common>:
 800a9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f0:	4616      	mov	r6, r2
 800a9f2:	4699      	mov	r9, r3
 800a9f4:	688a      	ldr	r2, [r1, #8]
 800a9f6:	690b      	ldr	r3, [r1, #16]
 800a9f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	bfb8      	it	lt
 800aa00:	4613      	movlt	r3, r2
 800aa02:	6033      	str	r3, [r6, #0]
 800aa04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa08:	4607      	mov	r7, r0
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	b10a      	cbz	r2, 800aa12 <_printf_common+0x26>
 800aa0e:	3301      	adds	r3, #1
 800aa10:	6033      	str	r3, [r6, #0]
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	0699      	lsls	r1, r3, #26
 800aa16:	bf42      	ittt	mi
 800aa18:	6833      	ldrmi	r3, [r6, #0]
 800aa1a:	3302      	addmi	r3, #2
 800aa1c:	6033      	strmi	r3, [r6, #0]
 800aa1e:	6825      	ldr	r5, [r4, #0]
 800aa20:	f015 0506 	ands.w	r5, r5, #6
 800aa24:	d106      	bne.n	800aa34 <_printf_common+0x48>
 800aa26:	f104 0a19 	add.w	sl, r4, #25
 800aa2a:	68e3      	ldr	r3, [r4, #12]
 800aa2c:	6832      	ldr	r2, [r6, #0]
 800aa2e:	1a9b      	subs	r3, r3, r2
 800aa30:	42ab      	cmp	r3, r5
 800aa32:	dc26      	bgt.n	800aa82 <_printf_common+0x96>
 800aa34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa38:	1e13      	subs	r3, r2, #0
 800aa3a:	6822      	ldr	r2, [r4, #0]
 800aa3c:	bf18      	it	ne
 800aa3e:	2301      	movne	r3, #1
 800aa40:	0692      	lsls	r2, r2, #26
 800aa42:	d42b      	bmi.n	800aa9c <_printf_common+0xb0>
 800aa44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa48:	4649      	mov	r1, r9
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	47c0      	blx	r8
 800aa4e:	3001      	adds	r0, #1
 800aa50:	d01e      	beq.n	800aa90 <_printf_common+0xa4>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	68e5      	ldr	r5, [r4, #12]
 800aa56:	6832      	ldr	r2, [r6, #0]
 800aa58:	f003 0306 	and.w	r3, r3, #6
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	bf08      	it	eq
 800aa60:	1aad      	subeq	r5, r5, r2
 800aa62:	68a3      	ldr	r3, [r4, #8]
 800aa64:	6922      	ldr	r2, [r4, #16]
 800aa66:	bf0c      	ite	eq
 800aa68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa6c:	2500      	movne	r5, #0
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	bfc4      	itt	gt
 800aa72:	1a9b      	subgt	r3, r3, r2
 800aa74:	18ed      	addgt	r5, r5, r3
 800aa76:	2600      	movs	r6, #0
 800aa78:	341a      	adds	r4, #26
 800aa7a:	42b5      	cmp	r5, r6
 800aa7c:	d11a      	bne.n	800aab4 <_printf_common+0xc8>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e008      	b.n	800aa94 <_printf_common+0xa8>
 800aa82:	2301      	movs	r3, #1
 800aa84:	4652      	mov	r2, sl
 800aa86:	4649      	mov	r1, r9
 800aa88:	4638      	mov	r0, r7
 800aa8a:	47c0      	blx	r8
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d103      	bne.n	800aa98 <_printf_common+0xac>
 800aa90:	f04f 30ff 	mov.w	r0, #4294967295
 800aa94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa98:	3501      	adds	r5, #1
 800aa9a:	e7c6      	b.n	800aa2a <_printf_common+0x3e>
 800aa9c:	18e1      	adds	r1, r4, r3
 800aa9e:	1c5a      	adds	r2, r3, #1
 800aaa0:	2030      	movs	r0, #48	; 0x30
 800aaa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aaa6:	4422      	add	r2, r4
 800aaa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aab0:	3302      	adds	r3, #2
 800aab2:	e7c7      	b.n	800aa44 <_printf_common+0x58>
 800aab4:	2301      	movs	r3, #1
 800aab6:	4622      	mov	r2, r4
 800aab8:	4649      	mov	r1, r9
 800aaba:	4638      	mov	r0, r7
 800aabc:	47c0      	blx	r8
 800aabe:	3001      	adds	r0, #1
 800aac0:	d0e6      	beq.n	800aa90 <_printf_common+0xa4>
 800aac2:	3601      	adds	r6, #1
 800aac4:	e7d9      	b.n	800aa7a <_printf_common+0x8e>
	...

0800aac8 <_printf_i>:
 800aac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aacc:	7e0f      	ldrb	r7, [r1, #24]
 800aace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aad0:	2f78      	cmp	r7, #120	; 0x78
 800aad2:	4691      	mov	r9, r2
 800aad4:	4680      	mov	r8, r0
 800aad6:	460c      	mov	r4, r1
 800aad8:	469a      	mov	sl, r3
 800aada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aade:	d807      	bhi.n	800aaf0 <_printf_i+0x28>
 800aae0:	2f62      	cmp	r7, #98	; 0x62
 800aae2:	d80a      	bhi.n	800aafa <_printf_i+0x32>
 800aae4:	2f00      	cmp	r7, #0
 800aae6:	f000 80d8 	beq.w	800ac9a <_printf_i+0x1d2>
 800aaea:	2f58      	cmp	r7, #88	; 0x58
 800aaec:	f000 80a3 	beq.w	800ac36 <_printf_i+0x16e>
 800aaf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aaf8:	e03a      	b.n	800ab70 <_printf_i+0xa8>
 800aafa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aafe:	2b15      	cmp	r3, #21
 800ab00:	d8f6      	bhi.n	800aaf0 <_printf_i+0x28>
 800ab02:	a101      	add	r1, pc, #4	; (adr r1, 800ab08 <_printf_i+0x40>)
 800ab04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab08:	0800ab61 	.word	0x0800ab61
 800ab0c:	0800ab75 	.word	0x0800ab75
 800ab10:	0800aaf1 	.word	0x0800aaf1
 800ab14:	0800aaf1 	.word	0x0800aaf1
 800ab18:	0800aaf1 	.word	0x0800aaf1
 800ab1c:	0800aaf1 	.word	0x0800aaf1
 800ab20:	0800ab75 	.word	0x0800ab75
 800ab24:	0800aaf1 	.word	0x0800aaf1
 800ab28:	0800aaf1 	.word	0x0800aaf1
 800ab2c:	0800aaf1 	.word	0x0800aaf1
 800ab30:	0800aaf1 	.word	0x0800aaf1
 800ab34:	0800ac81 	.word	0x0800ac81
 800ab38:	0800aba5 	.word	0x0800aba5
 800ab3c:	0800ac63 	.word	0x0800ac63
 800ab40:	0800aaf1 	.word	0x0800aaf1
 800ab44:	0800aaf1 	.word	0x0800aaf1
 800ab48:	0800aca3 	.word	0x0800aca3
 800ab4c:	0800aaf1 	.word	0x0800aaf1
 800ab50:	0800aba5 	.word	0x0800aba5
 800ab54:	0800aaf1 	.word	0x0800aaf1
 800ab58:	0800aaf1 	.word	0x0800aaf1
 800ab5c:	0800ac6b 	.word	0x0800ac6b
 800ab60:	682b      	ldr	r3, [r5, #0]
 800ab62:	1d1a      	adds	r2, r3, #4
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	602a      	str	r2, [r5, #0]
 800ab68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab70:	2301      	movs	r3, #1
 800ab72:	e0a3      	b.n	800acbc <_printf_i+0x1f4>
 800ab74:	6820      	ldr	r0, [r4, #0]
 800ab76:	6829      	ldr	r1, [r5, #0]
 800ab78:	0606      	lsls	r6, r0, #24
 800ab7a:	f101 0304 	add.w	r3, r1, #4
 800ab7e:	d50a      	bpl.n	800ab96 <_printf_i+0xce>
 800ab80:	680e      	ldr	r6, [r1, #0]
 800ab82:	602b      	str	r3, [r5, #0]
 800ab84:	2e00      	cmp	r6, #0
 800ab86:	da03      	bge.n	800ab90 <_printf_i+0xc8>
 800ab88:	232d      	movs	r3, #45	; 0x2d
 800ab8a:	4276      	negs	r6, r6
 800ab8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab90:	485e      	ldr	r0, [pc, #376]	; (800ad0c <_printf_i+0x244>)
 800ab92:	230a      	movs	r3, #10
 800ab94:	e019      	b.n	800abca <_printf_i+0x102>
 800ab96:	680e      	ldr	r6, [r1, #0]
 800ab98:	602b      	str	r3, [r5, #0]
 800ab9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab9e:	bf18      	it	ne
 800aba0:	b236      	sxthne	r6, r6
 800aba2:	e7ef      	b.n	800ab84 <_printf_i+0xbc>
 800aba4:	682b      	ldr	r3, [r5, #0]
 800aba6:	6820      	ldr	r0, [r4, #0]
 800aba8:	1d19      	adds	r1, r3, #4
 800abaa:	6029      	str	r1, [r5, #0]
 800abac:	0601      	lsls	r1, r0, #24
 800abae:	d501      	bpl.n	800abb4 <_printf_i+0xec>
 800abb0:	681e      	ldr	r6, [r3, #0]
 800abb2:	e002      	b.n	800abba <_printf_i+0xf2>
 800abb4:	0646      	lsls	r6, r0, #25
 800abb6:	d5fb      	bpl.n	800abb0 <_printf_i+0xe8>
 800abb8:	881e      	ldrh	r6, [r3, #0]
 800abba:	4854      	ldr	r0, [pc, #336]	; (800ad0c <_printf_i+0x244>)
 800abbc:	2f6f      	cmp	r7, #111	; 0x6f
 800abbe:	bf0c      	ite	eq
 800abc0:	2308      	moveq	r3, #8
 800abc2:	230a      	movne	r3, #10
 800abc4:	2100      	movs	r1, #0
 800abc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abca:	6865      	ldr	r5, [r4, #4]
 800abcc:	60a5      	str	r5, [r4, #8]
 800abce:	2d00      	cmp	r5, #0
 800abd0:	bfa2      	ittt	ge
 800abd2:	6821      	ldrge	r1, [r4, #0]
 800abd4:	f021 0104 	bicge.w	r1, r1, #4
 800abd8:	6021      	strge	r1, [r4, #0]
 800abda:	b90e      	cbnz	r6, 800abe0 <_printf_i+0x118>
 800abdc:	2d00      	cmp	r5, #0
 800abde:	d04d      	beq.n	800ac7c <_printf_i+0x1b4>
 800abe0:	4615      	mov	r5, r2
 800abe2:	fbb6 f1f3 	udiv	r1, r6, r3
 800abe6:	fb03 6711 	mls	r7, r3, r1, r6
 800abea:	5dc7      	ldrb	r7, [r0, r7]
 800abec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abf0:	4637      	mov	r7, r6
 800abf2:	42bb      	cmp	r3, r7
 800abf4:	460e      	mov	r6, r1
 800abf6:	d9f4      	bls.n	800abe2 <_printf_i+0x11a>
 800abf8:	2b08      	cmp	r3, #8
 800abfa:	d10b      	bne.n	800ac14 <_printf_i+0x14c>
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	07de      	lsls	r6, r3, #31
 800ac00:	d508      	bpl.n	800ac14 <_printf_i+0x14c>
 800ac02:	6923      	ldr	r3, [r4, #16]
 800ac04:	6861      	ldr	r1, [r4, #4]
 800ac06:	4299      	cmp	r1, r3
 800ac08:	bfde      	ittt	le
 800ac0a:	2330      	movle	r3, #48	; 0x30
 800ac0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac14:	1b52      	subs	r2, r2, r5
 800ac16:	6122      	str	r2, [r4, #16]
 800ac18:	f8cd a000 	str.w	sl, [sp]
 800ac1c:	464b      	mov	r3, r9
 800ac1e:	aa03      	add	r2, sp, #12
 800ac20:	4621      	mov	r1, r4
 800ac22:	4640      	mov	r0, r8
 800ac24:	f7ff fee2 	bl	800a9ec <_printf_common>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d14c      	bne.n	800acc6 <_printf_i+0x1fe>
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	b004      	add	sp, #16
 800ac32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac36:	4835      	ldr	r0, [pc, #212]	; (800ad0c <_printf_i+0x244>)
 800ac38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac3c:	6829      	ldr	r1, [r5, #0]
 800ac3e:	6823      	ldr	r3, [r4, #0]
 800ac40:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac44:	6029      	str	r1, [r5, #0]
 800ac46:	061d      	lsls	r5, r3, #24
 800ac48:	d514      	bpl.n	800ac74 <_printf_i+0x1ac>
 800ac4a:	07df      	lsls	r7, r3, #31
 800ac4c:	bf44      	itt	mi
 800ac4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac52:	6023      	strmi	r3, [r4, #0]
 800ac54:	b91e      	cbnz	r6, 800ac5e <_printf_i+0x196>
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	f023 0320 	bic.w	r3, r3, #32
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	2310      	movs	r3, #16
 800ac60:	e7b0      	b.n	800abc4 <_printf_i+0xfc>
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	f043 0320 	orr.w	r3, r3, #32
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	2378      	movs	r3, #120	; 0x78
 800ac6c:	4828      	ldr	r0, [pc, #160]	; (800ad10 <_printf_i+0x248>)
 800ac6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac72:	e7e3      	b.n	800ac3c <_printf_i+0x174>
 800ac74:	0659      	lsls	r1, r3, #25
 800ac76:	bf48      	it	mi
 800ac78:	b2b6      	uxthmi	r6, r6
 800ac7a:	e7e6      	b.n	800ac4a <_printf_i+0x182>
 800ac7c:	4615      	mov	r5, r2
 800ac7e:	e7bb      	b.n	800abf8 <_printf_i+0x130>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	6826      	ldr	r6, [r4, #0]
 800ac84:	6961      	ldr	r1, [r4, #20]
 800ac86:	1d18      	adds	r0, r3, #4
 800ac88:	6028      	str	r0, [r5, #0]
 800ac8a:	0635      	lsls	r5, r6, #24
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	d501      	bpl.n	800ac94 <_printf_i+0x1cc>
 800ac90:	6019      	str	r1, [r3, #0]
 800ac92:	e002      	b.n	800ac9a <_printf_i+0x1d2>
 800ac94:	0670      	lsls	r0, r6, #25
 800ac96:	d5fb      	bpl.n	800ac90 <_printf_i+0x1c8>
 800ac98:	8019      	strh	r1, [r3, #0]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	6123      	str	r3, [r4, #16]
 800ac9e:	4615      	mov	r5, r2
 800aca0:	e7ba      	b.n	800ac18 <_printf_i+0x150>
 800aca2:	682b      	ldr	r3, [r5, #0]
 800aca4:	1d1a      	adds	r2, r3, #4
 800aca6:	602a      	str	r2, [r5, #0]
 800aca8:	681d      	ldr	r5, [r3, #0]
 800acaa:	6862      	ldr	r2, [r4, #4]
 800acac:	2100      	movs	r1, #0
 800acae:	4628      	mov	r0, r5
 800acb0:	f7f5 fab6 	bl	8000220 <memchr>
 800acb4:	b108      	cbz	r0, 800acba <_printf_i+0x1f2>
 800acb6:	1b40      	subs	r0, r0, r5
 800acb8:	6060      	str	r0, [r4, #4]
 800acba:	6863      	ldr	r3, [r4, #4]
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	2300      	movs	r3, #0
 800acc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc4:	e7a8      	b.n	800ac18 <_printf_i+0x150>
 800acc6:	6923      	ldr	r3, [r4, #16]
 800acc8:	462a      	mov	r2, r5
 800acca:	4649      	mov	r1, r9
 800accc:	4640      	mov	r0, r8
 800acce:	47d0      	blx	sl
 800acd0:	3001      	adds	r0, #1
 800acd2:	d0ab      	beq.n	800ac2c <_printf_i+0x164>
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	079b      	lsls	r3, r3, #30
 800acd8:	d413      	bmi.n	800ad02 <_printf_i+0x23a>
 800acda:	68e0      	ldr	r0, [r4, #12]
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	4298      	cmp	r0, r3
 800ace0:	bfb8      	it	lt
 800ace2:	4618      	movlt	r0, r3
 800ace4:	e7a4      	b.n	800ac30 <_printf_i+0x168>
 800ace6:	2301      	movs	r3, #1
 800ace8:	4632      	mov	r2, r6
 800acea:	4649      	mov	r1, r9
 800acec:	4640      	mov	r0, r8
 800acee:	47d0      	blx	sl
 800acf0:	3001      	adds	r0, #1
 800acf2:	d09b      	beq.n	800ac2c <_printf_i+0x164>
 800acf4:	3501      	adds	r5, #1
 800acf6:	68e3      	ldr	r3, [r4, #12]
 800acf8:	9903      	ldr	r1, [sp, #12]
 800acfa:	1a5b      	subs	r3, r3, r1
 800acfc:	42ab      	cmp	r3, r5
 800acfe:	dcf2      	bgt.n	800ace6 <_printf_i+0x21e>
 800ad00:	e7eb      	b.n	800acda <_printf_i+0x212>
 800ad02:	2500      	movs	r5, #0
 800ad04:	f104 0619 	add.w	r6, r4, #25
 800ad08:	e7f5      	b.n	800acf6 <_printf_i+0x22e>
 800ad0a:	bf00      	nop
 800ad0c:	0800c29d 	.word	0x0800c29d
 800ad10:	0800c2ae 	.word	0x0800c2ae

0800ad14 <iprintf>:
 800ad14:	b40f      	push	{r0, r1, r2, r3}
 800ad16:	4b0a      	ldr	r3, [pc, #40]	; (800ad40 <iprintf+0x2c>)
 800ad18:	b513      	push	{r0, r1, r4, lr}
 800ad1a:	681c      	ldr	r4, [r3, #0]
 800ad1c:	b124      	cbz	r4, 800ad28 <iprintf+0x14>
 800ad1e:	69a3      	ldr	r3, [r4, #24]
 800ad20:	b913      	cbnz	r3, 800ad28 <iprintf+0x14>
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 faf4 	bl	800b310 <__sinit>
 800ad28:	ab05      	add	r3, sp, #20
 800ad2a:	9a04      	ldr	r2, [sp, #16]
 800ad2c:	68a1      	ldr	r1, [r4, #8]
 800ad2e:	9301      	str	r3, [sp, #4]
 800ad30:	4620      	mov	r0, r4
 800ad32:	f7ff fd2b 	bl	800a78c <_vfiprintf_r>
 800ad36:	b002      	add	sp, #8
 800ad38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad3c:	b004      	add	sp, #16
 800ad3e:	4770      	bx	lr
 800ad40:	2000000c 	.word	0x2000000c

0800ad44 <_sbrk_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4d06      	ldr	r5, [pc, #24]	; (800ad60 <_sbrk_r+0x1c>)
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	602b      	str	r3, [r5, #0]
 800ad50:	f7fc fbe4 	bl	800751c <_sbrk>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_sbrk_r+0x1a>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_sbrk_r+0x1a>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	20000580 	.word	0x20000580

0800ad64 <setvbuf>:
 800ad64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad68:	461d      	mov	r5, r3
 800ad6a:	4b5d      	ldr	r3, [pc, #372]	; (800aee0 <setvbuf+0x17c>)
 800ad6c:	681f      	ldr	r7, [r3, #0]
 800ad6e:	4604      	mov	r4, r0
 800ad70:	460e      	mov	r6, r1
 800ad72:	4690      	mov	r8, r2
 800ad74:	b127      	cbz	r7, 800ad80 <setvbuf+0x1c>
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	b913      	cbnz	r3, 800ad80 <setvbuf+0x1c>
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	f000 fac8 	bl	800b310 <__sinit>
 800ad80:	4b58      	ldr	r3, [pc, #352]	; (800aee4 <setvbuf+0x180>)
 800ad82:	429c      	cmp	r4, r3
 800ad84:	d167      	bne.n	800ae56 <setvbuf+0xf2>
 800ad86:	687c      	ldr	r4, [r7, #4]
 800ad88:	f1b8 0f02 	cmp.w	r8, #2
 800ad8c:	d006      	beq.n	800ad9c <setvbuf+0x38>
 800ad8e:	f1b8 0f01 	cmp.w	r8, #1
 800ad92:	f200 809f 	bhi.w	800aed4 <setvbuf+0x170>
 800ad96:	2d00      	cmp	r5, #0
 800ad98:	f2c0 809c 	blt.w	800aed4 <setvbuf+0x170>
 800ad9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad9e:	07db      	lsls	r3, r3, #31
 800ada0:	d405      	bmi.n	800adae <setvbuf+0x4a>
 800ada2:	89a3      	ldrh	r3, [r4, #12]
 800ada4:	0598      	lsls	r0, r3, #22
 800ada6:	d402      	bmi.n	800adae <setvbuf+0x4a>
 800ada8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adaa:	f000 fb4f 	bl	800b44c <__retarget_lock_acquire_recursive>
 800adae:	4621      	mov	r1, r4
 800adb0:	4638      	mov	r0, r7
 800adb2:	f000 fa19 	bl	800b1e8 <_fflush_r>
 800adb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adb8:	b141      	cbz	r1, 800adcc <setvbuf+0x68>
 800adba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adbe:	4299      	cmp	r1, r3
 800adc0:	d002      	beq.n	800adc8 <setvbuf+0x64>
 800adc2:	4638      	mov	r0, r7
 800adc4:	f7ff fbd8 	bl	800a578 <_free_r>
 800adc8:	2300      	movs	r3, #0
 800adca:	6363      	str	r3, [r4, #52]	; 0x34
 800adcc:	2300      	movs	r3, #0
 800adce:	61a3      	str	r3, [r4, #24]
 800add0:	6063      	str	r3, [r4, #4]
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	0619      	lsls	r1, r3, #24
 800add6:	d503      	bpl.n	800ade0 <setvbuf+0x7c>
 800add8:	6921      	ldr	r1, [r4, #16]
 800adda:	4638      	mov	r0, r7
 800addc:	f7ff fbcc 	bl	800a578 <_free_r>
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800ade6:	f023 0303 	bic.w	r3, r3, #3
 800adea:	f1b8 0f02 	cmp.w	r8, #2
 800adee:	81a3      	strh	r3, [r4, #12]
 800adf0:	d06c      	beq.n	800aecc <setvbuf+0x168>
 800adf2:	ab01      	add	r3, sp, #4
 800adf4:	466a      	mov	r2, sp
 800adf6:	4621      	mov	r1, r4
 800adf8:	4638      	mov	r0, r7
 800adfa:	f000 fb29 	bl	800b450 <__swhatbuf_r>
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	4318      	orrs	r0, r3
 800ae02:	81a0      	strh	r0, [r4, #12]
 800ae04:	2d00      	cmp	r5, #0
 800ae06:	d130      	bne.n	800ae6a <setvbuf+0x106>
 800ae08:	9d00      	ldr	r5, [sp, #0]
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f7ff fb7e 	bl	800a50c <malloc>
 800ae10:	4606      	mov	r6, r0
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d155      	bne.n	800aec2 <setvbuf+0x15e>
 800ae16:	f8dd 9000 	ldr.w	r9, [sp]
 800ae1a:	45a9      	cmp	r9, r5
 800ae1c:	d14a      	bne.n	800aeb4 <setvbuf+0x150>
 800ae1e:	f04f 35ff 	mov.w	r5, #4294967295
 800ae22:	2200      	movs	r2, #0
 800ae24:	60a2      	str	r2, [r4, #8]
 800ae26:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800ae2a:	6022      	str	r2, [r4, #0]
 800ae2c:	6122      	str	r2, [r4, #16]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae34:	6162      	str	r2, [r4, #20]
 800ae36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae38:	f043 0302 	orr.w	r3, r3, #2
 800ae3c:	07d2      	lsls	r2, r2, #31
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	d405      	bmi.n	800ae4e <setvbuf+0xea>
 800ae42:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ae46:	d102      	bne.n	800ae4e <setvbuf+0xea>
 800ae48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae4a:	f000 fb00 	bl	800b44e <__retarget_lock_release_recursive>
 800ae4e:	4628      	mov	r0, r5
 800ae50:	b003      	add	sp, #12
 800ae52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae56:	4b24      	ldr	r3, [pc, #144]	; (800aee8 <setvbuf+0x184>)
 800ae58:	429c      	cmp	r4, r3
 800ae5a:	d101      	bne.n	800ae60 <setvbuf+0xfc>
 800ae5c:	68bc      	ldr	r4, [r7, #8]
 800ae5e:	e793      	b.n	800ad88 <setvbuf+0x24>
 800ae60:	4b22      	ldr	r3, [pc, #136]	; (800aeec <setvbuf+0x188>)
 800ae62:	429c      	cmp	r4, r3
 800ae64:	bf08      	it	eq
 800ae66:	68fc      	ldreq	r4, [r7, #12]
 800ae68:	e78e      	b.n	800ad88 <setvbuf+0x24>
 800ae6a:	2e00      	cmp	r6, #0
 800ae6c:	d0cd      	beq.n	800ae0a <setvbuf+0xa6>
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	b913      	cbnz	r3, 800ae78 <setvbuf+0x114>
 800ae72:	4638      	mov	r0, r7
 800ae74:	f000 fa4c 	bl	800b310 <__sinit>
 800ae78:	f1b8 0f01 	cmp.w	r8, #1
 800ae7c:	bf08      	it	eq
 800ae7e:	89a3      	ldrheq	r3, [r4, #12]
 800ae80:	6026      	str	r6, [r4, #0]
 800ae82:	bf04      	itt	eq
 800ae84:	f043 0301 	orreq.w	r3, r3, #1
 800ae88:	81a3      	strheq	r3, [r4, #12]
 800ae8a:	89a2      	ldrh	r2, [r4, #12]
 800ae8c:	f012 0308 	ands.w	r3, r2, #8
 800ae90:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ae94:	d01c      	beq.n	800aed0 <setvbuf+0x16c>
 800ae96:	07d3      	lsls	r3, r2, #31
 800ae98:	bf41      	itttt	mi
 800ae9a:	2300      	movmi	r3, #0
 800ae9c:	426d      	negmi	r5, r5
 800ae9e:	60a3      	strmi	r3, [r4, #8]
 800aea0:	61a5      	strmi	r5, [r4, #24]
 800aea2:	bf58      	it	pl
 800aea4:	60a5      	strpl	r5, [r4, #8]
 800aea6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800aea8:	f015 0501 	ands.w	r5, r5, #1
 800aeac:	d115      	bne.n	800aeda <setvbuf+0x176>
 800aeae:	f412 7f00 	tst.w	r2, #512	; 0x200
 800aeb2:	e7c8      	b.n	800ae46 <setvbuf+0xe2>
 800aeb4:	4648      	mov	r0, r9
 800aeb6:	f7ff fb29 	bl	800a50c <malloc>
 800aeba:	4606      	mov	r6, r0
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d0ae      	beq.n	800ae1e <setvbuf+0xba>
 800aec0:	464d      	mov	r5, r9
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	e7d0      	b.n	800ae6e <setvbuf+0x10a>
 800aecc:	2500      	movs	r5, #0
 800aece:	e7a8      	b.n	800ae22 <setvbuf+0xbe>
 800aed0:	60a3      	str	r3, [r4, #8]
 800aed2:	e7e8      	b.n	800aea6 <setvbuf+0x142>
 800aed4:	f04f 35ff 	mov.w	r5, #4294967295
 800aed8:	e7b9      	b.n	800ae4e <setvbuf+0xea>
 800aeda:	2500      	movs	r5, #0
 800aedc:	e7b7      	b.n	800ae4e <setvbuf+0xea>
 800aede:	bf00      	nop
 800aee0:	2000000c 	.word	0x2000000c
 800aee4:	0800c2e0 	.word	0x0800c2e0
 800aee8:	0800c300 	.word	0x0800c300
 800aeec:	0800c2c0 	.word	0x0800c2c0

0800aef0 <strchr>:
 800aef0:	b2c9      	uxtb	r1, r1
 800aef2:	4603      	mov	r3, r0
 800aef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aef8:	b11a      	cbz	r2, 800af02 <strchr+0x12>
 800aefa:	428a      	cmp	r2, r1
 800aefc:	d1f9      	bne.n	800aef2 <strchr+0x2>
 800aefe:	4618      	mov	r0, r3
 800af00:	4770      	bx	lr
 800af02:	2900      	cmp	r1, #0
 800af04:	bf18      	it	ne
 800af06:	2300      	movne	r3, #0
 800af08:	e7f9      	b.n	800aefe <strchr+0xe>

0800af0a <strcspn>:
 800af0a:	b570      	push	{r4, r5, r6, lr}
 800af0c:	4603      	mov	r3, r0
 800af0e:	461e      	mov	r6, r3
 800af10:	f813 4b01 	ldrb.w	r4, [r3], #1
 800af14:	b144      	cbz	r4, 800af28 <strcspn+0x1e>
 800af16:	1e4a      	subs	r2, r1, #1
 800af18:	e001      	b.n	800af1e <strcspn+0x14>
 800af1a:	42a5      	cmp	r5, r4
 800af1c:	d004      	beq.n	800af28 <strcspn+0x1e>
 800af1e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800af22:	2d00      	cmp	r5, #0
 800af24:	d1f9      	bne.n	800af1a <strcspn+0x10>
 800af26:	e7f2      	b.n	800af0e <strcspn+0x4>
 800af28:	1a30      	subs	r0, r6, r0
 800af2a:	bd70      	pop	{r4, r5, r6, pc}

0800af2c <strspn>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	4603      	mov	r3, r0
 800af30:	461e      	mov	r6, r3
 800af32:	f813 4b01 	ldrb.w	r4, [r3], #1
 800af36:	b13c      	cbz	r4, 800af48 <strspn+0x1c>
 800af38:	1e4a      	subs	r2, r1, #1
 800af3a:	e001      	b.n	800af40 <strspn+0x14>
 800af3c:	42a5      	cmp	r5, r4
 800af3e:	d0f7      	beq.n	800af30 <strspn+0x4>
 800af40:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800af44:	2d00      	cmp	r5, #0
 800af46:	d1f9      	bne.n	800af3c <strspn+0x10>
 800af48:	1a30      	subs	r0, r6, r0
 800af4a:	bd70      	pop	{r4, r5, r6, pc}

0800af4c <__swbuf_r>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	460e      	mov	r6, r1
 800af50:	4614      	mov	r4, r2
 800af52:	4605      	mov	r5, r0
 800af54:	b118      	cbz	r0, 800af5e <__swbuf_r+0x12>
 800af56:	6983      	ldr	r3, [r0, #24]
 800af58:	b90b      	cbnz	r3, 800af5e <__swbuf_r+0x12>
 800af5a:	f000 f9d9 	bl	800b310 <__sinit>
 800af5e:	4b21      	ldr	r3, [pc, #132]	; (800afe4 <__swbuf_r+0x98>)
 800af60:	429c      	cmp	r4, r3
 800af62:	d12b      	bne.n	800afbc <__swbuf_r+0x70>
 800af64:	686c      	ldr	r4, [r5, #4]
 800af66:	69a3      	ldr	r3, [r4, #24]
 800af68:	60a3      	str	r3, [r4, #8]
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	071a      	lsls	r2, r3, #28
 800af6e:	d52f      	bpl.n	800afd0 <__swbuf_r+0x84>
 800af70:	6923      	ldr	r3, [r4, #16]
 800af72:	b36b      	cbz	r3, 800afd0 <__swbuf_r+0x84>
 800af74:	6923      	ldr	r3, [r4, #16]
 800af76:	6820      	ldr	r0, [r4, #0]
 800af78:	1ac0      	subs	r0, r0, r3
 800af7a:	6963      	ldr	r3, [r4, #20]
 800af7c:	b2f6      	uxtb	r6, r6
 800af7e:	4283      	cmp	r3, r0
 800af80:	4637      	mov	r7, r6
 800af82:	dc04      	bgt.n	800af8e <__swbuf_r+0x42>
 800af84:	4621      	mov	r1, r4
 800af86:	4628      	mov	r0, r5
 800af88:	f000 f92e 	bl	800b1e8 <_fflush_r>
 800af8c:	bb30      	cbnz	r0, 800afdc <__swbuf_r+0x90>
 800af8e:	68a3      	ldr	r3, [r4, #8]
 800af90:	3b01      	subs	r3, #1
 800af92:	60a3      	str	r3, [r4, #8]
 800af94:	6823      	ldr	r3, [r4, #0]
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	6022      	str	r2, [r4, #0]
 800af9a:	701e      	strb	r6, [r3, #0]
 800af9c:	6963      	ldr	r3, [r4, #20]
 800af9e:	3001      	adds	r0, #1
 800afa0:	4283      	cmp	r3, r0
 800afa2:	d004      	beq.n	800afae <__swbuf_r+0x62>
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	07db      	lsls	r3, r3, #31
 800afa8:	d506      	bpl.n	800afb8 <__swbuf_r+0x6c>
 800afaa:	2e0a      	cmp	r6, #10
 800afac:	d104      	bne.n	800afb8 <__swbuf_r+0x6c>
 800afae:	4621      	mov	r1, r4
 800afb0:	4628      	mov	r0, r5
 800afb2:	f000 f919 	bl	800b1e8 <_fflush_r>
 800afb6:	b988      	cbnz	r0, 800afdc <__swbuf_r+0x90>
 800afb8:	4638      	mov	r0, r7
 800afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afbc:	4b0a      	ldr	r3, [pc, #40]	; (800afe8 <__swbuf_r+0x9c>)
 800afbe:	429c      	cmp	r4, r3
 800afc0:	d101      	bne.n	800afc6 <__swbuf_r+0x7a>
 800afc2:	68ac      	ldr	r4, [r5, #8]
 800afc4:	e7cf      	b.n	800af66 <__swbuf_r+0x1a>
 800afc6:	4b09      	ldr	r3, [pc, #36]	; (800afec <__swbuf_r+0xa0>)
 800afc8:	429c      	cmp	r4, r3
 800afca:	bf08      	it	eq
 800afcc:	68ec      	ldreq	r4, [r5, #12]
 800afce:	e7ca      	b.n	800af66 <__swbuf_r+0x1a>
 800afd0:	4621      	mov	r1, r4
 800afd2:	4628      	mov	r0, r5
 800afd4:	f000 f80c 	bl	800aff0 <__swsetup_r>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d0cb      	beq.n	800af74 <__swbuf_r+0x28>
 800afdc:	f04f 37ff 	mov.w	r7, #4294967295
 800afe0:	e7ea      	b.n	800afb8 <__swbuf_r+0x6c>
 800afe2:	bf00      	nop
 800afe4:	0800c2e0 	.word	0x0800c2e0
 800afe8:	0800c300 	.word	0x0800c300
 800afec:	0800c2c0 	.word	0x0800c2c0

0800aff0 <__swsetup_r>:
 800aff0:	4b32      	ldr	r3, [pc, #200]	; (800b0bc <__swsetup_r+0xcc>)
 800aff2:	b570      	push	{r4, r5, r6, lr}
 800aff4:	681d      	ldr	r5, [r3, #0]
 800aff6:	4606      	mov	r6, r0
 800aff8:	460c      	mov	r4, r1
 800affa:	b125      	cbz	r5, 800b006 <__swsetup_r+0x16>
 800affc:	69ab      	ldr	r3, [r5, #24]
 800affe:	b913      	cbnz	r3, 800b006 <__swsetup_r+0x16>
 800b000:	4628      	mov	r0, r5
 800b002:	f000 f985 	bl	800b310 <__sinit>
 800b006:	4b2e      	ldr	r3, [pc, #184]	; (800b0c0 <__swsetup_r+0xd0>)
 800b008:	429c      	cmp	r4, r3
 800b00a:	d10f      	bne.n	800b02c <__swsetup_r+0x3c>
 800b00c:	686c      	ldr	r4, [r5, #4]
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b014:	0719      	lsls	r1, r3, #28
 800b016:	d42c      	bmi.n	800b072 <__swsetup_r+0x82>
 800b018:	06dd      	lsls	r5, r3, #27
 800b01a:	d411      	bmi.n	800b040 <__swsetup_r+0x50>
 800b01c:	2309      	movs	r3, #9
 800b01e:	6033      	str	r3, [r6, #0]
 800b020:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b024:	81a3      	strh	r3, [r4, #12]
 800b026:	f04f 30ff 	mov.w	r0, #4294967295
 800b02a:	e03e      	b.n	800b0aa <__swsetup_r+0xba>
 800b02c:	4b25      	ldr	r3, [pc, #148]	; (800b0c4 <__swsetup_r+0xd4>)
 800b02e:	429c      	cmp	r4, r3
 800b030:	d101      	bne.n	800b036 <__swsetup_r+0x46>
 800b032:	68ac      	ldr	r4, [r5, #8]
 800b034:	e7eb      	b.n	800b00e <__swsetup_r+0x1e>
 800b036:	4b24      	ldr	r3, [pc, #144]	; (800b0c8 <__swsetup_r+0xd8>)
 800b038:	429c      	cmp	r4, r3
 800b03a:	bf08      	it	eq
 800b03c:	68ec      	ldreq	r4, [r5, #12]
 800b03e:	e7e6      	b.n	800b00e <__swsetup_r+0x1e>
 800b040:	0758      	lsls	r0, r3, #29
 800b042:	d512      	bpl.n	800b06a <__swsetup_r+0x7a>
 800b044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b046:	b141      	cbz	r1, 800b05a <__swsetup_r+0x6a>
 800b048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b04c:	4299      	cmp	r1, r3
 800b04e:	d002      	beq.n	800b056 <__swsetup_r+0x66>
 800b050:	4630      	mov	r0, r6
 800b052:	f7ff fa91 	bl	800a578 <_free_r>
 800b056:	2300      	movs	r3, #0
 800b058:	6363      	str	r3, [r4, #52]	; 0x34
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b060:	81a3      	strh	r3, [r4, #12]
 800b062:	2300      	movs	r3, #0
 800b064:	6063      	str	r3, [r4, #4]
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f043 0308 	orr.w	r3, r3, #8
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	6923      	ldr	r3, [r4, #16]
 800b074:	b94b      	cbnz	r3, 800b08a <__swsetup_r+0x9a>
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b080:	d003      	beq.n	800b08a <__swsetup_r+0x9a>
 800b082:	4621      	mov	r1, r4
 800b084:	4630      	mov	r0, r6
 800b086:	f000 fa09 	bl	800b49c <__smakebuf_r>
 800b08a:	89a0      	ldrh	r0, [r4, #12]
 800b08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b090:	f010 0301 	ands.w	r3, r0, #1
 800b094:	d00a      	beq.n	800b0ac <__swsetup_r+0xbc>
 800b096:	2300      	movs	r3, #0
 800b098:	60a3      	str	r3, [r4, #8]
 800b09a:	6963      	ldr	r3, [r4, #20]
 800b09c:	425b      	negs	r3, r3
 800b09e:	61a3      	str	r3, [r4, #24]
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	b943      	cbnz	r3, 800b0b6 <__swsetup_r+0xc6>
 800b0a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0a8:	d1ba      	bne.n	800b020 <__swsetup_r+0x30>
 800b0aa:	bd70      	pop	{r4, r5, r6, pc}
 800b0ac:	0781      	lsls	r1, r0, #30
 800b0ae:	bf58      	it	pl
 800b0b0:	6963      	ldrpl	r3, [r4, #20]
 800b0b2:	60a3      	str	r3, [r4, #8]
 800b0b4:	e7f4      	b.n	800b0a0 <__swsetup_r+0xb0>
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	e7f7      	b.n	800b0aa <__swsetup_r+0xba>
 800b0ba:	bf00      	nop
 800b0bc:	2000000c 	.word	0x2000000c
 800b0c0:	0800c2e0 	.word	0x0800c2e0
 800b0c4:	0800c300 	.word	0x0800c300
 800b0c8:	0800c2c0 	.word	0x0800c2c0

0800b0cc <abort>:
 800b0cc:	b508      	push	{r3, lr}
 800b0ce:	2006      	movs	r0, #6
 800b0d0:	f000 fa58 	bl	800b584 <raise>
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	f000 fb2d 	bl	800b734 <_exit>
	...

0800b0dc <__sflush_r>:
 800b0dc:	898a      	ldrh	r2, [r1, #12]
 800b0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	0710      	lsls	r0, r2, #28
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	d458      	bmi.n	800b19c <__sflush_r+0xc0>
 800b0ea:	684b      	ldr	r3, [r1, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	dc05      	bgt.n	800b0fc <__sflush_r+0x20>
 800b0f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dc02      	bgt.n	800b0fc <__sflush_r+0x20>
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0fe:	2e00      	cmp	r6, #0
 800b100:	d0f9      	beq.n	800b0f6 <__sflush_r+0x1a>
 800b102:	2300      	movs	r3, #0
 800b104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b108:	682f      	ldr	r7, [r5, #0]
 800b10a:	602b      	str	r3, [r5, #0]
 800b10c:	d032      	beq.n	800b174 <__sflush_r+0x98>
 800b10e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b110:	89a3      	ldrh	r3, [r4, #12]
 800b112:	075a      	lsls	r2, r3, #29
 800b114:	d505      	bpl.n	800b122 <__sflush_r+0x46>
 800b116:	6863      	ldr	r3, [r4, #4]
 800b118:	1ac0      	subs	r0, r0, r3
 800b11a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b11c:	b10b      	cbz	r3, 800b122 <__sflush_r+0x46>
 800b11e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b120:	1ac0      	subs	r0, r0, r3
 800b122:	2300      	movs	r3, #0
 800b124:	4602      	mov	r2, r0
 800b126:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b128:	6a21      	ldr	r1, [r4, #32]
 800b12a:	4628      	mov	r0, r5
 800b12c:	47b0      	blx	r6
 800b12e:	1c43      	adds	r3, r0, #1
 800b130:	89a3      	ldrh	r3, [r4, #12]
 800b132:	d106      	bne.n	800b142 <__sflush_r+0x66>
 800b134:	6829      	ldr	r1, [r5, #0]
 800b136:	291d      	cmp	r1, #29
 800b138:	d82c      	bhi.n	800b194 <__sflush_r+0xb8>
 800b13a:	4a2a      	ldr	r2, [pc, #168]	; (800b1e4 <__sflush_r+0x108>)
 800b13c:	40ca      	lsrs	r2, r1
 800b13e:	07d6      	lsls	r6, r2, #31
 800b140:	d528      	bpl.n	800b194 <__sflush_r+0xb8>
 800b142:	2200      	movs	r2, #0
 800b144:	6062      	str	r2, [r4, #4]
 800b146:	04d9      	lsls	r1, r3, #19
 800b148:	6922      	ldr	r2, [r4, #16]
 800b14a:	6022      	str	r2, [r4, #0]
 800b14c:	d504      	bpl.n	800b158 <__sflush_r+0x7c>
 800b14e:	1c42      	adds	r2, r0, #1
 800b150:	d101      	bne.n	800b156 <__sflush_r+0x7a>
 800b152:	682b      	ldr	r3, [r5, #0]
 800b154:	b903      	cbnz	r3, 800b158 <__sflush_r+0x7c>
 800b156:	6560      	str	r0, [r4, #84]	; 0x54
 800b158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b15a:	602f      	str	r7, [r5, #0]
 800b15c:	2900      	cmp	r1, #0
 800b15e:	d0ca      	beq.n	800b0f6 <__sflush_r+0x1a>
 800b160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b164:	4299      	cmp	r1, r3
 800b166:	d002      	beq.n	800b16e <__sflush_r+0x92>
 800b168:	4628      	mov	r0, r5
 800b16a:	f7ff fa05 	bl	800a578 <_free_r>
 800b16e:	2000      	movs	r0, #0
 800b170:	6360      	str	r0, [r4, #52]	; 0x34
 800b172:	e7c1      	b.n	800b0f8 <__sflush_r+0x1c>
 800b174:	6a21      	ldr	r1, [r4, #32]
 800b176:	2301      	movs	r3, #1
 800b178:	4628      	mov	r0, r5
 800b17a:	47b0      	blx	r6
 800b17c:	1c41      	adds	r1, r0, #1
 800b17e:	d1c7      	bne.n	800b110 <__sflush_r+0x34>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d0c4      	beq.n	800b110 <__sflush_r+0x34>
 800b186:	2b1d      	cmp	r3, #29
 800b188:	d001      	beq.n	800b18e <__sflush_r+0xb2>
 800b18a:	2b16      	cmp	r3, #22
 800b18c:	d101      	bne.n	800b192 <__sflush_r+0xb6>
 800b18e:	602f      	str	r7, [r5, #0]
 800b190:	e7b1      	b.n	800b0f6 <__sflush_r+0x1a>
 800b192:	89a3      	ldrh	r3, [r4, #12]
 800b194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b198:	81a3      	strh	r3, [r4, #12]
 800b19a:	e7ad      	b.n	800b0f8 <__sflush_r+0x1c>
 800b19c:	690f      	ldr	r7, [r1, #16]
 800b19e:	2f00      	cmp	r7, #0
 800b1a0:	d0a9      	beq.n	800b0f6 <__sflush_r+0x1a>
 800b1a2:	0793      	lsls	r3, r2, #30
 800b1a4:	680e      	ldr	r6, [r1, #0]
 800b1a6:	bf08      	it	eq
 800b1a8:	694b      	ldreq	r3, [r1, #20]
 800b1aa:	600f      	str	r7, [r1, #0]
 800b1ac:	bf18      	it	ne
 800b1ae:	2300      	movne	r3, #0
 800b1b0:	eba6 0807 	sub.w	r8, r6, r7
 800b1b4:	608b      	str	r3, [r1, #8]
 800b1b6:	f1b8 0f00 	cmp.w	r8, #0
 800b1ba:	dd9c      	ble.n	800b0f6 <__sflush_r+0x1a>
 800b1bc:	6a21      	ldr	r1, [r4, #32]
 800b1be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1c0:	4643      	mov	r3, r8
 800b1c2:	463a      	mov	r2, r7
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	47b0      	blx	r6
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	dc06      	bgt.n	800b1da <__sflush_r+0xfe>
 800b1cc:	89a3      	ldrh	r3, [r4, #12]
 800b1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	e78e      	b.n	800b0f8 <__sflush_r+0x1c>
 800b1da:	4407      	add	r7, r0
 800b1dc:	eba8 0800 	sub.w	r8, r8, r0
 800b1e0:	e7e9      	b.n	800b1b6 <__sflush_r+0xda>
 800b1e2:	bf00      	nop
 800b1e4:	20400001 	.word	0x20400001

0800b1e8 <_fflush_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	690b      	ldr	r3, [r1, #16]
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	b913      	cbnz	r3, 800b1f8 <_fflush_r+0x10>
 800b1f2:	2500      	movs	r5, #0
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	b118      	cbz	r0, 800b202 <_fflush_r+0x1a>
 800b1fa:	6983      	ldr	r3, [r0, #24]
 800b1fc:	b90b      	cbnz	r3, 800b202 <_fflush_r+0x1a>
 800b1fe:	f000 f887 	bl	800b310 <__sinit>
 800b202:	4b14      	ldr	r3, [pc, #80]	; (800b254 <_fflush_r+0x6c>)
 800b204:	429c      	cmp	r4, r3
 800b206:	d11b      	bne.n	800b240 <_fflush_r+0x58>
 800b208:	686c      	ldr	r4, [r5, #4]
 800b20a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d0ef      	beq.n	800b1f2 <_fflush_r+0xa>
 800b212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b214:	07d0      	lsls	r0, r2, #31
 800b216:	d404      	bmi.n	800b222 <_fflush_r+0x3a>
 800b218:	0599      	lsls	r1, r3, #22
 800b21a:	d402      	bmi.n	800b222 <_fflush_r+0x3a>
 800b21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b21e:	f000 f915 	bl	800b44c <__retarget_lock_acquire_recursive>
 800b222:	4628      	mov	r0, r5
 800b224:	4621      	mov	r1, r4
 800b226:	f7ff ff59 	bl	800b0dc <__sflush_r>
 800b22a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b22c:	07da      	lsls	r2, r3, #31
 800b22e:	4605      	mov	r5, r0
 800b230:	d4e0      	bmi.n	800b1f4 <_fflush_r+0xc>
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	059b      	lsls	r3, r3, #22
 800b236:	d4dd      	bmi.n	800b1f4 <_fflush_r+0xc>
 800b238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b23a:	f000 f908 	bl	800b44e <__retarget_lock_release_recursive>
 800b23e:	e7d9      	b.n	800b1f4 <_fflush_r+0xc>
 800b240:	4b05      	ldr	r3, [pc, #20]	; (800b258 <_fflush_r+0x70>)
 800b242:	429c      	cmp	r4, r3
 800b244:	d101      	bne.n	800b24a <_fflush_r+0x62>
 800b246:	68ac      	ldr	r4, [r5, #8]
 800b248:	e7df      	b.n	800b20a <_fflush_r+0x22>
 800b24a:	4b04      	ldr	r3, [pc, #16]	; (800b25c <_fflush_r+0x74>)
 800b24c:	429c      	cmp	r4, r3
 800b24e:	bf08      	it	eq
 800b250:	68ec      	ldreq	r4, [r5, #12]
 800b252:	e7da      	b.n	800b20a <_fflush_r+0x22>
 800b254:	0800c2e0 	.word	0x0800c2e0
 800b258:	0800c300 	.word	0x0800c300
 800b25c:	0800c2c0 	.word	0x0800c2c0

0800b260 <std>:
 800b260:	2300      	movs	r3, #0
 800b262:	b510      	push	{r4, lr}
 800b264:	4604      	mov	r4, r0
 800b266:	e9c0 3300 	strd	r3, r3, [r0]
 800b26a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b26e:	6083      	str	r3, [r0, #8]
 800b270:	8181      	strh	r1, [r0, #12]
 800b272:	6643      	str	r3, [r0, #100]	; 0x64
 800b274:	81c2      	strh	r2, [r0, #14]
 800b276:	6183      	str	r3, [r0, #24]
 800b278:	4619      	mov	r1, r3
 800b27a:	2208      	movs	r2, #8
 800b27c:	305c      	adds	r0, #92	; 0x5c
 800b27e:	f7ff f973 	bl	800a568 <memset>
 800b282:	4b05      	ldr	r3, [pc, #20]	; (800b298 <std+0x38>)
 800b284:	6263      	str	r3, [r4, #36]	; 0x24
 800b286:	4b05      	ldr	r3, [pc, #20]	; (800b29c <std+0x3c>)
 800b288:	62a3      	str	r3, [r4, #40]	; 0x28
 800b28a:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <std+0x40>)
 800b28c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b28e:	4b05      	ldr	r3, [pc, #20]	; (800b2a4 <std+0x44>)
 800b290:	6224      	str	r4, [r4, #32]
 800b292:	6323      	str	r3, [r4, #48]	; 0x30
 800b294:	bd10      	pop	{r4, pc}
 800b296:	bf00      	nop
 800b298:	0800b5bd 	.word	0x0800b5bd
 800b29c:	0800b5df 	.word	0x0800b5df
 800b2a0:	0800b617 	.word	0x0800b617
 800b2a4:	0800b63b 	.word	0x0800b63b

0800b2a8 <_cleanup_r>:
 800b2a8:	4901      	ldr	r1, [pc, #4]	; (800b2b0 <_cleanup_r+0x8>)
 800b2aa:	f000 b8af 	b.w	800b40c <_fwalk_reent>
 800b2ae:	bf00      	nop
 800b2b0:	0800b1e9 	.word	0x0800b1e9

0800b2b4 <__sfmoreglue>:
 800b2b4:	b570      	push	{r4, r5, r6, lr}
 800b2b6:	2268      	movs	r2, #104	; 0x68
 800b2b8:	1e4d      	subs	r5, r1, #1
 800b2ba:	4355      	muls	r5, r2
 800b2bc:	460e      	mov	r6, r1
 800b2be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2c2:	f7ff f9c5 	bl	800a650 <_malloc_r>
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	b140      	cbz	r0, 800b2dc <__sfmoreglue+0x28>
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	e9c0 1600 	strd	r1, r6, [r0]
 800b2d0:	300c      	adds	r0, #12
 800b2d2:	60a0      	str	r0, [r4, #8]
 800b2d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2d8:	f7ff f946 	bl	800a568 <memset>
 800b2dc:	4620      	mov	r0, r4
 800b2de:	bd70      	pop	{r4, r5, r6, pc}

0800b2e0 <__sfp_lock_acquire>:
 800b2e0:	4801      	ldr	r0, [pc, #4]	; (800b2e8 <__sfp_lock_acquire+0x8>)
 800b2e2:	f000 b8b3 	b.w	800b44c <__retarget_lock_acquire_recursive>
 800b2e6:	bf00      	nop
 800b2e8:	2000057d 	.word	0x2000057d

0800b2ec <__sfp_lock_release>:
 800b2ec:	4801      	ldr	r0, [pc, #4]	; (800b2f4 <__sfp_lock_release+0x8>)
 800b2ee:	f000 b8ae 	b.w	800b44e <__retarget_lock_release_recursive>
 800b2f2:	bf00      	nop
 800b2f4:	2000057d 	.word	0x2000057d

0800b2f8 <__sinit_lock_acquire>:
 800b2f8:	4801      	ldr	r0, [pc, #4]	; (800b300 <__sinit_lock_acquire+0x8>)
 800b2fa:	f000 b8a7 	b.w	800b44c <__retarget_lock_acquire_recursive>
 800b2fe:	bf00      	nop
 800b300:	2000057e 	.word	0x2000057e

0800b304 <__sinit_lock_release>:
 800b304:	4801      	ldr	r0, [pc, #4]	; (800b30c <__sinit_lock_release+0x8>)
 800b306:	f000 b8a2 	b.w	800b44e <__retarget_lock_release_recursive>
 800b30a:	bf00      	nop
 800b30c:	2000057e 	.word	0x2000057e

0800b310 <__sinit>:
 800b310:	b510      	push	{r4, lr}
 800b312:	4604      	mov	r4, r0
 800b314:	f7ff fff0 	bl	800b2f8 <__sinit_lock_acquire>
 800b318:	69a3      	ldr	r3, [r4, #24]
 800b31a:	b11b      	cbz	r3, 800b324 <__sinit+0x14>
 800b31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b320:	f7ff bff0 	b.w	800b304 <__sinit_lock_release>
 800b324:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b328:	6523      	str	r3, [r4, #80]	; 0x50
 800b32a:	4b13      	ldr	r3, [pc, #76]	; (800b378 <__sinit+0x68>)
 800b32c:	4a13      	ldr	r2, [pc, #76]	; (800b37c <__sinit+0x6c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	62a2      	str	r2, [r4, #40]	; 0x28
 800b332:	42a3      	cmp	r3, r4
 800b334:	bf04      	itt	eq
 800b336:	2301      	moveq	r3, #1
 800b338:	61a3      	streq	r3, [r4, #24]
 800b33a:	4620      	mov	r0, r4
 800b33c:	f000 f820 	bl	800b380 <__sfp>
 800b340:	6060      	str	r0, [r4, #4]
 800b342:	4620      	mov	r0, r4
 800b344:	f000 f81c 	bl	800b380 <__sfp>
 800b348:	60a0      	str	r0, [r4, #8]
 800b34a:	4620      	mov	r0, r4
 800b34c:	f000 f818 	bl	800b380 <__sfp>
 800b350:	2200      	movs	r2, #0
 800b352:	60e0      	str	r0, [r4, #12]
 800b354:	2104      	movs	r1, #4
 800b356:	6860      	ldr	r0, [r4, #4]
 800b358:	f7ff ff82 	bl	800b260 <std>
 800b35c:	68a0      	ldr	r0, [r4, #8]
 800b35e:	2201      	movs	r2, #1
 800b360:	2109      	movs	r1, #9
 800b362:	f7ff ff7d 	bl	800b260 <std>
 800b366:	68e0      	ldr	r0, [r4, #12]
 800b368:	2202      	movs	r2, #2
 800b36a:	2112      	movs	r1, #18
 800b36c:	f7ff ff78 	bl	800b260 <std>
 800b370:	2301      	movs	r3, #1
 800b372:	61a3      	str	r3, [r4, #24]
 800b374:	e7d2      	b.n	800b31c <__sinit+0xc>
 800b376:	bf00      	nop
 800b378:	0800c288 	.word	0x0800c288
 800b37c:	0800b2a9 	.word	0x0800b2a9

0800b380 <__sfp>:
 800b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b382:	4607      	mov	r7, r0
 800b384:	f7ff ffac 	bl	800b2e0 <__sfp_lock_acquire>
 800b388:	4b1e      	ldr	r3, [pc, #120]	; (800b404 <__sfp+0x84>)
 800b38a:	681e      	ldr	r6, [r3, #0]
 800b38c:	69b3      	ldr	r3, [r6, #24]
 800b38e:	b913      	cbnz	r3, 800b396 <__sfp+0x16>
 800b390:	4630      	mov	r0, r6
 800b392:	f7ff ffbd 	bl	800b310 <__sinit>
 800b396:	3648      	adds	r6, #72	; 0x48
 800b398:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	d503      	bpl.n	800b3a8 <__sfp+0x28>
 800b3a0:	6833      	ldr	r3, [r6, #0]
 800b3a2:	b30b      	cbz	r3, 800b3e8 <__sfp+0x68>
 800b3a4:	6836      	ldr	r6, [r6, #0]
 800b3a6:	e7f7      	b.n	800b398 <__sfp+0x18>
 800b3a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3ac:	b9d5      	cbnz	r5, 800b3e4 <__sfp+0x64>
 800b3ae:	4b16      	ldr	r3, [pc, #88]	; (800b408 <__sfp+0x88>)
 800b3b0:	60e3      	str	r3, [r4, #12]
 800b3b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3b6:	6665      	str	r5, [r4, #100]	; 0x64
 800b3b8:	f000 f847 	bl	800b44a <__retarget_lock_init_recursive>
 800b3bc:	f7ff ff96 	bl	800b2ec <__sfp_lock_release>
 800b3c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3c8:	6025      	str	r5, [r4, #0]
 800b3ca:	61a5      	str	r5, [r4, #24]
 800b3cc:	2208      	movs	r2, #8
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3d4:	f7ff f8c8 	bl	800a568 <memset>
 800b3d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e4:	3468      	adds	r4, #104	; 0x68
 800b3e6:	e7d9      	b.n	800b39c <__sfp+0x1c>
 800b3e8:	2104      	movs	r1, #4
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f7ff ff62 	bl	800b2b4 <__sfmoreglue>
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	6030      	str	r0, [r6, #0]
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d1d5      	bne.n	800b3a4 <__sfp+0x24>
 800b3f8:	f7ff ff78 	bl	800b2ec <__sfp_lock_release>
 800b3fc:	230c      	movs	r3, #12
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	e7ee      	b.n	800b3e0 <__sfp+0x60>
 800b402:	bf00      	nop
 800b404:	0800c288 	.word	0x0800c288
 800b408:	ffff0001 	.word	0xffff0001

0800b40c <_fwalk_reent>:
 800b40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b410:	4606      	mov	r6, r0
 800b412:	4688      	mov	r8, r1
 800b414:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b418:	2700      	movs	r7, #0
 800b41a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b41e:	f1b9 0901 	subs.w	r9, r9, #1
 800b422:	d505      	bpl.n	800b430 <_fwalk_reent+0x24>
 800b424:	6824      	ldr	r4, [r4, #0]
 800b426:	2c00      	cmp	r4, #0
 800b428:	d1f7      	bne.n	800b41a <_fwalk_reent+0xe>
 800b42a:	4638      	mov	r0, r7
 800b42c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b430:	89ab      	ldrh	r3, [r5, #12]
 800b432:	2b01      	cmp	r3, #1
 800b434:	d907      	bls.n	800b446 <_fwalk_reent+0x3a>
 800b436:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b43a:	3301      	adds	r3, #1
 800b43c:	d003      	beq.n	800b446 <_fwalk_reent+0x3a>
 800b43e:	4629      	mov	r1, r5
 800b440:	4630      	mov	r0, r6
 800b442:	47c0      	blx	r8
 800b444:	4307      	orrs	r7, r0
 800b446:	3568      	adds	r5, #104	; 0x68
 800b448:	e7e9      	b.n	800b41e <_fwalk_reent+0x12>

0800b44a <__retarget_lock_init_recursive>:
 800b44a:	4770      	bx	lr

0800b44c <__retarget_lock_acquire_recursive>:
 800b44c:	4770      	bx	lr

0800b44e <__retarget_lock_release_recursive>:
 800b44e:	4770      	bx	lr

0800b450 <__swhatbuf_r>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	460e      	mov	r6, r1
 800b454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b458:	2900      	cmp	r1, #0
 800b45a:	b096      	sub	sp, #88	; 0x58
 800b45c:	4614      	mov	r4, r2
 800b45e:	461d      	mov	r5, r3
 800b460:	da08      	bge.n	800b474 <__swhatbuf_r+0x24>
 800b462:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	602a      	str	r2, [r5, #0]
 800b46a:	061a      	lsls	r2, r3, #24
 800b46c:	d410      	bmi.n	800b490 <__swhatbuf_r+0x40>
 800b46e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b472:	e00e      	b.n	800b492 <__swhatbuf_r+0x42>
 800b474:	466a      	mov	r2, sp
 800b476:	f000 f907 	bl	800b688 <_fstat_r>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	dbf1      	blt.n	800b462 <__swhatbuf_r+0x12>
 800b47e:	9a01      	ldr	r2, [sp, #4]
 800b480:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b484:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b488:	425a      	negs	r2, r3
 800b48a:	415a      	adcs	r2, r3
 800b48c:	602a      	str	r2, [r5, #0]
 800b48e:	e7ee      	b.n	800b46e <__swhatbuf_r+0x1e>
 800b490:	2340      	movs	r3, #64	; 0x40
 800b492:	2000      	movs	r0, #0
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	b016      	add	sp, #88	; 0x58
 800b498:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b49c <__smakebuf_r>:
 800b49c:	898b      	ldrh	r3, [r1, #12]
 800b49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4a0:	079d      	lsls	r5, r3, #30
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	d507      	bpl.n	800b4b8 <__smakebuf_r+0x1c>
 800b4a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	6123      	str	r3, [r4, #16]
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	6163      	str	r3, [r4, #20]
 800b4b4:	b002      	add	sp, #8
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}
 800b4b8:	ab01      	add	r3, sp, #4
 800b4ba:	466a      	mov	r2, sp
 800b4bc:	f7ff ffc8 	bl	800b450 <__swhatbuf_r>
 800b4c0:	9900      	ldr	r1, [sp, #0]
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f7ff f8c3 	bl	800a650 <_malloc_r>
 800b4ca:	b948      	cbnz	r0, 800b4e0 <__smakebuf_r+0x44>
 800b4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d0:	059a      	lsls	r2, r3, #22
 800b4d2:	d4ef      	bmi.n	800b4b4 <__smakebuf_r+0x18>
 800b4d4:	f023 0303 	bic.w	r3, r3, #3
 800b4d8:	f043 0302 	orr.w	r3, r3, #2
 800b4dc:	81a3      	strh	r3, [r4, #12]
 800b4de:	e7e3      	b.n	800b4a8 <__smakebuf_r+0xc>
 800b4e0:	4b0d      	ldr	r3, [pc, #52]	; (800b518 <__smakebuf_r+0x7c>)
 800b4e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	6020      	str	r0, [r4, #0]
 800b4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	9b00      	ldr	r3, [sp, #0]
 800b4f0:	6163      	str	r3, [r4, #20]
 800b4f2:	9b01      	ldr	r3, [sp, #4]
 800b4f4:	6120      	str	r0, [r4, #16]
 800b4f6:	b15b      	cbz	r3, 800b510 <__smakebuf_r+0x74>
 800b4f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f000 f8d5 	bl	800b6ac <_isatty_r>
 800b502:	b128      	cbz	r0, 800b510 <__smakebuf_r+0x74>
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	f023 0303 	bic.w	r3, r3, #3
 800b50a:	f043 0301 	orr.w	r3, r3, #1
 800b50e:	81a3      	strh	r3, [r4, #12]
 800b510:	89a0      	ldrh	r0, [r4, #12]
 800b512:	4305      	orrs	r5, r0
 800b514:	81a5      	strh	r5, [r4, #12]
 800b516:	e7cd      	b.n	800b4b4 <__smakebuf_r+0x18>
 800b518:	0800b2a9 	.word	0x0800b2a9

0800b51c <__malloc_lock>:
 800b51c:	4801      	ldr	r0, [pc, #4]	; (800b524 <__malloc_lock+0x8>)
 800b51e:	f7ff bf95 	b.w	800b44c <__retarget_lock_acquire_recursive>
 800b522:	bf00      	nop
 800b524:	2000057c 	.word	0x2000057c

0800b528 <__malloc_unlock>:
 800b528:	4801      	ldr	r0, [pc, #4]	; (800b530 <__malloc_unlock+0x8>)
 800b52a:	f7ff bf90 	b.w	800b44e <__retarget_lock_release_recursive>
 800b52e:	bf00      	nop
 800b530:	2000057c 	.word	0x2000057c

0800b534 <_raise_r>:
 800b534:	291f      	cmp	r1, #31
 800b536:	b538      	push	{r3, r4, r5, lr}
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	d904      	bls.n	800b548 <_raise_r+0x14>
 800b53e:	2316      	movs	r3, #22
 800b540:	6003      	str	r3, [r0, #0]
 800b542:	f04f 30ff 	mov.w	r0, #4294967295
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b54a:	b112      	cbz	r2, 800b552 <_raise_r+0x1e>
 800b54c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b550:	b94b      	cbnz	r3, 800b566 <_raise_r+0x32>
 800b552:	4620      	mov	r0, r4
 800b554:	f000 f830 	bl	800b5b8 <_getpid_r>
 800b558:	462a      	mov	r2, r5
 800b55a:	4601      	mov	r1, r0
 800b55c:	4620      	mov	r0, r4
 800b55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b562:	f000 b817 	b.w	800b594 <_kill_r>
 800b566:	2b01      	cmp	r3, #1
 800b568:	d00a      	beq.n	800b580 <_raise_r+0x4c>
 800b56a:	1c59      	adds	r1, r3, #1
 800b56c:	d103      	bne.n	800b576 <_raise_r+0x42>
 800b56e:	2316      	movs	r3, #22
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	2001      	movs	r0, #1
 800b574:	e7e7      	b.n	800b546 <_raise_r+0x12>
 800b576:	2400      	movs	r4, #0
 800b578:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b57c:	4628      	mov	r0, r5
 800b57e:	4798      	blx	r3
 800b580:	2000      	movs	r0, #0
 800b582:	e7e0      	b.n	800b546 <_raise_r+0x12>

0800b584 <raise>:
 800b584:	4b02      	ldr	r3, [pc, #8]	; (800b590 <raise+0xc>)
 800b586:	4601      	mov	r1, r0
 800b588:	6818      	ldr	r0, [r3, #0]
 800b58a:	f7ff bfd3 	b.w	800b534 <_raise_r>
 800b58e:	bf00      	nop
 800b590:	2000000c 	.word	0x2000000c

0800b594 <_kill_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d07      	ldr	r5, [pc, #28]	; (800b5b4 <_kill_r+0x20>)
 800b598:	2300      	movs	r3, #0
 800b59a:	4604      	mov	r4, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	4611      	mov	r1, r2
 800b5a0:	602b      	str	r3, [r5, #0]
 800b5a2:	f000 f8bf 	bl	800b724 <_kill>
 800b5a6:	1c43      	adds	r3, r0, #1
 800b5a8:	d102      	bne.n	800b5b0 <_kill_r+0x1c>
 800b5aa:	682b      	ldr	r3, [r5, #0]
 800b5ac:	b103      	cbz	r3, 800b5b0 <_kill_r+0x1c>
 800b5ae:	6023      	str	r3, [r4, #0]
 800b5b0:	bd38      	pop	{r3, r4, r5, pc}
 800b5b2:	bf00      	nop
 800b5b4:	20000580 	.word	0x20000580

0800b5b8 <_getpid_r>:
 800b5b8:	f000 b8ac 	b.w	800b714 <_getpid>

0800b5bc <__sread>:
 800b5bc:	b510      	push	{r4, lr}
 800b5be:	460c      	mov	r4, r1
 800b5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c4:	f000 f894 	bl	800b6f0 <_read_r>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	bfab      	itete	ge
 800b5cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b5d0:	181b      	addge	r3, r3, r0
 800b5d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5d6:	bfac      	ite	ge
 800b5d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5da:	81a3      	strhlt	r3, [r4, #12]
 800b5dc:	bd10      	pop	{r4, pc}

0800b5de <__swrite>:
 800b5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e2:	461f      	mov	r7, r3
 800b5e4:	898b      	ldrh	r3, [r1, #12]
 800b5e6:	05db      	lsls	r3, r3, #23
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	4616      	mov	r6, r2
 800b5ee:	d505      	bpl.n	800b5fc <__swrite+0x1e>
 800b5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f000 f868 	bl	800b6cc <_lseek_r>
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b606:	81a3      	strh	r3, [r4, #12]
 800b608:	4632      	mov	r2, r6
 800b60a:	463b      	mov	r3, r7
 800b60c:	4628      	mov	r0, r5
 800b60e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b612:	f000 b817 	b.w	800b644 <_write_r>

0800b616 <__sseek>:
 800b616:	b510      	push	{r4, lr}
 800b618:	460c      	mov	r4, r1
 800b61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61e:	f000 f855 	bl	800b6cc <_lseek_r>
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	bf15      	itete	ne
 800b628:	6560      	strne	r0, [r4, #84]	; 0x54
 800b62a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b62e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b632:	81a3      	strheq	r3, [r4, #12]
 800b634:	bf18      	it	ne
 800b636:	81a3      	strhne	r3, [r4, #12]
 800b638:	bd10      	pop	{r4, pc}

0800b63a <__sclose>:
 800b63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b63e:	f000 b813 	b.w	800b668 <_close_r>
	...

0800b644 <_write_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	4d07      	ldr	r5, [pc, #28]	; (800b664 <_write_r+0x20>)
 800b648:	4604      	mov	r4, r0
 800b64a:	4608      	mov	r0, r1
 800b64c:	4611      	mov	r1, r2
 800b64e:	2200      	movs	r2, #0
 800b650:	602a      	str	r2, [r5, #0]
 800b652:	461a      	mov	r2, r3
 800b654:	f7fb fdb8 	bl	80071c8 <_write>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	d102      	bne.n	800b662 <_write_r+0x1e>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	b103      	cbz	r3, 800b662 <_write_r+0x1e>
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	20000580 	.word	0x20000580

0800b668 <_close_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4d06      	ldr	r5, [pc, #24]	; (800b684 <_close_r+0x1c>)
 800b66c:	2300      	movs	r3, #0
 800b66e:	4604      	mov	r4, r0
 800b670:	4608      	mov	r0, r1
 800b672:	602b      	str	r3, [r5, #0]
 800b674:	f7fb fdd4 	bl	8007220 <_close>
 800b678:	1c43      	adds	r3, r0, #1
 800b67a:	d102      	bne.n	800b682 <_close_r+0x1a>
 800b67c:	682b      	ldr	r3, [r5, #0]
 800b67e:	b103      	cbz	r3, 800b682 <_close_r+0x1a>
 800b680:	6023      	str	r3, [r4, #0]
 800b682:	bd38      	pop	{r3, r4, r5, pc}
 800b684:	20000580 	.word	0x20000580

0800b688 <_fstat_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	4d07      	ldr	r5, [pc, #28]	; (800b6a8 <_fstat_r+0x20>)
 800b68c:	2300      	movs	r3, #0
 800b68e:	4604      	mov	r4, r0
 800b690:	4608      	mov	r0, r1
 800b692:	4611      	mov	r1, r2
 800b694:	602b      	str	r3, [r5, #0]
 800b696:	f7fb fe13 	bl	80072c0 <_fstat>
 800b69a:	1c43      	adds	r3, r0, #1
 800b69c:	d102      	bne.n	800b6a4 <_fstat_r+0x1c>
 800b69e:	682b      	ldr	r3, [r5, #0]
 800b6a0:	b103      	cbz	r3, 800b6a4 <_fstat_r+0x1c>
 800b6a2:	6023      	str	r3, [r4, #0]
 800b6a4:	bd38      	pop	{r3, r4, r5, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20000580 	.word	0x20000580

0800b6ac <_isatty_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4d06      	ldr	r5, [pc, #24]	; (800b6c8 <_isatty_r+0x1c>)
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	4608      	mov	r0, r1
 800b6b6:	602b      	str	r3, [r5, #0]
 800b6b8:	f7fb fd70 	bl	800719c <_isatty>
 800b6bc:	1c43      	adds	r3, r0, #1
 800b6be:	d102      	bne.n	800b6c6 <_isatty_r+0x1a>
 800b6c0:	682b      	ldr	r3, [r5, #0]
 800b6c2:	b103      	cbz	r3, 800b6c6 <_isatty_r+0x1a>
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	bd38      	pop	{r3, r4, r5, pc}
 800b6c8:	20000580 	.word	0x20000580

0800b6cc <_lseek_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4d07      	ldr	r5, [pc, #28]	; (800b6ec <_lseek_r+0x20>)
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	4608      	mov	r0, r1
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	602a      	str	r2, [r5, #0]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f7fb fdb7 	bl	800724e <_lseek>
 800b6e0:	1c43      	adds	r3, r0, #1
 800b6e2:	d102      	bne.n	800b6ea <_lseek_r+0x1e>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	b103      	cbz	r3, 800b6ea <_lseek_r+0x1e>
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
 800b6ec:	20000580 	.word	0x20000580

0800b6f0 <_read_r>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	4d07      	ldr	r5, [pc, #28]	; (800b710 <_read_r+0x20>)
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	4608      	mov	r0, r1
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	602a      	str	r2, [r5, #0]
 800b6fe:	461a      	mov	r2, r3
 800b700:	f7fb fdb6 	bl	8007270 <_read>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d102      	bne.n	800b70e <_read_r+0x1e>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	b103      	cbz	r3, 800b70e <_read_r+0x1e>
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	bd38      	pop	{r3, r4, r5, pc}
 800b710:	20000580 	.word	0x20000580

0800b714 <_getpid>:
 800b714:	4b02      	ldr	r3, [pc, #8]	; (800b720 <_getpid+0xc>)
 800b716:	2258      	movs	r2, #88	; 0x58
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	f04f 30ff 	mov.w	r0, #4294967295
 800b71e:	4770      	bx	lr
 800b720:	20000580 	.word	0x20000580

0800b724 <_kill>:
 800b724:	4b02      	ldr	r3, [pc, #8]	; (800b730 <_kill+0xc>)
 800b726:	2258      	movs	r2, #88	; 0x58
 800b728:	601a      	str	r2, [r3, #0]
 800b72a:	f04f 30ff 	mov.w	r0, #4294967295
 800b72e:	4770      	bx	lr
 800b730:	20000580 	.word	0x20000580

0800b734 <_exit>:
 800b734:	e7fe      	b.n	800b734 <_exit>
	...

0800b738 <_init>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	bf00      	nop
 800b73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b73e:	bc08      	pop	{r3}
 800b740:	469e      	mov	lr, r3
 800b742:	4770      	bx	lr

0800b744 <_fini>:
 800b744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b746:	bf00      	nop
 800b748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b74a:	bc08      	pop	{r3}
 800b74c:	469e      	mov	lr, r3
 800b74e:	4770      	bx	lr
